<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.70 dev"/>
    <errors>
        <error id="noConstructor" severity="style" msg="The class &apos;TestMainLoop&apos; does not have a constructor." verbose="The class &apos;TestMainLoop&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="bin/tests/test_image.cpp" line="37"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;TestMainLoop&apos; does not have a constructor." verbose="The class &apos;TestMainLoop&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="bin/tests/test_detailer.cpp" line="39"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;GDTokenizerText&apos; does not have a constructor." verbose="The class &apos;GDTokenizerText&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="modules/gdscript/gd_tokenizer.h" line="153"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ClassNode::initializer&apos; is not initialized in the constructor." verbose="Member variable &apos;ClassNode::initializer&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_parser.h" line="112"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FunctionNode::body&apos; is not initialized in the constructor." verbose="Member variable &apos;FunctionNode::body&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_parser.h" line="125"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BuiltInFunctionNode::function&apos; is not initialized in the constructor." verbose="Member variable &apos;BuiltInFunctionNode::function&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_parser.h" line="151"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OperatorNode::op&apos; is not initialized in the constructor." verbose="Member variable &apos;OperatorNode::op&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_parser.h" line="250"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ControlFlowNode::_else&apos; is not initialized in the constructor." verbose="Member variable &apos;ControlFlowNode::_else&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_parser.h" line="270"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AssertNode::condition&apos; is not initialized in the constructor." verbose="Member variable &apos;AssertNode::condition&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_parser.h" line="275"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;NewLineNode::line&apos; is not initialized in the constructor." verbose="Member variable &apos;NewLineNode::line&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_parser.h" line="280"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GDFunction::get_argument_name&apos; can be static." verbose="The member function &apos;GDFunction::get_argument_name&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="modules/gdscript/gd_script.h" line="176"/>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The struct &apos;NewLineNode&apos; defines member variable with name &apos;line&apos; also defined in its parent struct &apos;Node&apos;." verbose="The struct &apos;NewLineNode&apos; defines member variable with name &apos;line&apos; also defined in its parent struct &apos;Node&apos;.">
            <location file="modules/gdscript/gd_parser.h" line="61"/>
            <location file="modules/gdscript/gd_parser.h" line="279"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GDNativeClass&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GDNativeClass&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="modules/gdscript/gd_script.h" line="228"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;TestMainLoop&apos; does not have a constructor." verbose="The class &apos;TestMainLoop&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="bin/tests/test_misc.cpp" line="352"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: cr.valid" verbose="Uninitialized struct member: cr.valid">
            <location file="bin/tests/test_misc.cpp" line="283"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: cr.depth" verbose="Uninitialized struct member: cr.depth">
            <location file="bin/tests/test_misc.cpp" line="285"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: cr.depth" verbose="Uninitialized struct member: cr.depth">
            <location file="bin/tests/test_misc.cpp" line="294"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="bin/tests/test_math.cpp" line="121"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="bin/tests/test_math.cpp" line="152"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;TestMainLoop&apos; does not have a constructor." verbose="The class &apos;TestMainLoop&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="bin/tests/test_particles.cpp" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OperatorNode::op&apos; is not initialized in the constructor." verbose="Member variable &apos;OperatorNode::op&apos; is not initialized in the constructor.">
            <location file="servers/visual/shader_language.h" line="194"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ConstantNode::datatype&apos; is not initialized in the constructor." verbose="Member variable &apos;ConstantNode::datatype&apos; is not initialized in the constructor.">
            <location file="servers/visual/shader_language.h" line="212"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MemberNode::basetype&apos; is not initialized in the constructor." verbose="Member variable &apos;MemberNode::basetype&apos; is not initialized in the constructor.">
            <location file="servers/visual/shader_language.h" line="236"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MemberNode::datatype&apos; is not initialized in the constructor." verbose="Member variable &apos;MemberNode::datatype&apos; is not initialized in the constructor.">
            <location file="servers/visual/shader_language.h" line="236"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MemberNode::owner&apos; is not initialized in the constructor." verbose="Member variable &apos;MemberNode::owner&apos; is not initialized in the constructor.">
            <location file="servers/visual/shader_language.h" line="236"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FunctionNode::return_type&apos; is not initialized in the constructor." verbose="Member variable &apos;FunctionNode::return_type&apos; is not initialized in the constructor.">
            <location file="servers/visual/shader_language.h" line="254"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FunctionNode::body&apos; is not initialized in the constructor." verbose="Member variable &apos;FunctionNode::body&apos; is not initialized in the constructor.">
            <location file="servers/visual/shader_language.h" line="254"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ProgramNode::body&apos; is not initialized in the constructor." verbose="Member variable &apos;ProgramNode::body&apos; is not initialized in the constructor.">
            <location file="servers/visual/shader_language.h" line="279"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Parser::program&apos; is not initialized in the constructor." verbose="Member variable &apos;Parser::program&apos; is not initialized in the constructor.">
            <location file="servers/visual/shader_language.h" line="351"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Parser&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Parser&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="servers/visual/shader_language.h" line="351"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="bin/tests/test_physics.cpp" line="71"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TestPhysicsMainLoop::ofs_x&apos; is not initialized in the constructor." verbose="Member variable &apos;TestPhysicsMainLoop::ofs_x&apos; is not initialized in the constructor.">
            <location file="bin/tests/test_physics.cpp" line="649"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TestPhysicsMainLoop::ofs_y&apos; is not initialized in the constructor." verbose="Member variable &apos;TestPhysicsMainLoop::ofs_y&apos; is not initialized in the constructor.">
            <location file="bin/tests/test_physics.cpp" line="649"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TestPhysicsMainLoop::quit&apos; is not initialized in the constructor." verbose="Member variable &apos;TestPhysicsMainLoop::quit&apos; is not initialized in the constructor.">
            <location file="bin/tests/test_physics.cpp" line="649"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="bin/tests/test_physics_2d.cpp" line="330"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &apos;body_shape_data[6]&apos; accessed at index 9, which is out of bounds." verbose="Array &apos;body_shape_data[6]&apos; accessed at index 9, which is out of bounds.">
            <location file="bin/tests/test_physics_2d.cpp" line="194"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &apos;body_shape_data[6]&apos; accessed at index 9, which is out of bounds." verbose="Array &apos;body_shape_data[6]&apos; accessed at index 9, which is out of bounds.">
            <location file="bin/tests/test_physics_2d.cpp" line="209"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;TestMainLoop&apos; does not have a constructor." verbose="The class &apos;TestMainLoop&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="bin/tests/test_render.cpp" line="43"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;TestMainLoop&apos; does not have a constructor." verbose="The class &apos;TestMainLoop&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="bin/tests/test_sound.cpp" line="41"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Character::h_align&apos; is not initialized in the constructor." verbose="Member variable &apos;Character::h_align&apos; is not initialized in the constructor.">
            <location file="scene/resources/font.h" line="54"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Character::advance&apos; is not initialized in the constructor." verbose="Member variable &apos;Character::advance&apos; is not initialized in the constructor.">
            <location file="scene/resources/font.h" line="54"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Item::ID&apos; is not initialized in the constructor." verbose="Member variable &apos;Item::ID&apos; is not initialized in the constructor.">
            <location file="scene/gui/popup_menu.h" line="55"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Item::index&apos; is not initialized in the constructor." verbose="Member variable &apos;Item::index&apos; is not initialized in the constructor.">
            <location file="scene/gui/rich_text_label.h" line="85"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Item::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Item::type&apos; is not initialized in the constructor.">
            <location file="scene/gui/rich_text_label.h" line="85"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ItemAlign::align&apos; is not initialized in the constructor." verbose="Member variable &apos;ItemAlign::align&apos; is not initialized in the constructor.">
            <location file="scene/gui/rich_text_label.h" line="132"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ItemIndent::level&apos; is not initialized in the constructor." verbose="Member variable &apos;ItemIndent::level&apos; is not initialized in the constructor.">
            <location file="scene/gui/rich_text_label.h" line="138"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ItemList::list_type&apos; is not initialized in the constructor." verbose="Member variable &apos;ItemList::list_type&apos; is not initialized in the constructor.">
            <location file="scene/gui/rich_text_label.h" line="144"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ItemNewline::line&apos; is not initialized in the constructor." verbose="Member variable &apos;ItemNewline::line&apos; is not initialized in the constructor.">
            <location file="scene/gui/rich_text_label.h" line="150"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Line::height_cache&apos; is not initialized in the constructor." verbose="Member variable &apos;Line::height_cache&apos; is not initialized in the constructor.">
            <location file="scene/gui/rich_text_label.h" line="176"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Line::height_accum_cache&apos; is not initialized in the constructor." verbose="Member variable &apos;Line::height_accum_cache&apos; is not initialized in the constructor.">
            <location file="scene/gui/rich_text_label.h" line="176"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;TestMainLoop&apos; does not have a constructor." verbose="The class &apos;TestMainLoop&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="bin/tests/test_gui.cpp" line="61"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Shader&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Shader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/resources/shader.h" line="100"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Button&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Button&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/gui/button.h" line="80"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Label&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Label&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/gui/label.h" line="128"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ScrollBar&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ScrollBar&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/gui/scroll_bar.h" line="105"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Slider&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Slider&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/gui/slider.h" line="70"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RenderTargetTexture&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RenderTargetTexture&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/main/viewport.h" line="66"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Material&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Material&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/resources/material.h" line="104"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Text::color_regions&apos; is not initialized in the constructor." verbose="Member variable &apos;Text::color_regions&apos; is not initialized in the constructor.">
            <location file="scene/gui/text_edit.h" line="144"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/os/memory.h" line="104"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/os/memory.h" line="137"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/vector.h" line="204"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="26"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="306"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/reference.h" line="42"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/reference.h" line="318"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/nrex/regex.h" line="22"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="3471"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="3311"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="3151"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="2991"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="2834"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="2678"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="2522"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="2366"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="2213"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="2061"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="1909"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="1757"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="1608"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="1460"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="1312"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="1164"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="1019"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="875"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="731"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="587"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="446"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/method_bind.inc" line="166"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/dvector.h" line="81"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/dvector.h" line="153"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/vector.h" line="84"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;middle&apos; can be reduced." verbose="The scope of the variable &apos;middle&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/vmap.h" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aux&apos; can be reduced." verbose="The scope of the variable &apos;aux&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/vector.h" line="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aux&apos; can be reduced." verbose="The scope of the variable &apos;aux&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/list.h" line="409"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aux&apos; can be reduced." verbose="The scope of the variable &apos;aux&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/list.h" line="431"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;failptr&apos; can be reduced." verbose="The scope of the variable &apos;failptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/os/memory.h" line="312"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/color.cpp" line="301"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;MID::operator=&apos; should return &apos;MID &amp;&apos;." verbose="The MID::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;MID &amp;MID::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/os/memory.h" line="149"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;MID_Lock::operator=&apos; should return &apos;MID_Lock &amp;&apos;." verbose="The MID_Lock::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;MID_Lock &amp;MID_Lock::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/os/memory.h" line="165"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Array::operator=&apos; should return &apos;Array &amp;&apos;." verbose="The Array::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Array &amp;Array::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/array.h" line="61"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;T&gt;::operator=&apos; should return &apos;Vector&lt;T&gt; &amp;&apos;." verbose="The Vector&lt;T&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;T&gt; &amp;Vector&lt;T&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;char&gt;::operator=&apos; should return &apos;Vector&lt;char&gt; &amp;&apos;." verbose="The Vector&lt;char&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;char&gt; &amp;Vector&lt;char&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;wchar_t&gt;::operator=&apos; should return &apos;Vector&lt;wchar_t&gt; &amp;&apos;." verbose="The Vector&lt;wchar_t&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;wchar_t&gt; &amp;Vector&lt;wchar_t&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;String&gt;::operator=&apos; should return &apos;Vector&lt;String&gt; &amp;&apos;." verbose="The Vector&lt;String&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;String&gt; &amp;Vector&lt;String&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;float&gt;::operator=&apos; should return &apos;Vector&lt;float&gt; &amp;&apos;." verbose="The Vector&lt;float&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;float&gt; &amp;Vector&lt;float&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;int&gt;::operator=&apos; should return &apos;Vector&lt;int&gt; &amp;&apos;." verbose="The Vector&lt;int&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;int&gt; &amp;Vector&lt;int&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;unsignedint__int8&gt;::operator=&apos; should return &apos;Vector&lt;unsignedint__int8&gt; &amp;&apos;." verbose="The Vector&lt;unsignedint__int8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;unsignedint__int8&gt; &amp;Vector&lt;unsignedint__int8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;mid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;mid&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/os/memory.h" line="166"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;mid&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;mid&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/os/memory.h" line="167"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CharString::operatorconstchar*&apos; can be const." verbose="The member function &apos;CharString::operatorconstchar*&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/ustring.h" line="46"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;T&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;T&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;T&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;T&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;T&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;T&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;char&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;char&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;char&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;char&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;wchar_t&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;wchar_t&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;wchar_t&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;wchar_t&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;String&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;String&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;String&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;String&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;float&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;float&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;float&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;float&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;int&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;int&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;int&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;int&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;unsignedint__int8&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;unsignedint__int8&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Vector&lt;unsignedint__int8&gt;::sort_custom&apos; can be const." verbose="The member function &apos;Vector&lt;unsignedint__int8&gt;::sort_custom&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/vector.h" line="137"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;unsignedint__int8&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;unsignedint__int8&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;T,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;T,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;char,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;char,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;wchar_t,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;wchar_t,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;String,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;String,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;float,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;float,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;int,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;int,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;unsignedint__int8,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;unsignedint__int8,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MID&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MID&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/os/memory.h" line="135"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MID_Lock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MID_Lock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/os/memory.h" line="166"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MutexLock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MutexLock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/os/mutex.h" line="65"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Array&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Array&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/array.h" line="79"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/ustring.h" line="228"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;String&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;String&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/ustring.h" line="230"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;uint8_t&gt;::operator=&apos; should return &apos;Vector&lt;uint8_t&gt; &amp;&apos;." verbose="The Vector&lt;uint8_t&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;uint8_t&gt; &amp;Vector&lt;uint8_t&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;uint8_t&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;uint8_t&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;uint8_t&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;uint8_t&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;uint8_t,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;uint8_t,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;Tconst&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;Tconst&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="63"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;constT&amp;&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;constT&amp;&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="77"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int8&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int8&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="119"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int8const&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int8const&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="119"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int8&amp;&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int8&amp;&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="119"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;constint__int8&amp;&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;constint__int8&amp;&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="119"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int16&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int16&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="121"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int16const&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int16const&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="121"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int16&amp;&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int16&amp;&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="121"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;constint__int16&amp;&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;constint__int16&amp;&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="121"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int32&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int32&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="123"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int32const&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int32const&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="123"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int32&amp;&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int32&amp;&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="123"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;constint__int32&amp;&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;constint__int32&amp;&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="123"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int64&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int64&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="125"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int64const&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int64const&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="125"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;int__int64&amp;&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;int__int64&amp;&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="125"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;GetSimpleType&lt;constint__int64&amp;&gt;::GetSimpleType&apos; can be static." verbose="The member function &apos;GetSimpleType&lt;constint__int64&amp;&gt;::GetSimpleType&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/simple_type.h" line="125"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CommandQueueMT::flush_one&apos; can be static." verbose="The member function &apos;CommandQueueMT::flush_one&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/command_queue_mt.h" line="473"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CommandQueueMT::wait_for_flush&apos; can be static." verbose="The member function &apos;CommandQueueMT::wait_for_flush&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/command_queue_mt.h" line="504"/>
            <location file="core/command_queue_mt.cpp" line="44"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CommandQueueMT&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CommandQueueMT&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/command_queue_mt.h" line="996"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;_Data::refcount&apos; is not initialized in the constructor." verbose="Member variable &apos;_Data::refcount&apos; is not initialized in the constructor.">
            <location file="core/string_db.h" line="68"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;_Data::idx&apos; is not initialized in the constructor." verbose="Member variable &apos;_Data::idx&apos; is not initialized in the constructor.">
            <location file="core/string_db.h" line="68"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind0::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind0::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="52"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind0C::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind0C::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="332"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Reference::_type_name&apos; is not assigned a value in &apos;Reference::operator=&apos;." verbose="Member variable &apos;Reference::_type_name&apos; is not assigned a value in &apos;Reference::operator=&apos;.">
            <location file="core/reference.h" line="42"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Reference::refcount&apos; is not assigned a value in &apos;Reference::operator=&apos;." verbose="Member variable &apos;Reference::refcount&apos; is not assigned a value in &apos;Reference::operator=&apos;." inconclusive="true">
            <location file="core/reference.h" line="42"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Reference::refcount_init&apos; is not assigned a value in &apos;Reference::operator=&apos;." verbose="Member variable &apos;Reference::refcount_init&apos; is not assigned a value in &apos;Reference::operator=&apos;." inconclusive="true">
            <location file="core/reference.h" line="42"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;WeakRef::_type_name&apos; is not assigned a value in &apos;WeakRef::operator=&apos;." verbose="Member variable &apos;WeakRef::_type_name&apos; is not assigned a value in &apos;WeakRef::operator=&apos;.">
            <location file="core/reference.h" line="318"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;RegEx::_type_name&apos; is not assigned a value in &apos;RegEx::operator=&apos;." verbose="Member variable &apos;RegEx::_type_name&apos; is not assigned a value in &apos;RegEx::operator=&apos;.">
            <location file="drivers/nrex/regex.h" line="22"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;RegEx::text&apos; is not assigned a value in &apos;RegEx::operator=&apos;." verbose="Member variable &apos;RegEx::text&apos; is not assigned a value in &apos;RegEx::operator=&apos;.">
            <location file="drivers/nrex/regex.h" line="22"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;RegEx::captures&apos; is not assigned a value in &apos;RegEx::operator=&apos;." verbose="Member variable &apos;RegEx::captures&apos; is not assigned a value in &apos;RegEx::operator=&apos;.">
            <location file="drivers/nrex/regex.h" line="22"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind5RC&lt;R,P1,P2,P3,P4,P5&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind5RC&lt;R,P1,P2,P3,P4,P5&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="3502"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind5C&lt;P1,P2,P3,P4,P5&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind5C&lt;P1,P2,P3,P4,P5&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="3342"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind5R&lt;R,P1,P2,P3,P4,P5&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind5R&lt;R,P1,P2,P3,P4,P5&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="3182"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind5&lt;P1,P2,P3,P4,P5&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind5&lt;P1,P2,P3,P4,P5&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="3022"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind4RC&lt;R,P1,P2,P3,P4&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind4RC&lt;R,P1,P2,P3,P4&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="2864"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind4C&lt;P1,P2,P3,P4&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind4C&lt;P1,P2,P3,P4&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="2708"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind4R&lt;R,P1,P2,P3,P4&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind4R&lt;R,P1,P2,P3,P4&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="2552"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind4&lt;P1,P2,P3,P4&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind4&lt;P1,P2,P3,P4&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="2396"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind3RC&lt;R,P1,P2,P3&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind3RC&lt;R,P1,P2,P3&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="2242"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind3C&lt;P1,P2,P3&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind3C&lt;P1,P2,P3&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="2090"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind3R&lt;R,P1,P2,P3&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind3R&lt;R,P1,P2,P3&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="1938"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind3&lt;P1,P2,P3&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind3&lt;P1,P2,P3&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="1786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind2RC&lt;R,P1,P2&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind2RC&lt;R,P1,P2&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="1636"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind2C&lt;P1,P2&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind2C&lt;P1,P2&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="1488"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind2R&lt;R,P1,P2&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind2R&lt;R,P1,P2&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="1340"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind2&lt;P1,P2&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind2&lt;P1,P2&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="1192"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind1RC&lt;R,P1&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind1RC&lt;R,P1&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="1046"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind1C&lt;P1&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind1C&lt;P1&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="902"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind1R&lt;R,P1&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind1R&lt;R,P1&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="758"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind1&lt;P1&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind1&lt;P1&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="614"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind0RC&lt;R&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind0RC&lt;R&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="472"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MethodBind0R&lt;R&gt;::method&apos; is not initialized in the constructor." verbose="Member variable &apos;MethodBind0R&lt;R&gt;::method&apos; is not initialized in the constructor.">
            <location file="core/method_bind.inc" line="192"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Element::value&apos; is not initialized in the constructor." verbose="Member variable &apos;Element::value&apos; is not initialized in the constructor.">
            <location file="core/set.h" line="89"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Pair::data&apos; is not initialized in the constructor." verbose="Member variable &apos;Pair::data&apos; is not initialized in the constructor." inconclusive="true">
            <location file="core/hash_map.h" line="92"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Pair::key&apos; is not initialized in the constructor." verbose="Member variable &apos;Pair::key&apos; is not initialized in the constructor." inconclusive="true">
            <location file="core/hash_map.h" line="92"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Element::value&apos; is not initialized in the constructor." verbose="Member variable &apos;Element::value&apos; is not initialized in the constructor.">
            <location file="core/list.h" line="140"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;StringName::operator=&apos; should return &apos;StringName &amp;&apos;." verbose="The StringName::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;StringName &amp;StringName::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/string_db.h" line="141"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;NodePath::operator=&apos; should return &apos;NodePath &amp;&apos;." verbose="The NodePath::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;NodePath &amp;NodePath::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/path_db.h" line="86"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;RefPtr::operator=&apos; should return &apos;RefPtr &amp;&apos;." verbose="The RefPtr::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;RefPtr &amp;RefPtr::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/ref_ptr.h" line="51"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Dictionary::operator=&apos; should return &apos;Dictionary &amp;&apos;." verbose="The Dictionary::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Dictionary &amp;Dictionary::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dictionary.h" line="77"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Variant::operator=&apos; should return &apos;Variant &amp;&apos;." verbose="The Variant::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Variant &amp;Variant::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/variant.h" line="431"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;T&gt;::operator=&apos; should return &apos;Ref&lt;T&gt; &amp;&apos;." verbose="The Ref&lt;T&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;T&gt; &amp;Ref&lt;T&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;Reference&gt;::operator=&apos; should return &apos;Ref&lt;Reference&gt; &amp;&apos;." verbose="The Ref&lt;Reference&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;Reference&gt; &amp;Ref&lt;Reference&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;T_Other&gt;::operator=&apos; should return &apos;Ref&lt;T_Other&gt; &amp;&apos;." verbose="The Ref&lt;T_Other&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;T_Other&gt; &amp;Ref&lt;T_Other&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;T_Other&gt;::operator=&apos; should return &apos;Ref&lt;T_Other&gt; &amp;&apos;." verbose="The Ref&lt;T_Other&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;T_Other&gt; &amp;Ref&lt;T_Other&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="176"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;K,V,C,A&gt;::operator=&apos; should return &apos;Map&lt;K,V,C,A&gt; &amp;&apos;." verbose="The Map&lt;K,V,C,A&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;K,V,C,A&gt; &amp;Map&lt;K,V,C,A&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;T,C,A&gt;::operator=&apos; should return &apos;Set&lt;T,C,A&gt; &amp;&apos;." verbose="The Set&lt;T,C,A&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;T,C,A&gt; &amp;Set&lt;T,C,A&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Object*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Object*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Object*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Object*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Object*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,T*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,T*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,T*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,T*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,T*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,Signal,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,Signal,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,Signal,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,Signal,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,Signal,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Object*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Object*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Object*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Object*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Object*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;Object*,unsignedint__int32,ObjectPtrHash,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;Object*,unsignedint__int32,ObjectPtrHash,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;Object*,unsignedint__int32,ObjectPtrHash,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;Object*,unsignedint__int32,ObjectPtrHash,3,8&gt; &amp;HashMap&lt;Object*,unsignedint__int32,ObjectPtrHash,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,MethodBind*,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,MethodBind*,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,MethodBind*,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,MethodBind*,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,MethodBind*,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,int,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,int,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,int,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,int,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,int,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,MethodInfo,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,MethodInfo,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,MethodInfo,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,MethodInfo,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,MethodInfo,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,PropertySetGet,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,PropertySetGet,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,PropertySetGet,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,PropertySetGet,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,PropertySetGet,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,TypeInfo,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,TypeInfo,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,TypeInfo,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,TypeInfo,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,TypeInfo,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,StringName,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,StringName,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,StringName,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,StringName,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,StringName,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;T&gt;::operator=&apos; should return &apos;DVector&lt;T&gt; &amp;&apos;." verbose="The DVector&lt;T&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;T&gt; &amp;DVector&lt;T&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;unsignedint__int8&gt;::operator=&apos; should return &apos;DVector&lt;unsignedint__int8&gt; &amp;&apos;." verbose="The DVector&lt;unsignedint__int8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;unsignedint__int8&gt; &amp;DVector&lt;unsignedint__int8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;Plane&gt;::operator=&apos; should return &apos;DVector&lt;Plane&gt; &amp;&apos;." verbose="The DVector&lt;Plane&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;Plane&gt; &amp;DVector&lt;Plane&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;int&gt;::operator=&apos; should return &apos;DVector&lt;int&gt; &amp;&apos;." verbose="The DVector&lt;int&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;int&gt; &amp;DVector&lt;int&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;real_t&gt;::operator=&apos; should return &apos;DVector&lt;real_t&gt; &amp;&apos;." verbose="The DVector&lt;real_t&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;real_t&gt; &amp;DVector&lt;real_t&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;String&gt;::operator=&apos; should return &apos;DVector&lt;String&gt; &amp;&apos;." verbose="The DVector&lt;String&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;String&gt; &amp;DVector&lt;String&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;Vector3&gt;::operator=&apos; should return &apos;DVector&lt;Vector3&gt; &amp;&apos;." verbose="The DVector&lt;Vector3&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;Vector3&gt; &amp;DVector&lt;Vector3&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;Color&gt;::operator=&apos; should return &apos;DVector&lt;Color&gt; &amp;&apos;." verbose="The DVector&lt;Color&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;Color&gt; &amp;DVector&lt;Color&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;Face3&gt;::operator=&apos; should return &apos;DVector&lt;Face3&gt; &amp;&apos;." verbose="The DVector&lt;Face3&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;Face3&gt; &amp;DVector&lt;Face3&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;Vector2&gt;::operator=&apos; should return &apos;DVector&lt;Vector2&gt; &amp;&apos;." verbose="The DVector&lt;Vector2&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;Vector2&gt; &amp;DVector&lt;Vector2&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;StringName&gt;::operator=&apos; should return &apos;Vector&lt;StringName&gt; &amp;&apos;." verbose="The Vector&lt;StringName&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;StringName&gt; &amp;Vector&lt;StringName&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Variant&gt;::operator=&apos; should return &apos;Vector&lt;Variant&gt; &amp;&apos;." verbose="The Vector&lt;Variant&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Variant&gt; &amp;Vector&lt;Variant&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;real_t&gt;::operator=&apos; should return &apos;Vector&lt;real_t&gt; &amp;&apos;." verbose="The Vector&lt;real_t&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;real_t&gt; &amp;Vector&lt;real_t&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Vector3&gt;::operator=&apos; should return &apos;Vector&lt;Vector3&gt; &amp;&apos;." verbose="The Vector&lt;Vector3&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Vector3&gt; &amp;Vector&lt;Vector3&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Color&gt;::operator=&apos; should return &apos;Vector&lt;Color&gt; &amp;&apos;." verbose="The Vector&lt;Color&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Color&gt; &amp;Vector&lt;Color&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Plane&gt;::operator=&apos; should return &apos;Vector&lt;Plane&gt; &amp;&apos;." verbose="The Vector&lt;Plane&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Plane&gt; &amp;Vector&lt;Plane&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;RID&gt;::operator=&apos; should return &apos;Vector&lt;RID&gt; &amp;&apos;." verbose="The Vector&lt;RID&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;RID&gt; &amp;Vector&lt;RID&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Vector2&gt;::operator=&apos; should return &apos;Vector&lt;Vector2&gt; &amp;&apos;." verbose="The Vector&lt;Vector2&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Vector2&gt; &amp;Vector&lt;Vector2&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;_Pair&gt;::operator=&apos; should return &apos;Vector&lt;_Pair&gt; &amp;&apos;." verbose="The Vector&lt;_Pair&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;_Pair&gt; &amp;Vector&lt;_Pair&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;nrex_result&gt;::operator=&apos; should return &apos;Vector&lt;nrex_result&gt; &amp;&apos;." verbose="The Vector&lt;nrex_result&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;nrex_result&gt; &amp;Vector&lt;nrex_result&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;T,A&gt;::operator=&apos; should return &apos;List&lt;T,A&gt; &amp;&apos;." verbose="The List&lt;T,A&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;T,A&gt; &amp;List&lt;T,A&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;TKey,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;TKey,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;TKey,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;TKey,DefaultAllocator&gt; &amp;List&lt;TKey,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;RID,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;RID,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;RID,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;RID,DefaultAllocator&gt; &amp;List&lt;RID,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Variant,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Variant,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Variant,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Variant,DefaultAllocator&gt; &amp;List&lt;Variant,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;MethodInfo,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;MethodInfo,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;MethodInfo,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;MethodInfo,DefaultAllocator&gt; &amp;List&lt;MethodInfo,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;PropertyInfo,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;PropertyInfo,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;PropertyInfo,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;PropertyInfo,DefaultAllocator&gt; &amp;List&lt;PropertyInfo,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Connection,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Connection,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Connection,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Connection,DefaultAllocator&gt; &amp;List&lt;Connection,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;String,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;String,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;String,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;String,DefaultAllocator&gt; &amp;List&lt;String,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;StringName,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;StringName,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;StringName,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;StringName,DefaultAllocator&gt; &amp;List&lt;StringName,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;unsignedint__int32,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;unsignedint__int32,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;unsignedint__int32,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;unsignedint__int32,DefaultAllocator&gt; &amp;List&lt;unsignedint__int32,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Object*,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Object*,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Object*,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Object*,DefaultAllocator&gt; &amp;List&lt;Object*,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.h" line="116"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hint_string&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hint_string&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.h" line="116"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;method&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;method&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.h" line="358"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object_type_db.h" line="48"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;hint_text&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;hint_text&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object_type_db.h" line="50"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;default_val&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;default_val&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object_type_db.h" line="51"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;key&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;key&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/hash_map.h" line="93"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;data&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;data&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/hash_map.h" line="93"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RID::is_valid&apos; can be static." verbose="The member function &apos;RID::is_valid&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/rid.h" line="74"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RID_OwnerBase::set_id&apos; can be static." verbose="The member function &apos;RID_OwnerBase::set_id&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/rid.h" line="90"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::_set&apos; can be static." verbose="The member function &apos;Object::_set&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="418"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::_get&apos; can be static." verbose="The member function &apos;Object::_get&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="419"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::_get_property_list&apos; can be static." verbose="The member function &apos;Object::_get_property_list&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="420"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::_notification&apos; can be static." verbose="The member function &apos;Object::_notification&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="421"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::*&apos; can be static." verbose="The member function &apos;Object::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="426"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::*&apos; can be static." verbose="The member function &apos;Object::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="429"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::*&apos; can be static." verbose="The member function &apos;Object::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="432"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::*&apos; can be static." verbose="The member function &apos;Object::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="435"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::_change_notify&apos; can be static." verbose="The member function &apos;Object::_change_notify&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="474"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::_is_gpl_reversed&apos; can be static." verbose="The member function &apos;Object::_is_gpl_reversed&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="481"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;MethodBind::set_hint_flags&apos; can be static." verbose="The member function &apos;MethodBind::set_hint_flags&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/method_bind.h" line="195"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Reference::*&apos; can be static." verbose="The member function &apos;Reference::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/reference.h" line="42"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;WeakRef::*&apos; can be static." verbose="The member function &apos;WeakRef::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/reference.h" line="318"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RegEx::*&apos; can be static." verbose="The member function &apos;RegEx::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/nrex/regex.h" line="22"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;K,V,C,A&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;K,V,C,A&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;K,V,C,A&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;K,V,C,A&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;K,V,C,A&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;K,V,C,A&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;T,C,A&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;T,C,A&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;T,C,A&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;T,C,A&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;T,C,A&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;T,C,A&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Object*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Object*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Object*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Object*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Object*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Object*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,T*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,T*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,T*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,T*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,Signal,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,Signal,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,Signal,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,Signal,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Object*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Object*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Object*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Object*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectPtrHash,3,8&gt;::has&apos; can be static." verbose="The member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectPtrHash,3,8&gt;::has&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="310"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectPtrHash,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectPtrHash,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectPtrHash,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectPtrHash,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,MethodBind*,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,MethodBind*,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,MethodBind*,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,MethodBind*,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,int,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,int,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,int,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,int,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,MethodInfo,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,MethodInfo,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,MethodInfo,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,MethodInfo,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,PropertySetGet,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,PropertySetGet,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,PropertySetGet,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,PropertySetGet,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,TypeInfo,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,TypeInfo,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,TypeInfo,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,TypeInfo,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,StringName,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,StringName,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,StringName,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,StringName,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;StringName&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;StringName&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;StringName&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;StringName&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Variant&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Variant&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Variant&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Variant&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;real_t&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;real_t&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;real_t&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;real_t&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Vector3&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Vector3&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Vector3&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Vector3&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Color&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Color&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Color&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Color&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Plane&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Plane&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Plane&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Plane&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;RID&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;RID&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;RID&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;RID&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Vector2&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Vector2&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Vector2&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Vector2&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;_Pair&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;_Pair&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;_Pair&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;_Pair&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;nrex_result&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;nrex_result&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;nrex_result&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;nrex_result&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;T,A&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;T,A&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;T,A&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;T,A&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;TKey,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;TKey,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;TKey,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;TKey,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;RID,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;RID,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;RID,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;RID,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Variant,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Variant,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Variant,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Variant,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;MethodInfo,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;MethodInfo,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;MethodInfo,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;MethodInfo,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;PropertyInfo,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;PropertyInfo,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;PropertyInfo,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;PropertyInfo,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Connection,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Connection,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Connection,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Connection,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;String,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;String,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;String,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;String,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;StringName,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;StringName,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;StringName,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;StringName,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;unsignedint__int32,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;unsignedint__int32,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;unsignedint__int32,DefaultAllocator&gt;::Element::set&apos; can be static." verbose="The member function &apos;List&lt;unsignedint__int32,DefaultAllocator&gt;::Element::set&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="131"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Object*,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Object*,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Object*,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Object*,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Element*,AuxiliaryComparator&lt;C&gt;&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Element*,AuxiliaryComparator&lt;C&gt;&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;StringName,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;StringName,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Variant,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Variant,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;real_t,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;real_t,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Vector3,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Vector3,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Color,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Color,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Plane,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Plane,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;RID,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;RID,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Vector2,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Vector2,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;_Pair,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;_Pair,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;nrex_result,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;nrex_result,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Image&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Image&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/image.h" line="355"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/string_db.h" line="90"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/string_db.h" line="142"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/string_db.h" line="144"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StringName&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/string_db.h" line="145"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;NodePath&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;NodePath&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/path_db.h" line="91"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;IP_Address&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;IP_Address&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/io/ip_address.h" line="49"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Dictionary&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Dictionary&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/dictionary.h" line="84"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="264"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="265"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="266"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="272"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="273"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="274"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="275"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="276"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="277"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="278"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="279"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="280"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="281"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="282"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="283"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="284"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="285"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="286"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="287"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="288"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="289"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="290"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="291"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="292"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="293"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="294"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="295"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="296"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="297"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="298"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="299"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="300"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="302"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="303"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="304"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="305"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="306"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="307"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="308"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="309"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="310"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="313"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="314"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="315"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="316"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="317"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="318"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="319"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="320"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="321"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="322"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="323"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Variant&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/variant.h" line="325"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/object.h" line="139"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;MethodInfo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/object.h" line="145"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Connection&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Connection&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/object.h" line="339"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ParamDef&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ParamDef&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/object_type_db.h" line="60"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RegEx&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RegEx&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/nrex/regex.h" line="43"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;T&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;T&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;T&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;T&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;T&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;T&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;T&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;T&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Reference&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Reference&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Reference&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Reference&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Reference&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Reference&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Reference&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Reference&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;T_Other&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;T_Other&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;T_Other&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;T_Other&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;T_Other&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;T_Other&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandQueueMT::command_mem&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandQueueMT::command_mem&apos; is not initialized in the constructor.">
            <location file="core/command_queue_mt.cpp" line="76"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Variant,_ArrayVariantSortCustom&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Variant,_ArrayVariantSortCustom&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference">
            <location file="core/map.h" line="617"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference">
            <location file="core/map.h" line="619"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference">
            <location file="core/map.h" line="631"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference">
            <location file="core/hash_map.h" line="491"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference">
            <location file="core/list.h" line="425"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference">
            <location file="core/list.h" line="447"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_name&apos; should be passed by reference." verbose="Parameter &apos;p_name&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="core/object.h" line="115"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/globals.h" line="42"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/vector.h" line="184"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/vector.h" line="209"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/vector.h" line="263"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/vector.h" line="270"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/vector.h" line="294"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aux&apos; can be reduced." verbose="The scope of the variable &apos;aux&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/dvector.h" line="330"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/resource.h" line="51"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/resource.h" line="91"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/translation.h" line="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/translation.h" line="71"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/compressed_translation.h" line="36"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;_PHashTranslationCmp::orig_len&apos; is never used." verbose="struct or union member &apos;_PHashTranslationCmp::orig_len&apos; is never used.">
            <location file="core/compressed_translation.cpp" line="247"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;_PHashTranslationCmp::offset&apos; is never used." verbose="struct or union member &apos;_PHashTranslationCmp::offset&apos; is never used.">
            <location file="core/compressed_translation.cpp" line="249"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Entry::hash&apos; is not initialized in the constructor." verbose="Member variable &apos;Entry::hash&apos; is not initialized in the constructor.">
            <location file="core/hash_map.h" line="104"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,T*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,T*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,T*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,T*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,T*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Object*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Object*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Object*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Object*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Object*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;Object*,uint32_t,ObjectPtrHash,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;Object*,uint32_t,ObjectPtrHash,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;Object*,uint32_t,ObjectPtrHash,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;Object*,uint32_t,ObjectPtrHash,3,8&gt; &amp;HashMap&lt;Object*,uint32_t,ObjectPtrHash,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;uint32_t,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;uint32_t,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;uint32_t,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;uint32_t,DefaultAllocator&gt; &amp;List&lt;uint32_t,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;uint8_t&gt;::operator=&apos; should return &apos;DVector&lt;uint8_t&gt; &amp;&apos;." verbose="The DVector&lt;uint8_t&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;uint8_t&gt; &amp;DVector&lt;uint8_t&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;uint32_t,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;uint32_t,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;uint32_t,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;uint32_t,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;WeakRef::ref&apos; is not assigned a value in &apos;WeakRef::operator=&apos;." verbose="Member variable &apos;WeakRef::ref&apos; is not assigned a value in &apos;WeakRef::operator=&apos;.">
            <location file="core/reference.h" line="318"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Globals::_type_name&apos; is not assigned a value in &apos;Globals::operator=&apos;." verbose="Member variable &apos;Globals::_type_name&apos; is not assigned a value in &apos;Globals::operator=&apos;.">
            <location file="core/globals.h" line="42"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Globals::last_order&apos; is not assigned a value in &apos;Globals::operator=&apos;." verbose="Member variable &apos;Globals::last_order&apos; is not assigned a value in &apos;Globals::operator=&apos;.">
            <location file="core/globals.h" line="42"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Globals::props&apos; is not assigned a value in &apos;Globals::operator=&apos;." verbose="Member variable &apos;Globals::props&apos; is not assigned a value in &apos;Globals::operator=&apos;.">
            <location file="core/globals.h" line="42"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Globals::resource_path&apos; is not assigned a value in &apos;Globals::operator=&apos;." verbose="Member variable &apos;Globals::resource_path&apos; is not assigned a value in &apos;Globals::operator=&apos;.">
            <location file="core/globals.h" line="42"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Globals::custom_prop_info&apos; is not assigned a value in &apos;Globals::operator=&apos;." verbose="Member variable &apos;Globals::custom_prop_info&apos; is not assigned a value in &apos;Globals::operator=&apos;.">
            <location file="core/globals.h" line="42"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Globals::disable_platform_override&apos; is not assigned a value in &apos;Globals::operator=&apos;." verbose="Member variable &apos;Globals::disable_platform_override&apos; is not assigned a value in &apos;Globals::operator=&apos;.">
            <location file="core/globals.h" line="42"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Globals::using_datapack&apos; is not assigned a value in &apos;Globals::operator=&apos;." verbose="Member variable &apos;Globals::using_datapack&apos; is not assigned a value in &apos;Globals::operator=&apos;.">
            <location file="core/globals.h" line="42"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Globals::singletons&apos; is not assigned a value in &apos;Globals::operator=&apos;." verbose="Member variable &apos;Globals::singletons&apos; is not assigned a value in &apos;Globals::operator=&apos;.">
            <location file="core/globals.h" line="42"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Element::_value&apos; is not initialized in the constructor." verbose="Member variable &apos;Element::_value&apos; is not initialized in the constructor.">
            <location file="core/map.h" line="99"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,VariantContainer,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,VariantContainer,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,VariantContainer,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,VariantContainer,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,VariantContainer,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,PropertyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,PropertyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,PropertyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,PropertyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,PropertyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,List&lt;String,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,List&lt;String,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,List&lt;String,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,List&lt;String,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,List&lt;String,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Size2&gt;::operator=&apos; should return &apos;Vector&lt;Size2&gt; &amp;&apos;." verbose="The Vector&lt;Size2&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Size2&gt; &amp;Vector&lt;Size2&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Size2i&gt;::operator=&apos; should return &apos;Vector&lt;Size2i&gt; &amp;&apos;." verbose="The Vector&lt;Size2i&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Size2i&gt; &amp;Vector&lt;Size2i&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Point2i&gt;::operator=&apos; should return &apos;Vector&lt;Point2i&gt; &amp;&apos;." verbose="The Vector&lt;Point2i&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Point2i&gt; &amp;Vector&lt;Point2i&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Point2&gt;::operator=&apos; should return &apos;Vector&lt;Point2&gt; &amp;&apos;." verbose="The Vector&lt;Point2&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Point2&gt; &amp;Vector&lt;Point2&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Singleton,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Singleton,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Singleton,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Singleton,DefaultAllocator&gt; &amp;List&lt;Singleton,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;OS::VideoMode,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;OS::VideoMode,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;OS::VideoMode,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;OS::VideoMode,DefaultAllocator&gt; &amp;List&lt;OS::VideoMode,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;_OSCoreBindImg,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;_OSCoreBindImg,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;_OSCoreBindImg,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;_OSCoreBindImg,DefaultAllocator&gt; &amp;List&lt;_OSCoreBindImg,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Ref&lt;Resource&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Ref&lt;Resource&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Ref&lt;Resource&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Ref&lt;Resource&gt;,DefaultAllocator&gt; &amp;List&lt;Ref&lt;Resource&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/globals.h" line="52"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;variant&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;variant&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/globals.h" line="64"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_ResourceLoader::load_interactive&apos; can be static." verbose="The member function &apos;_ResourceLoader::load_interactive&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="23"/>
            <location file="core/bind/core_bind.cpp" line="11"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_ResourceLoader::get_recognized_extensions_for_type&apos; can be static." verbose="The member function &apos;_ResourceLoader::get_recognized_extensions_for_type&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="25"/>
            <location file="core/bind/core_bind.cpp" line="21"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_ResourceLoader::set_abort_on_missing_resources&apos; can be static." verbose="The member function &apos;_ResourceLoader::set_abort_on_missing_resources&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="26"/>
            <location file="core/bind/core_bind.cpp" line="34"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_ResourceLoader::get_dependencies&apos; can be static." verbose="The member function &apos;_ResourceLoader::get_dependencies&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="27"/>
            <location file="core/bind/core_bind.cpp" line="39"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_ResourceLoader::has&apos; can be static." verbose="The member function &apos;_ResourceLoader::has&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="28"/>
            <location file="core/bind/core_bind.cpp" line="52"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_ResourceSaver::get_recognized_extensions&apos; can be static." verbose="The member function &apos;_ResourceSaver::get_recognized_extensions&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="55"/>
            <location file="core/bind/core_bind.cpp" line="81"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_mouse_pos&apos; can be static." verbose="The member function &apos;_OS::get_mouse_pos&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="97"/>
            <location file="core/bind/core_bind.cpp" line="119"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::set_window_title&apos; can be static." verbose="The member function &apos;_OS::set_window_title&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="98"/>
            <location file="core/bind/core_bind.cpp" line="123"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_mouse_button_state&apos; can be static." verbose="The member function &apos;_OS::get_mouse_button_state&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="99"/>
            <location file="core/bind/core_bind.cpp" line="129"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::set_clipboard&apos; can be static." verbose="The member function &apos;_OS::set_clipboard&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="102"/>
            <location file="core/bind/core_bind.cpp" line="142"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_clipboard&apos; can be static." verbose="The member function &apos;_OS::get_clipboard&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="103"/>
            <location file="core/bind/core_bind.cpp" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::set_video_mode&apos; can be static." verbose="The member function &apos;_OS::set_video_mode&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="105"/>
            <location file="core/bind/core_bind.cpp" line="153"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_video_mode&apos; can be static." verbose="The member function &apos;_OS::get_video_mode&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="106"/>
            <location file="core/bind/core_bind.cpp" line="164"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::is_video_mode_fullscreen&apos; can be static." verbose="The member function &apos;_OS::is_video_mode_fullscreen&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="107"/>
            <location file="core/bind/core_bind.cpp" line="171"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::is_video_mode_resizable&apos; can be static." verbose="The member function &apos;_OS::is_video_mode_resizable&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="108"/>
            <location file="core/bind/core_bind.cpp" line="254"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_fullscreen_mode_list&apos; can be static." verbose="The member function &apos;_OS::get_fullscreen_mode_list&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="109"/>
            <location file="core/bind/core_bind.cpp" line="261"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::native_video_play&apos; can be static." verbose="The member function &apos;_OS::native_video_play&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="131"/>
            <location file="core/bind/core_bind.cpp" line="671"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::native_video_is_playing&apos; can be static." verbose="The member function &apos;_OS::native_video_is_playing&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="132"/>
            <location file="core/bind/core_bind.cpp" line="676"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::native_video_pause&apos; can be static." verbose="The member function &apos;_OS::native_video_pause&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="133"/>
            <location file="core/bind/core_bind.cpp" line="681"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::native_video_stop&apos; can be static." verbose="The member function &apos;_OS::native_video_stop&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="134"/>
            <location file="core/bind/core_bind.cpp" line="686"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::set_iterations_per_second&apos; can be static." verbose="The member function &apos;_OS::set_iterations_per_second&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="136"/>
            <location file="core/bind/core_bind.cpp" line="274"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_iterations_per_second&apos; can be static." verbose="The member function &apos;_OS::get_iterations_per_second&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="137"/>
            <location file="core/bind/core_bind.cpp" line="278"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::set_target_fps&apos; can be static." verbose="The member function &apos;_OS::set_target_fps&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="139"/>
            <location file="core/bind/core_bind.cpp" line="284"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_target_fps&apos; can be static." verbose="The member function &apos;_OS::get_target_fps&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="140"/>
            <location file="core/bind/core_bind.cpp" line="288"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::set_low_processor_usage_mode&apos; can be static." verbose="The member function &apos;_OS::set_low_processor_usage_mode&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="142"/>
            <location file="core/bind/core_bind.cpp" line="292"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::is_in_low_processor_usage_mode&apos; can be static." verbose="The member function &apos;_OS::is_in_low_processor_usage_mode&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="143"/>
            <location file="core/bind/core_bind.cpp" line="296"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_executable_path&apos; can be static." verbose="The member function &apos;_OS::get_executable_path&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="145"/>
            <location file="core/bind/core_bind.cpp" line="301"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::execute&apos; can be static." verbose="The member function &apos;_OS::execute&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="146"/>
            <location file="core/bind/core_bind.cpp" line="312"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::kill&apos; can be static." verbose="The member function &apos;_OS::kill&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="148"/>
            <location file="core/bind/core_bind.cpp" line="328"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::shell_open&apos; can be static." verbose="The member function &apos;_OS::shell_open&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="149"/>
            <location file="core/bind/core_bind.cpp" line="306"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_process_ID&apos; can be static." verbose="The member function &apos;_OS::get_process_ID&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="151"/>
            <location file="core/bind/core_bind.cpp" line="333"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::has_environment&apos; can be static." verbose="The member function &apos;_OS::has_environment&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="153"/>
            <location file="core/bind/core_bind.cpp" line="339"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_environment&apos; can be static." verbose="The member function &apos;_OS::get_environment&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="154"/>
            <location file="core/bind/core_bind.cpp" line="343"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_name&apos; can be static." verbose="The member function &apos;_OS::get_name&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="156"/>
            <location file="core/bind/core_bind.cpp" line="348"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_cmdline_args&apos; can be static." verbose="The member function &apos;_OS::get_cmdline_args&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="157"/>
            <location file="core/bind/core_bind.cpp" line="352"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_locale&apos; can be static." verbose="The member function &apos;_OS::get_locale&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="159"/>
            <location file="core/bind/core_bind.cpp" line="364"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_model_name&apos; can be static." verbose="The member function &apos;_OS::get_model_name&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="160"/>
            <location file="core/bind/core_bind.cpp" line="369"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_custom_level&apos; can be static." verbose="The member function &apos;_OS::get_custom_level&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="163"/>
            <location file="core/bind/core_bind.cpp" line="717"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_frames_per_second&apos; can be static." verbose="The member function &apos;_OS::get_frames_per_second&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="165"/>
            <location file="core/bind/core_bind.cpp" line="666"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::dump_memory_to_file&apos; can be static." verbose="The member function &apos;_OS::dump_memory_to_file&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="167"/>
            <location file="core/bind/core_bind.cpp" line="547"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::dump_resources_to_file&apos; can be static." verbose="The member function &apos;_OS::dump_resources_to_file&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="168"/>
            <location file="core/bind/core_bind.cpp" line="656"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::print_resources_in_use&apos; can be static." verbose="The member function &apos;_OS::print_resources_in_use&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="170"/>
            <location file="core/bind/core_bind.cpp" line="651"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::print_all_resources&apos; can be static." verbose="The member function &apos;_OS::print_all_resources&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="171"/>
            <location file="core/bind/core_bind.cpp" line="646"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::print_all_textures_by_size&apos; can be static." verbose="The member function &apos;_OS::print_all_textures_by_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="172"/>
            <location file="core/bind/core_bind.cpp" line="562"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::print_resources_by_type&apos; can be static." verbose="The member function &apos;_OS::print_resources_by_type&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="173"/>
            <location file="core/bind/core_bind.cpp" line="599"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::has_touchscreen_ui_hint&apos; can be static." verbose="The member function &apos;_OS::has_touchscreen_ui_hint&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="175"/>
            <location file="core/bind/core_bind.cpp" line="137"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::is_debug_build&apos; can be static." verbose="The member function &apos;_OS::is_debug_build&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="177"/>
            <location file="core/bind/core_bind.cpp" line="691"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_unique_ID&apos; can be static." verbose="The member function &apos;_OS::get_unique_ID&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="179"/>
            <location file="core/bind/core_bind.cpp" line="134"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::find_scancode_from_string&apos; can be static." verbose="The member function &apos;_OS::find_scancode_from_string&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="183"/>
            <location file="core/bind/core_bind.cpp" line="730"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::set_use_file_access_save_and_swap&apos; can be static." verbose="The member function &apos;_OS::set_use_file_access_save_and_swap&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="204"/>
            <location file="core/bind/core_bind.cpp" line="249"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::set_icon&apos; can be static." verbose="The member function &apos;_OS::set_icon&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="206"/>
            <location file="core/bind/core_bind.cpp" line="455"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_date&apos; can be static." verbose="The member function &apos;_OS::get_date&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="207"/>
            <location file="core/bind/core_bind.cpp" line="460"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_time&apos; can be static." verbose="The member function &apos;_OS::get_time&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="208"/>
            <location file="core/bind/core_bind.cpp" line="473"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_time_zone_info&apos; can be static." verbose="The member function &apos;_OS::get_time_zone_info&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="209"/>
            <location file="core/bind/core_bind.cpp" line="484"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_static_memory_usage&apos; can be static." verbose="The member function &apos;_OS::get_static_memory_usage&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="213"/>
            <location file="core/bind/core_bind.cpp" line="437"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_static_memory_peak_usage&apos; can be static." verbose="The member function &apos;_OS::get_static_memory_peak_usage&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="214"/>
            <location file="core/bind/core_bind.cpp" line="443"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_dynamic_memory_usage&apos; can be static." verbose="The member function &apos;_OS::get_dynamic_memory_usage&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="215"/>
            <location file="core/bind/core_bind.cpp" line="449"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::can_use_threads&apos; can be static." verbose="The member function &apos;_OS::can_use_threads&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="222"/>
            <location file="core/bind/core_bind.cpp" line="521"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::can_draw&apos; can be static." verbose="The member function &apos;_OS::can_draw&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="224"/>
            <location file="core/bind/core_bind.cpp" line="526"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_frames_drawn&apos; can be static." verbose="The member function &apos;_OS::get_frames_drawn&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="226"/>
            <location file="core/bind/core_bind.cpp" line="531"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::is_stdout_verbose&apos; can be static." verbose="The member function &apos;_OS::is_stdout_verbose&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="228"/>
            <location file="core/bind/core_bind.cpp" line="541"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_processor_count&apos; can be static." verbose="The member function &apos;_OS::get_processor_count&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="230"/>
            <location file="core/bind/core_bind.cpp" line="536"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_data_dir&apos; can be static." verbose="The member function &apos;_OS::get_data_dir&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="257"/>
            <location file="core/bind/core_bind.cpp" line="661"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_screen_orientation&apos; can be static." verbose="The member function &apos;_OS::get_screen_orientation&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="260"/>
            <location file="core/bind/core_bind.cpp" line="706"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::set_time_scale&apos; can be static." verbose="The member function &apos;_OS::set_time_scale&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="262"/>
            <location file="core/bind/core_bind.cpp" line="379"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_time_scale&apos; can be static." verbose="The member function &apos;_OS::get_time_scale&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="263"/>
            <location file="core/bind/core_bind.cpp" line="383"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::is_ok_left_and_cancel_right&apos; can be static." verbose="The member function &apos;_OS::is_ok_left_and_cancel_right&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="265"/>
            <location file="core/bind/core_bind.cpp" line="388"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::build_box_planes&apos; can be static." verbose="The member function &apos;_Geometry::build_box_planes&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="287"/>
            <location file="core/bind/core_bind.cpp" line="920"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::build_cylinder_planes&apos; can be static." verbose="The member function &apos;_Geometry::build_cylinder_planes&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="288"/>
            <location file="core/bind/core_bind.cpp" line="925"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::build_capsule_planes&apos; can be static." verbose="The member function &apos;_Geometry::build_capsule_planes&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="289"/>
            <location file="core/bind/core_bind.cpp" line="929"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::segment_intersects_segment_2d&apos; can be static." verbose="The member function &apos;_Geometry::segment_intersects_segment_2d&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="290"/>
            <location file="core/bind/core_bind.cpp" line="939"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::get_closest_points_between_segments_2d&apos; can be static." verbose="The member function &apos;_Geometry::get_closest_points_between_segments_2d&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="291"/>
            <location file="core/bind/core_bind.cpp" line="950"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::get_closest_points_between_segments&apos; can be static." verbose="The member function &apos;_Geometry::get_closest_points_between_segments&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="292"/>
            <location file="core/bind/core_bind.cpp" line="961"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::get_closest_point_to_segment&apos; can be static." verbose="The member function &apos;_Geometry::get_closest_point_to_segment&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="293"/>
            <location file="core/bind/core_bind.cpp" line="972"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::ray_intersects_triangle&apos; can be static." verbose="The member function &apos;_Geometry::ray_intersects_triangle&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="294"/>
            <location file="core/bind/core_bind.cpp" line="977"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::segment_intersects_triangle&apos; can be static." verbose="The member function &apos;_Geometry::segment_intersects_triangle&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="295"/>
            <location file="core/bind/core_bind.cpp" line="987"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::point_is_inside_triangle&apos; can be static." verbose="The member function &apos;_Geometry::point_is_inside_triangle&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="296"/>
            <location file="core/bind/core_bind.cpp" line="997"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::segment_intersects_sphere&apos; can be static." verbose="The member function &apos;_Geometry::segment_intersects_sphere&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="298"/>
            <location file="core/bind/core_bind.cpp" line="1002"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::segment_intersects_cylinder&apos; can be static." verbose="The member function &apos;_Geometry::segment_intersects_cylinder&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="299"/>
            <location file="core/bind/core_bind.cpp" line="1014"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::segment_intersects_convex&apos; can be static." verbose="The member function &apos;_Geometry::segment_intersects_convex&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="300"/>
            <location file="core/bind/core_bind.cpp" line="1027"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::segment_intersects_circle&apos; can be static." verbose="The member function &apos;_Geometry::segment_intersects_circle&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="301"/>
            <location file="core/bind/core_bind.cpp" line="934"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::get_uv84_normal_bit&apos; can be static." verbose="The member function &apos;_Geometry::get_uv84_normal_bit&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="302"/>
            <location file="core/bind/core_bind.cpp" line="1075"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::triangulate_polygon&apos; can be static." verbose="The member function &apos;_Geometry::triangulate_polygon&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="304"/>
            <location file="core/bind/core_bind.cpp" line="1040"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::make_atlas&apos; can be static." verbose="The member function &apos;_Geometry::make_atlas&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="306"/>
            <location file="core/bind/core_bind.cpp" line="1045"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Globals::*&apos; can be static." verbose="The member function &apos;Globals::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/globals.h" line="42"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,VariantContainer,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,VariantContainer,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,VariantContainer,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,VariantContainer,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,VariantContainer,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,VariantContainer,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,PropertyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,PropertyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,PropertyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,PropertyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,PropertyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,PropertyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,List&lt;String,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,List&lt;String,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,List&lt;String,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,List&lt;String,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,List&lt;String,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,List&lt;String,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;String&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;String&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Plane&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Plane&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;int&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;int&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Vector2&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Vector2&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Size2&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Size2&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Size2&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Size2&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Size2&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Size2&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;uint8_t&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;uint8_t&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Size2i&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Size2i&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Size2i&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Size2i&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Point2i&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Point2i&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Point2i&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Point2i&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Point2&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Point2&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Point2&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Point2&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Singleton,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Singleton,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Singleton,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Singleton,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;OS::VideoMode,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;OS::VideoMode,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;OS::VideoMode,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;OS::VideoMode,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;_OSCoreBindImg,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;_OSCoreBindImg,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;_OSCoreBindImg,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;_OSCoreBindImg,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Ref&lt;Resource&gt;,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Ref&lt;Resource&gt;,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Ref&lt;Resource&gt;,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Ref&lt;Resource&gt;,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Size2,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Size2,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Size2i,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Size2i,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Point2i,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Point2i,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Point2,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Point2,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ThreadSafeMethod&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ThreadSafeMethod&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/os/thread_safe.h" line="53"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_path&apos; should be passed by reference." verbose="Parameter &apos;p_path&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="core/globals.h" line="81"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_path&apos; should be passed by reference." verbose="Parameter &apos;p_path&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="core/globals.h" line="82"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ResourceImportMetadata::_type_name&apos; is not assigned a value in &apos;ResourceImportMetadata::operator=&apos;." verbose="Member variable &apos;ResourceImportMetadata::_type_name&apos; is not assigned a value in &apos;ResourceImportMetadata::operator=&apos;.">
            <location file="core/resource.h" line="51"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ResourceImportMetadata::sources&apos; is not assigned a value in &apos;ResourceImportMetadata::operator=&apos;." verbose="Member variable &apos;ResourceImportMetadata::sources&apos; is not assigned a value in &apos;ResourceImportMetadata::operator=&apos;.">
            <location file="core/resource.h" line="51"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ResourceImportMetadata::editor&apos; is not assigned a value in &apos;ResourceImportMetadata::operator=&apos;." verbose="Member variable &apos;ResourceImportMetadata::editor&apos; is not assigned a value in &apos;ResourceImportMetadata::operator=&apos;.">
            <location file="core/resource.h" line="51"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ResourceImportMetadata::options&apos; is not assigned a value in &apos;ResourceImportMetadata::operator=&apos;." verbose="Member variable &apos;ResourceImportMetadata::options&apos; is not assigned a value in &apos;ResourceImportMetadata::operator=&apos;.">
            <location file="core/resource.h" line="51"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Resource::_type_name&apos; is not assigned a value in &apos;Resource::operator=&apos;." verbose="Member variable &apos;Resource::_type_name&apos; is not assigned a value in &apos;Resource::operator=&apos;.">
            <location file="core/resource.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Resource::owners&apos; is not assigned a value in &apos;Resource::operator=&apos;." verbose="Member variable &apos;Resource::owners&apos; is not assigned a value in &apos;Resource::operator=&apos;.">
            <location file="core/resource.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Resource::name&apos; is not assigned a value in &apos;Resource::operator=&apos;." verbose="Member variable &apos;Resource::name&apos; is not assigned a value in &apos;Resource::operator=&apos;.">
            <location file="core/resource.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Resource::path_cache&apos; is not assigned a value in &apos;Resource::operator=&apos;." verbose="Member variable &apos;Resource::path_cache&apos; is not assigned a value in &apos;Resource::operator=&apos;.">
            <location file="core/resource.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Resource::subindex&apos; is not assigned a value in &apos;Resource::operator=&apos;." verbose="Member variable &apos;Resource::subindex&apos; is not assigned a value in &apos;Resource::operator=&apos;.">
            <location file="core/resource.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Translation::_type_name&apos; is not assigned a value in &apos;Translation::operator=&apos;." verbose="Member variable &apos;Translation::_type_name&apos; is not assigned a value in &apos;Translation::operator=&apos;.">
            <location file="core/translation.h" line="38"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Translation::locale&apos; is not assigned a value in &apos;Translation::operator=&apos;." verbose="Member variable &apos;Translation::locale&apos; is not assigned a value in &apos;Translation::operator=&apos;.">
            <location file="core/translation.h" line="38"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Translation::translation_map&apos; is not assigned a value in &apos;Translation::operator=&apos;." verbose="Member variable &apos;Translation::translation_map&apos; is not assigned a value in &apos;Translation::operator=&apos;.">
            <location file="core/translation.h" line="38"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;TranslationServer::_type_name&apos; is not assigned a value in &apos;TranslationServer::operator=&apos;." verbose="Member variable &apos;TranslationServer::_type_name&apos; is not assigned a value in &apos;TranslationServer::operator=&apos;.">
            <location file="core/translation.h" line="71"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;TranslationServer::locale&apos; is not assigned a value in &apos;TranslationServer::operator=&apos;." verbose="Member variable &apos;TranslationServer::locale&apos; is not assigned a value in &apos;TranslationServer::operator=&apos;.">
            <location file="core/translation.h" line="71"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;TranslationServer::fallback&apos; is not assigned a value in &apos;TranslationServer::operator=&apos;." verbose="Member variable &apos;TranslationServer::fallback&apos; is not assigned a value in &apos;TranslationServer::operator=&apos;.">
            <location file="core/translation.h" line="71"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;TranslationServer::translations&apos; is not assigned a value in &apos;TranslationServer::operator=&apos;." verbose="Member variable &apos;TranslationServer::translations&apos; is not assigned a value in &apos;TranslationServer::operator=&apos;.">
            <location file="core/translation.h" line="71"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;TranslationServer::enabled&apos; is not assigned a value in &apos;TranslationServer::operator=&apos;." verbose="Member variable &apos;TranslationServer::enabled&apos; is not assigned a value in &apos;TranslationServer::operator=&apos;.">
            <location file="core/translation.h" line="71"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PHashTranslation::_type_name&apos; is not assigned a value in &apos;PHashTranslation::operator=&apos;." verbose="Member variable &apos;PHashTranslation::_type_name&apos; is not assigned a value in &apos;PHashTranslation::operator=&apos;.">
            <location file="core/compressed_translation.h" line="36"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PHashTranslation::hash_table&apos; is not assigned a value in &apos;PHashTranslation::operator=&apos;." verbose="Member variable &apos;PHashTranslation::hash_table&apos; is not assigned a value in &apos;PHashTranslation::operator=&apos;.">
            <location file="core/compressed_translation.h" line="36"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PHashTranslation::bucket_table&apos; is not assigned a value in &apos;PHashTranslation::operator=&apos;." verbose="Member variable &apos;PHashTranslation::bucket_table&apos; is not assigned a value in &apos;PHashTranslation::operator=&apos;.">
            <location file="core/compressed_translation.h" line="36"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PHashTranslation::strings&apos; is not assigned a value in &apos;PHashTranslation::operator=&apos;." verbose="Member variable &apos;PHashTranslation::strings&apos; is not assigned a value in &apos;PHashTranslation::operator=&apos;.">
            <location file="core/compressed_translation.h" line="36"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;Resource&gt;::operator=&apos; should return &apos;Ref&lt;Resource&gt; &amp;&apos;." verbose="The Ref&lt;Resource&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;Resource&gt; &amp;Ref&lt;Resource&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;ResourceImportMetadata&gt;::operator=&apos; should return &apos;Ref&lt;ResourceImportMetadata&gt; &amp;&apos;." verbose="The Ref&lt;ResourceImportMetadata&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;ResourceImportMetadata&gt; &amp;Ref&lt;ResourceImportMetadata&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;Translation&gt;::operator=&apos; should return &apos;Ref&lt;Translation&gt; &amp;&apos;." verbose="The Ref&lt;Translation&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;Translation&gt; &amp;Ref&lt;Translation&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;unsignedint__int32,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;unsignedint__int32,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;unsignedint__int32,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;unsignedint__int32,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;unsignedint__int32,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Ref&lt;Translation&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Ref&lt;Translation&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Ref&lt;Translation&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Ref&lt;Translation&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Ref&lt;Translation&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;String,Resource*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;String,Resource*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;String,Resource*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;String,Resource*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;String,Resource*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Source&gt;::operator=&apos; should return &apos;Vector&lt;Source&gt; &amp;&apos;." verbose="The Vector&lt;Source&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Source&gt; &amp;Vector&lt;Source&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;ResourceImportMetadata::*&apos; can be static." verbose="The member function &apos;ResourceImportMetadata::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/resource.h" line="51"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Resource::*&apos; can be static." verbose="The member function &apos;Resource::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/resource.h" line="91"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Translation::*&apos; can be static." verbose="The member function &apos;Translation::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/translation.h" line="38"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;TranslationServer::*&apos; can be static." verbose="The member function &apos;TranslationServer::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/translation.h" line="71"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PHashTranslation::*&apos; can be static." verbose="The member function &apos;PHashTranslation::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/compressed_translation.h" line="36"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PHashTranslation::_get_property_list&apos; can be static." verbose="The member function &apos;PHashTranslation::_get_property_list&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/compressed_translation.h" line="82"/>
            <location file="core/compressed_translation.cpp" line="519"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PHashTranslation::generate&apos; can be static." verbose="The member function &apos;PHashTranslation::generate&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/compressed_translation.h" line="88"/>
            <location file="core/compressed_translation.cpp" line="252"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;unsignedint__int32,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;unsignedint__int32,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;unsignedint__int32,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;unsignedint__int32,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;unsignedint__int32,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;unsignedint__int32,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Ref&lt;Translation&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Ref&lt;Translation&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Ref&lt;Translation&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Ref&lt;Translation&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Ref&lt;Translation&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Ref&lt;Translation&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;String,Resource*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;String,Resource*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;String,Resource*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;String,Resource*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Source&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Source&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Source&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Source&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Source,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Source,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Resource&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Resource&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Resource&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Resource&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Resource&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Resource&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Resource&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Resource&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;ResourceImportMetadata&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;ResourceImportMetadata&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;ResourceImportMetadata&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;ResourceImportMetadata&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;ResourceImportMetadata&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;ResourceImportMetadata&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;ResourceImportMetadata&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;ResourceImportMetadata&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Translation&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Translation&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Translation&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Translation&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Translation&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Translation&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Translation&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Translation&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Reference::refcount&apos; is not assigned a value in &apos;Reference::operator=&apos;." verbose="Member variable &apos;Reference::refcount&apos; is not assigned a value in &apos;Reference::operator=&apos;.">
            <location file="core/reference.h" line="42"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Reference::refcount_init&apos; is not assigned a value in &apos;Reference::operator=&apos;." verbose="Member variable &apos;Reference::refcount_init&apos; is not assigned a value in &apos;Reference::operator=&apos;.">
            <location file="core/reference.h" line="42"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap::operator=&apos; should return &apos;HashMap &amp;&apos;." verbose="The HashMap::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap &amp;HashMap::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;CoreStringNames::free&apos;" verbose="Unused private function: &apos;CoreStringNames::free&apos;">
            <location file="core/core_string_names.h" line="42"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;_free&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;_free&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/core_string_names.cpp" line="35"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap::size&apos; can be static." verbose="The member function &apos;HashMap::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap::empty&apos; can be static." verbose="The member function &apos;HashMap::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;uint32_t,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;uint32_t,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;uint32_t,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;uint32_t,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;uint32_t,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PHashTranslation::hash&apos; can be static." verbose="The member function &apos;PHashTranslation::hash&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/compressed_translation.h" line="66"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;uint32_t,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;uint32_t,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;uint32_t,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;uint32_t,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;uint32_t,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;uint32_t,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;errline&apos; can be reduced." verbose="The scope of the variable &apos;errline&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/dictionary.cpp" line="188"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_ResourceSaver::save&apos; can be static." verbose="The member function &apos;_ResourceSaver::save&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="54"/>
            <location file="core/bind/core_bind.cpp" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_scancode_string&apos; can be static." verbose="The member function &apos;_OS::get_scancode_string&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="181"/>
            <location file="core/bind/core_bind.cpp" line="722"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::is_scancode_unicode&apos; can be static." verbose="The member function &apos;_OS::is_scancode_unicode&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="182"/>
            <location file="core/bind/core_bind.cpp" line="726"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_unix_time&apos; can be static." verbose="The member function &apos;_OS::get_unix_time&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="210"/>
            <location file="core/bind/core_bind.cpp" line="492"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_system_time_msec&apos; can be static." verbose="The member function &apos;_OS::get_system_time_msec&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="211"/>
            <location file="core/bind/core_bind.cpp" line="497"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::delay_usec&apos; can be static." verbose="The member function &apos;_OS::delay_usec&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="217"/>
            <location file="core/bind/core_bind.cpp" line="501"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::delay_msec&apos; can be static." verbose="The member function &apos;_OS::delay_msec&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="218"/>
            <location file="core/bind/core_bind.cpp" line="506"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_ticks_msec&apos; can be static." verbose="The member function &apos;_OS::get_ticks_msec&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="219"/>
            <location file="core/bind/core_bind.cpp" line="511"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::get_splash_tick_msec&apos; can be static." verbose="The member function &apos;_OS::get_splash_tick_msec&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="220"/>
            <location file="core/bind/core_bind.cpp" line="516"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;Variant,Variant,_DictionaryVariantHash,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;Variant,Variant,_DictionaryVariantHash,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;Variant,Variant,_DictionaryVariantHash,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;Variant,Variant,_DictionaryVariantHash,3,8&gt; &amp;HashMap&lt;Variant,Variant,_DictionaryVariantHash,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;Variant,Variant,_DictionaryVariantHash,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;Variant,Variant,_DictionaryVariantHash,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;Variant,Variant,_DictionaryVariantHash,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;Variant,Variant,_DictionaryVariantHash,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/event_queue.cpp" line="108"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/event_queue.cpp" line="150"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;EventQueue::push_call&apos; can be static." verbose="The member function &apos;EventQueue::push_call&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/event_queue.h" line="58"/>
            <location file="core/event_queue.cpp" line="32"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;EventQueue::flush_events&apos; can be static." verbose="The member function &apos;EventQueue::flush_events&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/event_queue.h" line="59"/>
            <location file="core/event_queue.cpp" line="101"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EventQueue&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EventQueue&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/event_queue.h" line="61"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/func_ref.h" line="8"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;FuncRef::_type_name&apos; is not assigned a value in &apos;FuncRef::operator=&apos;." verbose="Member variable &apos;FuncRef::_type_name&apos; is not assigned a value in &apos;FuncRef::operator=&apos;.">
            <location file="core/func_ref.h" line="8"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;FuncRef::function&apos; is not assigned a value in &apos;FuncRef::operator=&apos;." verbose="Member variable &apos;FuncRef::function&apos; is not assigned a value in &apos;FuncRef::operator=&apos;.">
            <location file="core/func_ref.h" line="8"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;FuncRef::*&apos; can be static." verbose="The member function &apos;FuncRef::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/func_ref.h" line="8"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;FuncRef::set_instance&apos; can be static." verbose="The member function &apos;FuncRef::set_instance&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/func_ref.h" line="18"/>
            <location file="core/func_ref.cpp" line="20"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;FuncRef::id&apos; is not assigned a value in &apos;FuncRef::operator=&apos;." verbose="Member variable &apos;FuncRef::id&apos; is not assigned a value in &apos;FuncRef::operator=&apos;.">
            <location file="core/func_ref.h" line="8"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Globals::register_global_defaults&apos; can be static." verbose="The member function &apos;Globals::register_global_defaults&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/globals.h" line="130"/>
            <location file="core/global_defaults.cpp" line="4"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/bind/core_bind.h" line="13"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/bind/core_bind.h" line="34"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/bind/core_bind.h" line="64"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/bind/core_bind.h" line="278"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/bind/core_bind.h" line="316"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/bind/core_bind.h" line="402"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/bind/core_bind.h" line="443"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/bind/core_bind.h" line="467"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/bind/core_bind.h" line="483"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/bind/core_bind.h" line="498"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aux&apos; can be reduced." verbose="The scope of the variable &apos;aux&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/vector.h" line="127"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;String,Color,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;String,Color,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;String,Color,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;String,Color,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;String,Color,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Image::_put_pixelw&apos; can be const." verbose="The member function &apos;Image::_put_pixelw&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/image.h" line="191"/>
            <location file="core/image.cpp" line="45"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Image::resized&apos; can be const." verbose="The member function &apos;Image::resized&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/image.h" line="248"/>
            <location file="core/image.cpp" line="503"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Image::compressed&apos; can be const." verbose="The member function &apos;Image::compressed&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/image.h" line="336"/>
            <location file="core/image.cpp" line="1882"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;String,Color,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;String,Color,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;String,Color,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;String,Color,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_ResourceLoader::_type_name&apos; is not assigned a value in &apos;_ResourceLoader::operator=&apos;." verbose="Member variable &apos;_ResourceLoader::_type_name&apos; is not assigned a value in &apos;_ResourceLoader::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="13"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_ResourceSaver::_type_name&apos; is not assigned a value in &apos;_ResourceSaver::operator=&apos;." verbose="Member variable &apos;_ResourceSaver::_type_name&apos; is not assigned a value in &apos;_ResourceSaver::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="34"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_OS::_type_name&apos; is not assigned a value in &apos;_OS::operator=&apos;." verbose="Member variable &apos;_OS::_type_name&apos; is not assigned a value in &apos;_OS::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="64"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Geometry::_type_name&apos; is not assigned a value in &apos;_Geometry::operator=&apos;." verbose="Member variable &apos;_Geometry::_type_name&apos; is not assigned a value in &apos;_Geometry::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="278"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_File::_type_name&apos; is not assigned a value in &apos;_File::operator=&apos;." verbose="Member variable &apos;_File::_type_name&apos; is not assigned a value in &apos;_File::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="316"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_File::f&apos; is not assigned a value in &apos;_File::operator=&apos;." verbose="Member variable &apos;_File::f&apos; is not assigned a value in &apos;_File::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="316"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_File::eswap&apos; is not assigned a value in &apos;_File::operator=&apos;." verbose="Member variable &apos;_File::eswap&apos; is not assigned a value in &apos;_File::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="316"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Directory::_type_name&apos; is not assigned a value in &apos;_Directory::operator=&apos;." verbose="Member variable &apos;_Directory::_type_name&apos; is not assigned a value in &apos;_Directory::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="402"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Directory::d&apos; is not assigned a value in &apos;_Directory::operator=&apos;." verbose="Member variable &apos;_Directory::d&apos; is not assigned a value in &apos;_Directory::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="402"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Marshalls::_type_name&apos; is not assigned a value in &apos;_Marshalls::operator=&apos;." verbose="Member variable &apos;_Marshalls::_type_name&apos; is not assigned a value in &apos;_Marshalls::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="443"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Mutex::_type_name&apos; is not assigned a value in &apos;_Mutex::operator=&apos;." verbose="Member variable &apos;_Mutex::_type_name&apos; is not assigned a value in &apos;_Mutex::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="467"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Mutex::mutex&apos; is not assigned a value in &apos;_Mutex::operator=&apos;." verbose="Member variable &apos;_Mutex::mutex&apos; is not assigned a value in &apos;_Mutex::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="467"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Semaphore::_type_name&apos; is not assigned a value in &apos;_Semaphore::operator=&apos;." verbose="Member variable &apos;_Semaphore::_type_name&apos; is not assigned a value in &apos;_Semaphore::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="483"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Semaphore::semaphore&apos; is not assigned a value in &apos;_Semaphore::operator=&apos;." verbose="Member variable &apos;_Semaphore::semaphore&apos; is not assigned a value in &apos;_Semaphore::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="483"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Thread::_type_name&apos; is not assigned a value in &apos;_Thread::operator=&apos;." verbose="Member variable &apos;_Thread::_type_name&apos; is not assigned a value in &apos;_Thread::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="498"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Thread::ret&apos; is not assigned a value in &apos;_Thread::operator=&apos;." verbose="Member variable &apos;_Thread::ret&apos; is not assigned a value in &apos;_Thread::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="498"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Thread::userdata&apos; is not assigned a value in &apos;_Thread::operator=&apos;." verbose="Member variable &apos;_Thread::userdata&apos; is not assigned a value in &apos;_Thread::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="498"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Thread::active&apos; is not assigned a value in &apos;_Thread::operator=&apos;." verbose="Member variable &apos;_Thread::active&apos; is not assigned a value in &apos;_Thread::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="498"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Thread::target_instance&apos; is not assigned a value in &apos;_Thread::operator=&apos;." verbose="Member variable &apos;_Thread::target_instance&apos; is not assigned a value in &apos;_Thread::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="498"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Thread::target_method&apos; is not assigned a value in &apos;_Thread::operator=&apos;." verbose="Member variable &apos;_Thread::target_method&apos; is not assigned a value in &apos;_Thread::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="498"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;_Thread::thread&apos; is not assigned a value in &apos;_Thread::operator=&apos;." verbose="Member variable &apos;_Thread::thread&apos; is not assigned a value in &apos;_Thread::operator=&apos;.">
            <location file="core/bind/core_bind.h" line="498"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Element::_key&apos; is not initialized in the constructor." verbose="Member variable &apos;Element::_key&apos; is not initialized in the constructor.">
            <location file="core/map.h" line="99"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,PackedDir*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,PackedDir*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,PackedDir*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,PackedDir*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,PackedDir*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;PathMD5,PackedFile,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;PathMD5,PackedFile,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;PathMD5,PackedFile,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;PathMD5,PackedFile,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;PathMD5,PackedFile,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;int,FileAccessNetwork*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;int,FileAccessNetwork*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;int,FileAccessNetwork*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;int,FileAccessNetwork*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;int,FileAccessNetwork*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;_VCSort,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;_VCSort,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;_VCSort,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;_VCSort,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;_VCSort,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;PackSource*&gt;::operator=&apos; should return &apos;Vector&lt;PackSource*&gt; &amp;&apos;." verbose="The Vector&lt;PackSource*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;PackSource*&gt; &amp;Vector&lt;PackSource*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Page&gt;::operator=&apos; should return &apos;Vector&lt;Page&gt; &amp;&apos;." verbose="The Vector&lt;Page&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Page&gt; &amp;Vector&lt;Page&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;VideoMode,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;VideoMode,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;VideoMode,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;VideoMode,DefaultAllocator&gt; &amp;List&lt;VideoMode,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;BlockRequest,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;BlockRequest,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;BlockRequest,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;BlockRequest,DefaultAllocator&gt; &amp;List&lt;BlockRequest,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Globals::get_optimizer_presets&apos; can be static." verbose="The member function &apos;Globals::get_optimizer_presets&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/globals.h" line="125"/>
            <location file="core/globals.cpp" line="1320"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_ResourceLoader::*&apos; can be static." verbose="The member function &apos;_ResourceLoader::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="13"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_ResourceSaver::*&apos; can be static." verbose="The member function &apos;_ResourceSaver::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="34"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_OS::*&apos; can be static." verbose="The member function &apos;_OS::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="64"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Geometry::*&apos; can be static." verbose="The member function &apos;_Geometry::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="278"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PackedData::has_path&apos; can be const." verbose="The member function &apos;PackedData::has_path&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/io/file_access_pack.h" line="113"/>
            <location file="core/io/file_access_pack.h" line="195"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,PackedDir*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,PackedDir*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,PackedDir*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,PackedDir*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,PackedDir*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,PackedDir*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;PathMD5,PackedFile,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;PathMD5,PackedFile,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;PathMD5,PackedFile,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;PathMD5,PackedFile,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;PathMD5,PackedFile,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;PathMD5,PackedFile,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,FileAccessNetwork*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;int,FileAccessNetwork*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,FileAccessNetwork*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;int,FileAccessNetwork*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,FileAccessNetwork*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;int,FileAccessNetwork*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;_VCSort,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;_VCSort,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;_VCSort,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;_VCSort,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;_VCSort,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;_VCSort,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;PackSource*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;PackSource*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;PackSource*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;PackSource*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Page&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Page&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Page&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Page&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;VideoMode,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;VideoMode,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;VideoMode,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;VideoMode,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;BlockRequest,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;BlockRequest,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;BlockRequest,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;BlockRequest,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;PackSource*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;PackSource*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Page,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Page,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;DirAccessRef&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;DirAccessRef&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/os/dir_access.h" line="141"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;FileAccessRef&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;FileAccessRef&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/os/file_access.h" line="174"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;PathMD5&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;PathMD5&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/io/file_access_pack.h" line="83"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;src_xofs&apos; to itself." verbose="Redundant assignment of &apos;src_xofs&apos; to itself.">
            <location file="core/image.cpp" line="472"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;src_xofs_left&apos; to itself." verbose="Redundant assignment of &apos;src_xofs_left&apos; to itself.">
            <location file="core/image.cpp" line="439"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;src_xofs_right&apos; to itself." verbose="Redundant assignment of &apos;src_xofs_right&apos; to itself.">
            <location file="core/image.cpp" line="440"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_buf&apos; should be passed by reference." verbose="Parameter &apos;p_buf&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="core/io/file_access_pack.h" line="83"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_path&apos; should be passed by reference." verbose="Parameter &apos;p_path&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="core/globals.cpp" line="735"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_path&apos; should be passed by reference." verbose="Parameter &apos;p_path&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="core/globals.cpp" line="779"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Image::quantize&apos; can be static." verbose="The member function &apos;Image::quantize&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/image.h" line="326"/>
            <location file="core/image_quantize.cpp" line="367"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z&apos; can be reduced." verbose="The scope of the variable &apos;z&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z&apos; can be reduced." verbose="The scope of the variable &apos;z&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="224"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b&apos; can be reduced." verbose="The scope of the variable &apos;b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="224"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="224"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="224"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e&apos; can be reduced." verbose="The scope of the variable &apos;e&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="224"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b&apos; can be reduced." verbose="The scope of the variable &apos;b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e&apos; can be reduced." verbose="The scope of the variable &apos;e&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z&apos; can be reduced." verbose="The scope of the variable &apos;z&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/aes256.cpp" line="238"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cbyte&apos; can be reduced." verbose="The scope of the variable &apos;cbyte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/base64.c" line="65"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;obyte&apos; can be reduced." verbose="The scope of the variable &apos;obyte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/base64.c" line="66"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FileAccessBuffered::file&apos; is not initialized in the constructor." verbose="Member variable &apos;FileAccessBuffered::file&apos; is not initialized in the constructor.">
            <location file="core/io/file_access_buffered.cpp" line="177"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FileAccessBuffered::cache&apos; is not initialized in the constructor." verbose="Member variable &apos;FileAccessBuffered::cache&apos; is not initialized in the constructor.">
            <location file="core/io/file_access_buffered.cpp" line="177"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;block_size&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;block_size&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="core/io/file_access_compressed.cpp" line="404"/>
            <location file="core/io/file_access_compressed.cpp" line="398"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FileAccessCompressed::write_pos&apos; is not initialized in the constructor." verbose="Member variable &apos;FileAccessCompressed::write_pos&apos; is not initialized in the constructor.">
            <location file="core/io/file_access_compressed.cpp" line="394"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/input_map.h" line="37"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FileAccessEncrypted::base&apos; is not initialized in the constructor." verbose="Member variable &apos;FileAccessEncrypted::base&apos; is not initialized in the constructor.">
            <location file="core/io/file_access_encrypted.cpp" line="281"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FileAccessEncrypted::length&apos; is not initialized in the constructor." verbose="Member variable &apos;FileAccessEncrypted::length&apos; is not initialized in the constructor.">
            <location file="core/io/file_access_encrypted.cpp" line="281"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputMap::_type_name&apos; is not assigned a value in &apos;InputMap::operator=&apos;." verbose="Member variable &apos;InputMap::_type_name&apos; is not assigned a value in &apos;InputMap::operator=&apos;.">
            <location file="core/input_map.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputMap::input_map&apos; is not assigned a value in &apos;InputMap::operator=&apos;." verbose="Member variable &apos;InputMap::input_map&apos; is not assigned a value in &apos;InputMap::operator=&apos;.">
            <location file="core/input_map.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputMap::input_id_map&apos; is not assigned a value in &apos;InputMap::operator=&apos;." verbose="Member variable &apos;InputMap::input_id_map&apos; is not assigned a value in &apos;InputMap::operator=&apos;.">
            <location file="core/input_map.h" line="37"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,Action,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,Action,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,Action,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,Action,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,Action,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;int,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;int,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;int,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;int,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;int,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;InputEvent,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;InputEvent,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;InputEvent,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;InputEvent,DefaultAllocator&gt; &amp;List&lt;InputEvent,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;InputMap::*&apos; can be static." verbose="The member function &apos;InputMap::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/input_map.h" line="37"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Action,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Action,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Action,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Action,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Action,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Action,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;int,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;int,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;int,StringName,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;InputEvent,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;InputEvent,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;InputEvent,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;InputEvent,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FileAccessMemory::length&apos; is not initialized in the constructor." verbose="Member variable &apos;FileAccessMemory::length&apos; is not initialized in the constructor.">
            <location file="core/io/file_access_memory.cpp" line="193"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FileAccessMemory::pos&apos; is not initialized in the constructor." verbose="Member variable &apos;FileAccessMemory::pos&apos; is not initialized in the constructor.">
            <location file="core/io/file_access_memory.cpp" line="193"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/file_access_network.cpp" line="192"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;pf&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;pf&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/io/file_access_pack.cpp" line="321"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/file_access_zip.cpp" line="46"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/file_access_zip.cpp" line="55"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/file_access_zip.cpp" line="68"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/file_access_zip.cpp" line="74"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/file_access_zip.cpp" line="96"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/file_access_zip.cpp" line="103"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/file_access_zip.cpp" line="122"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/file_access_zip.cpp" line="256"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FileAccessZip::at_eof&apos; is not initialized in the constructor." verbose="Member variable &apos;FileAccessZip::at_eof&apos; is not initialized in the constructor.">
            <location file="core/io/file_access_zip.cpp" line="372"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FileAccessZip::archive&apos; is not initialized in the constructor." verbose="Member variable &apos;FileAccessZip::archive&apos; is not initialized in the constructor.">
            <location file="core/io/file_access_zip.cpp" line="372"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;ZipArchive::close_handle&apos; can be static." verbose="The member function &apos;ZipArchive::close_handle&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/io/file_access_zip.h" line="70"/>
            <location file="core/io/file_access_zip.cpp" line="119"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;HTTPClient::ssl_verify_host&apos; is not initialized in the constructor." verbose="Member variable &apos;HTTPClient::ssl_verify_host&apos; is not initialized in the constructor.">
            <location file="core/io/http_client.cpp" line="692"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;zerror_file&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;zerror_file&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="core/io/ioapi.c" line="67"/>
            <location file="core/io/ioapi.c" line="61"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/ip.cpp" line="94"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;sem&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;sem&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="core/io/ip.cpp" line="250"/>
            <location file="core/io/ip.cpp" line="244"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;sem&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;sem&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="core/io/ip.cpp" line="262"/>
            <location file="core/io/ip.cpp" line="244"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;buf&apos; is assigned a value that is never used." verbose="Variable &apos;buf&apos; is assigned a value that is never used.">
            <location file="core/io/marshalls.cpp" line="782"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used.">
            <location file="core/io/marshalls.cpp" line="781"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: absolute" verbose="Unused variable: absolute">
            <location file="core/io/marshalls.cpp" line="302"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used.">
            <location file="core/io/marshalls.cpp" line="305"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used.">
            <location file="core/io/marshalls.cpp" line="394"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;endian_swap&apos; is assigned a value that is never used." verbose="Variable &apos;endian_swap&apos; is assigned a value that is never used.">
            <location file="core/io/resource_format_binary.cpp" line="915"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;use_real64&apos; is assigned a value that is never used." verbose="Variable &apos;use_real64&apos; is assigned a value that is never used.">
            <location file="core/io/resource_format_binary.cpp" line="918"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;endian_swap&apos; is assigned a value that is never used." verbose="Variable &apos;endian_swap&apos; is assigned a value that is never used.">
            <location file="core/io/resource_format_binary.cpp" line="1030"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;use_real64&apos; is assigned a value that is never used." verbose="Variable &apos;use_real64&apos; is assigned a value that is never used.">
            <location file="core/io/resource_format_binary.cpp" line="1033"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ver_minor&apos; is assigned a value that is never used." verbose="Variable &apos;ver_minor&apos; is assigned a value that is never used.">
            <location file="core/io/resource_format_binary.cpp" line="1038"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ResourceInteractiveLoaderBinary::importmd_ofs&apos; is not initialized in the constructor." verbose="Member variable &apos;ResourceInteractiveLoaderBinary::importmd_ofs&apos; is not initialized in the constructor.">
            <location file="core/io/resource_format_binary.cpp" line="1052"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;ResourceFormatSaverBinaryInstance&apos; does not have a constructor." verbose="The class &apos;ResourceFormatSaverBinaryInstance&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="core/io/resource_format_binary.h" line="122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/resource_format_xml.cpp" line="226"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;minor&apos; is assigned a value that is never used." verbose="Variable &apos;minor&apos; is assigned a value that is never used.">
            <location file="core/io/resource_format_xml.cpp" line="1862"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;ResourceInteractiveLoaderXML&apos; does not have a constructor." verbose="The class &apos;ResourceInteractiveLoaderXML&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="core/io/resource_format_xml.h" line="38"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;ResourceFormatSaverXMLInstance&apos; does not have a constructor." verbose="The class &apos;ResourceFormatSaverXMLInstance&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="core/io/resource_format_xml.h" line="124"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;ResourceFormatSaverXMLInstance::escape&apos; can be static." verbose="The member function &apos;ResourceFormatSaverXMLInstance::escape&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/io/resource_format_xml.h" line="147"/>
            <location file="core/io/resource_format_xml.cpp" line="2056"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found&apos; can be reduced." verbose="The scope of the variable &apos;found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/resource_loader.cpp" line="234"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;found&apos; is assigned a value that is never used." verbose="Variable &apos;found&apos; is assigned a value that is never used.">
            <location file="core/io/resource_loader.cpp" line="241"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;found&apos; is assigned a value that is never used." verbose="Variable &apos;found&apos; is assigned a value that is never used.">
            <location file="core/io/resource_loader.cpp" line="443"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lSeek&apos; is assigned a value that is never used." verbose="Variable &apos;lSeek&apos; is assigned a value that is never used.">
            <location file="core/io/unzip.c" line="1118"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used.">
            <location file="core/io/zip.c" line="1038"/>
            <location file="core/io/zip.c" line="1037"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used.">
            <location file="core/io/zip.c" line="1040"/>
            <location file="core/io/zip.c" line="1038"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;err&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;err&apos; is reassigned a value before the old one has been used.">
            <location file="core/io/zip.c" line="1041"/>
            <location file="core/io/zip.c" line="1040"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/io/crypt.h" line="99"/>
        </error>
        <error id="unnecessaryQualification" severity="portability" msg="The extra qualification &apos;Math::&apos; is unnecessary and is considered an error by many compilers." verbose="The extra qualification &apos;Math::&apos; is unnecessary and is considered an error by many compilers.">
            <location file="core/math/math_funcs.h" line="84"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max_size&apos; is assigned a value that is never used." verbose="Variable &apos;max_size&apos; is assigned a value that is never used.">
            <location file="core/math/aabb.cpp" line="261"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max_size&apos; is assigned a value that is never used." verbose="Variable &apos;max_size&apos; is assigned a value that is never used.">
            <location file="core/math/aabb.cpp" line="278"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max_size&apos; is assigned a value that is never used." verbose="Variable &apos;max_size&apos; is assigned a value that is never used.">
            <location file="core/math/aabb.cpp" line="297"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max_size&apos; is assigned a value that is never used." verbose="Variable &apos;max_size&apos; is assigned a value that is never used.">
            <location file="core/math/aabb.cpp" line="314"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;normal&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;normal&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/plane.h" line="110"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;normal&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;normal&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/plane.h" line="116"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;pos&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;pos&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/aabb.h" line="106"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;size&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;size&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/aabb.h" line="106"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;plane_count&apos; is assigned a value that is never used." verbose="Variable &apos;plane_count&apos; is assigned a value that is never used.">
            <location file="core/math/bsp_tree.cpp" line="172"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;plane&apos; is assigned a value that is never used." verbose="Variable &apos;plane&apos; is assigned a value that is never used.">
            <location file="core/math/bsp_tree.cpp" line="199"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;plane_count&apos; is assigned a value that is never used." verbose="Variable &apos;plane_count&apos; is assigned a value that is never used.">
            <location file="core/math/bsp_tree.cpp" line="257"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;plane&apos; is assigned a value that is never used." verbose="Variable &apos;plane&apos; is assigned a value that is never used.">
            <location file="core/math/bsp_tree.cpp" line="272"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BSP_Tree::error_radius&apos; is not initialized in the constructor." verbose="Member variable &apos;BSP_Tree::error_radius&apos; is not initialized in the constructor." inconclusive="true">
            <location file="core/math/bsp_tree.cpp" line="504"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;transform&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;transform&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/transform.h" line="262"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;aabb&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;aabb&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/bsp_tree.cpp" line="620"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Matrix3&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Matrix3&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/math/matrix3.h" line="168"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Matrix3&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Matrix3&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/math/matrix3.h" line="169"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;OptimizedTransform&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;OptimizedTransform&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/math/transform.h" line="261"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BSP_Tree&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BSP_Tree&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/math/bsp_tree.h" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pvt_val&apos; can be reduced." verbose="The scope of the variable &apos;pvt_val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/math/camera_matrix.cpp" line="362"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CameraMatrix::matrix&apos; is not initialized in the constructor." verbose="Member variable &apos;CameraMatrix::matrix&apos; is not initialized in the constructor.">
            <location file="core/math/camera_matrix.cpp" line="587"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CameraMatrix::xform4&apos; can be const." verbose="The member function &apos;CameraMatrix::xform4&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/math/camera_matrix.h" line="81"/>
            <location file="core/math/camera_matrix.cpp" line="57"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;CameraMatrix&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;CameraMatrix&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/math/camera_matrix.h" line="91"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;pos&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;pos&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/math_2d.h" line="362"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;pos&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;pos&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/math_2d.h" line="363"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;size&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;size&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/math_2d.h" line="363"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;pos&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;pos&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/math_2d.h" line="546"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;size&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;size&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/math_2d.h" line="546"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;pos&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;pos&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/math_2d.h" line="548"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;pos&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;pos&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/math_2d.h" line="549"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;size&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;size&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/math_2d.h" line="549"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Rect2i::no_area&apos; can be const." verbose="The member function &apos;Rect2i::no_area&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/math/math_2d.h" line="508"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Point2i&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Point2i&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/math/math_2d.h" line="415"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;Rect2i&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;Rect2i&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/math/math_2d.h" line="546"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="core/math/math_2d.cpp" line="191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;epsilon2&apos; can be reduced." verbose="The scope of the variable &apos;epsilon2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/math/matrix3.cpp" line="363"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Matrix3::invert&apos; can be const." verbose="The member function &apos;Matrix3::invert&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/math/matrix3.h" line="52"/>
            <location file="core/math/matrix3.cpp" line="56"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Matrix3::orthonormalize&apos; can be static." verbose="The member function &apos;Matrix3::orthonormalize&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/math/matrix3.h" line="163"/>
            <location file="core/math/matrix3.cpp" line="75"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;omega&apos; can be reduced." verbose="The scope of the variable &apos;omega&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/math/quat.cpp" line="130"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sinom&apos; can be reduced." verbose="The scope of the variable &apos;sinom&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/math/quat.cpp" line="130"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Quat::length&apos; can be static." verbose="The member function &apos;Quat::length&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/math/quat.h" line="46"/>
            <location file="core/math/quat.cpp" line="66"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;basis&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;basis&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/transform.cpp" line="214"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;origin&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;origin&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/math/transform.cpp" line="215"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max&apos; is assigned a value that is never used." verbose="Variable &apos;max&apos; is assigned a value that is never used.">
            <location file="core/math/triangle_mesh.cpp" line="169"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;vertexptr&apos; is assigned a value that is never used." verbose="Variable &apos;vertexptr&apos; is assigned a value that is never used.">
            <location file="core/math/triangle_mesh.cpp" line="208"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i2&apos; can be reduced." verbose="The scope of the variable &apos;i2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/math/triangulator.cpp" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/math/triangulator.cpp" line="339"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;earfound&apos; can be reduced." verbose="The scope of the variable &apos;earfound&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/math/triangulator.cpp" line="375"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vindex&apos; can be reduced." verbose="The scope of the variable &apos;vindex&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/math/triangulator.cpp" line="1058"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vindex2&apos; can be reduced." verbose="The scope of the variable &apos;vindex2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/math/triangulator.cpp" line="1058"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;polyendindex&apos; can be reduced." verbose="The scope of the variable &apos;polyendindex&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/math/triangulator.cpp" line="1059"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vprev&apos; can be reduced." verbose="The scope of the variable &apos;vprev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/math/triangulator.cpp" line="1061"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector3::get_axis&apos; can be static." verbose="The member function &apos;Vector3::get_axis&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/math/vector3.h" line="80"/>
            <location file="core/math/vector3.cpp" line="50"/>
        </error>
        <error id="operatorEqToSelf" severity="warning" msg="&apos;operator=&apos; should check for assignment to self to avoid problems with dynamic memory." verbose="&apos;operator=&apos; should check for assignment to self to ensure that each block of dynamically allocated memory is owned and managed by only one instance of the class.">
            <location file="core/math/triangulator.cpp" line="72"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;TriangulatorPoly::GetNumPoints&apos; can be const." verbose="The member function &apos;TriangulatorPoly::GetNumPoints&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/math/triangulator.h" line="52"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;TriangulatorPoly::IsHole&apos; can be const." verbose="The member function &apos;TriangulatorPoly::IsHole&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/math/triangulator.h" line="56"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;TriangulatorPoly::GetOrientation&apos; can be const." verbose="The member function &apos;TriangulatorPoly::GetOrientation&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/math/triangulator.h" line="93"/>
            <location file="core/math/triangulator.cpp" line="81"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;TriangulatorPartition::IsConvex&apos; can be static." verbose="The member function &apos;TriangulatorPartition::IsConvex&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/math/triangulator.h" line="158"/>
            <location file="core/math/triangulator.cpp" line="284"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;TriangulatorPartition::IsReflex&apos; can be static." verbose="The member function &apos;TriangulatorPartition::IsReflex&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/math/triangulator.h" line="159"/>
            <location file="core/math/triangulator.cpp" line="291"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;TriangulatorPartition::Intersects&apos; can be static." verbose="The member function &apos;TriangulatorPartition::Intersects&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/math/triangulator.h" line="165"/>
            <location file="core/math/triangulator.cpp" line="134"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;TriangulatorPartition::Normalize&apos; can be static." verbose="The member function &apos;TriangulatorPartition::Normalize&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/math/triangulator.h" line="167"/>
            <location file="core/math/triangulator.cpp" line="114"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;TriangulatorPartition::Distance&apos; can be static." verbose="The member function &apos;TriangulatorPartition::Distance&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/math/triangulator.h" line="168"/>
            <location file="core/math/triangulator.cpp" line="126"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;TriangulatorPartition::UpdateState&apos; can be static." verbose="The member function &apos;TriangulatorPartition::UpdateState&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/math/triangulator.h" line="175"/>
            <location file="core/math/triangulator.cpp" line="698"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;TriangulatorPartition::Below&apos; can be static." verbose="The member function &apos;TriangulatorPartition::Below&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/math/triangulator.h" line="180"/>
            <location file="core/math/triangulator.cpp" line="1352"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;TriangulatorPartition::AddDiagonal&apos; can be static." verbose="The member function &apos;TriangulatorPartition::AddDiagonal&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/math/triangulator.h" line="181"/>
            <location file="core/math/triangulator.cpp" line="1313"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/message_queue.cpp" line="353"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/message_queue.cpp" line="378"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/message_queue.cpp" line="424"/>
        </error>
        <error id="suspiciousSemicolon" severity="warning" msg="Suspicious use of ; at the end of &apos;if&apos; statement." verbose="Suspicious use of ; at the end of &apos;if&apos; statement." inconclusive="true">
            <location file="core/message_queue.cpp" line="328"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MessageQueue::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;MessageQueue::mutex&apos; is not initialized in the constructor.">
            <location file="core/message_queue.cpp" line="404"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;int,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;int,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;int,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;int,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;int,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;MessageQueue::print&apos; can be static." verbose="The member function &apos;MessageQueue::print&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/message_queue.h" line="82"/>
            <location file="core/message_queue.cpp" line="279"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;MessageQueue::statistics&apos; can be static." verbose="The member function &apos;MessageQueue::statistics&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/message_queue.h" line="83"/>
            <location file="core/message_queue.cpp" line="199"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;MessageQueue::flush&apos; can be const." verbose="The member function &apos;MessageQueue::flush&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/message_queue.h" line="84"/>
            <location file="core/message_queue.cpp" line="325"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;MessageQueue::get_max_buffer_usage&apos; can be static." verbose="The member function &apos;MessageQueue::get_max_buffer_usage&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/message_queue.h" line="86"/>
            <location file="core/message_queue.cpp" line="320"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;int,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;int,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;int,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;set_defvals&apos; is not used." verbose="Label &apos;set_defvals&apos; is not used.">
            <location file="core/object_type_db.cpp" line="823"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mb_get&apos; is assigned a value that is never used." verbose="Variable &apos;mb_get&apos; is assigned a value that is never used.">
            <location file="core/object_type_db.cpp" line="579"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/script_language.h" line="68"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;prev&apos; is assigned a value that is never used." verbose="Variable &apos;prev&apos; is assigned a value that is never used.">
            <location file="core/object.cpp" line="1435"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,ObjectTypeDB::TypeInfo,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,ObjectTypeDB::TypeInfo,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,ObjectTypeDB::TypeInfo,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,ObjectTypeDB::TypeInfo,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,ObjectTypeDB::TypeInfo,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,ObjectTypeDB::TypeInfo,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,ObjectTypeDB::TypeInfo,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,ObjectTypeDB::TypeInfo,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,ObjectTypeDB::TypeInfo,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Script::_type_name&apos; is not assigned a value in &apos;Script::operator=&apos;." verbose="Member variable &apos;Script::_type_name&apos; is not assigned a value in &apos;Script::operator=&apos;.">
            <location file="core/script_language.h" line="68"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;Script&gt;::operator=&apos; should return &apos;Ref&lt;Script&gt; &amp;&apos;." verbose="The Ref&lt;Script&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;Script&gt; &amp;Ref&lt;Script&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;int,Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;int,Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;int,Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;int,Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;int,Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;Object*,unsignedint__int32,ObjectDB::ObjectPtrHash,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;Object*,unsignedint__int32,ObjectDB::ObjectPtrHash,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;Object*,unsignedint__int32,ObjectDB::ObjectPtrHash,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;Object*,unsignedint__int32,ObjectDB::ObjectPtrHash,3,8&gt; &amp;HashMap&lt;Object*,unsignedint__int32,ObjectDB::ObjectPtrHash,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;StackInfo&gt;::operator=&apos; should return &apos;Vector&lt;StackInfo&gt; &amp;&apos;." verbose="The Vector&lt;StackInfo&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;StackInfo&gt; &amp;Vector&lt;StackInfo&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;constVariant*&gt;::operator=&apos; should return &apos;Vector&lt;constVariant*&gt; &amp;&apos;." verbose="The Vector&lt;constVariant*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;constVariant*&gt; &amp;Vector&lt;constVariant*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Pair&lt;String,Variant&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Pair&lt;String,Variant&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Pair&lt;String,Variant&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Pair&lt;String,Variant&gt;,DefaultAllocator&gt; &amp;List&lt;Pair&lt;String,Variant&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;_ObjectSignalDisconnectData,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;_ObjectSignalDisconnectData,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;_ObjectSignalDisconnectData,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;_ObjectSignalDisconnectData,DefaultAllocator&gt; &amp;List&lt;_ObjectSignalDisconnectData,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="89"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="95"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="102"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="111"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="121"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="131"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="150"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="157"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="165"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="175"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="186"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/object.cpp" line="197"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;key&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;key&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/vmap.h" line="47"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;value&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;value&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/vmap.h" line="48"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::_get_signal_list&apos; can be static." verbose="The member function &apos;Object::_get_signal_list&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="400"/>
            <location file="core/object.cpp" line="1296"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Object::_get_signal_connection_list&apos; can be static." verbose="The member function &apos;Object::_get_signal_connection_list&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/object.h" line="401"/>
            <location file="core/object.cpp" line="1300"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Script::*&apos; can be static." verbose="The member function &apos;Script::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/script_language.h" line="68"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;int,Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;int,Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;int,Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectDB::ObjectPtrHash,3,8&gt;::has&apos; can be static." verbose="The member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectDB::ObjectPtrHash,3,8&gt;::has&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="310"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectDB::ObjectPtrHash,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectDB::ObjectPtrHash,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectDB::ObjectPtrHash,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;Object*,unsignedint__int32,ObjectDB::ObjectPtrHash,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;StackInfo&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;StackInfo&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;StackInfo&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;StackInfo&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;constVariant*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;constVariant*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;constVariant*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;constVariant*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Pair&lt;String,Variant&gt;,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Pair&lt;String,Variant&gt;,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Pair&lt;String,Variant&gt;,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Pair&lt;String,Variant&gt;,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;_ObjectSignalDisconnectData,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;_ObjectSignalDisconnectData,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;_ObjectSignalDisconnectData,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;_ObjectSignalDisconnectData,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;StackInfo,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;StackInfo,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;constVariant*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;constVariant*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Script&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Script&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Script&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Script&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Script&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Script&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Script&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Script&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;DirAccess::next_is_dir&apos; is not initialized in the constructor." verbose="Member variable &apos;DirAccess::next_is_dir&apos; is not initialized in the constructor.">
            <location file="core/os/dir_access.cpp" line="422"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;joy_names&apos; is assigned a value that is never used." verbose="Variable &apos;joy_names&apos; is assigned a value that is never used.">
            <location file="core/os/input.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Chunk::size&apos; is not initialized in the constructor." verbose="Member variable &apos;Chunk::size&apos; is not initialized in the constructor.">
            <location file="core/os/memory_pool_dynamic_static.h" line="53"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Chunk::descr&apos; is not initialized in the constructor." verbose="Member variable &apos;Chunk::descr&apos; is not initialized in the constructor.">
            <location file="core/os/memory_pool_dynamic_static.h" line="53"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;OS::_ensure_data_dir&apos; can be const." verbose="The member function &apos;OS::_ensure_data_dir&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/os/os.h" line="104"/>
            <location file="core/os/os.cpp" line="390"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;OS::get_frames_drawn&apos; can be const." verbose="The member function &apos;OS::get_frames_drawn&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/os/os.h" line="269"/>
            <location file="core/os/os.cpp" line="137"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;ID&apos; hides a typedef with the same name." verbose="The variable &apos;ID&apos; hides a typedef with the same name." inconclusive="true">
            <location file="core/os/thread.h" line="59"/>
            <location file="core/os/thread.h" line="63"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/packed_data_container.h" line="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/packed_data_container.h" line="90"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/packed_data_container.cpp" line="112"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;Object*,uint32_t,ObjectDB::ObjectPtrHash,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;Object*,uint32_t,ObjectDB::ObjectPtrHash,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;Object*,uint32_t,ObjectDB::ObjectPtrHash,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;Object*,uint32_t,ObjectDB::ObjectPtrHash,3,8&gt; &amp;HashMap&lt;Object*,uint32_t,ObjectDB::ObjectPtrHash,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;valid&apos; can be reduced." verbose="The scope of the variable &apos;valid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/path_db.cpp" line="301"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;valid&apos; is assigned a value that is never used." verbose="Variable &apos;valid&apos; is assigned a value that is never used.">
            <location file="core/path_db.cpp" line="345"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/pool_allocator.cpp" line="468"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;_total&apos; is assigned a value that is never used." verbose="Variable &apos;_total&apos; is assigned a value that is never used.">
            <location file="core/pool_allocator.cpp" line="375"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PackedDataContainer::_type_name&apos; is not assigned a value in &apos;PackedDataContainer::operator=&apos;." verbose="Member variable &apos;PackedDataContainer::_type_name&apos; is not assigned a value in &apos;PackedDataContainer::operator=&apos;.">
            <location file="core/packed_data_container.h" line="39"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PackedDataContainer::data&apos; is not assigned a value in &apos;PackedDataContainer::operator=&apos;." verbose="Member variable &apos;PackedDataContainer::data&apos; is not assigned a value in &apos;PackedDataContainer::operator=&apos;.">
            <location file="core/packed_data_container.h" line="39"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PackedDataContainer::datalen&apos; is not assigned a value in &apos;PackedDataContainer::operator=&apos;." verbose="Member variable &apos;PackedDataContainer::datalen&apos; is not assigned a value in &apos;PackedDataContainer::operator=&apos;.">
            <location file="core/packed_data_container.h" line="39"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PackedDataContainerRef::_type_name&apos; is not assigned a value in &apos;PackedDataContainerRef::operator=&apos;." verbose="Member variable &apos;PackedDataContainerRef::_type_name&apos; is not assigned a value in &apos;PackedDataContainerRef::operator=&apos;.">
            <location file="core/packed_data_container.h" line="90"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PackedDataContainerRef::from&apos; is not assigned a value in &apos;PackedDataContainerRef::operator=&apos;." verbose="Member variable &apos;PackedDataContainerRef::from&apos; is not assigned a value in &apos;PackedDataContainerRef::operator=&apos;.">
            <location file="core/packed_data_container.h" line="90"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;PackedDataContainer&gt;::operator=&apos; should return &apos;Ref&lt;PackedDataContainer&gt; &amp;&apos;." verbose="The Ref&lt;PackedDataContainer&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;PackedDataContainer&gt; &amp;Ref&lt;PackedDataContainer&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;PackedDataContainerRef&gt;::operator=&apos; should return &apos;Ref&lt;PackedDataContainerRef&gt; &amp;&apos;." verbose="The Ref&lt;PackedDataContainerRef&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;PackedDataContainerRef&gt; &amp;Ref&lt;PackedDataContainerRef&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,unsignedint__int32,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,unsignedint__int32,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,unsignedint__int32,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,unsignedint__int32,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,unsignedint__int32,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;DictKey,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;DictKey,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;DictKey,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;DictKey,DefaultAllocator&gt; &amp;List&lt;DictKey,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PackedDataContainer::*&apos; can be static." verbose="The member function &apos;PackedDataContainer::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/packed_data_container.h" line="39"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PackedDataContainer::_iter_init_ofs&apos; can be const." verbose="The member function &apos;PackedDataContainer::_iter_init_ofs&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/packed_data_container.h" line="60"/>
            <location file="core/packed_data_container.cpp" line="49"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PackedDataContainer::_iter_next_ofs&apos; can be const." verbose="The member function &apos;PackedDataContainer::_iter_next_ofs&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/packed_data_container.h" line="61"/>
            <location file="core/packed_data_container.cpp" line="63"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PackedDataContainer::_iter_get_ofs&apos; can be const." verbose="The member function &apos;PackedDataContainer::_iter_get_ofs&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/packed_data_container.h" line="62"/>
            <location file="core/packed_data_container.cpp" line="78"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PackedDataContainerRef::*&apos; can be static." verbose="The member function &apos;PackedDataContainerRef::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/packed_data_container.h" line="90"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,unsignedint__int32,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,unsignedint__int32,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,unsignedint__int32,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,unsignedint__int32,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PoolAllocator::get_free_mem&apos; can be const." verbose="The member function &apos;PoolAllocator::get_free_mem&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/pool_allocator.h" line="128"/>
            <location file="core/pool_allocator.cpp" line="585"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PoolAllocator::get_free_peak&apos; can be const." verbose="The member function &apos;PoolAllocator::get_free_peak&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/pool_allocator.h" line="130"/>
            <location file="core/pool_allocator.cpp" line="580"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;DictKey,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;DictKey,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;DictKey,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;DictKey,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedDataContainer&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedDataContainer&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedDataContainer&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedDataContainer&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedDataContainer&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedDataContainer&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedDataContainer&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedDataContainer&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedDataContainerRef&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedDataContainerRef&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedDataContainerRef&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedDataContainerRef&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedDataContainerRef&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedDataContainerRef&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedDataContainerRef&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedDataContainerRef&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/path_remap.h" line="39"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;ID&apos; hides a typedef with the same name." verbose="The variable &apos;ID&apos; hides a typedef with the same name." inconclusive="true">
            <location file="core/rid.h" line="45"/>
            <location file="core/os/input_event.h" line="273"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PathRemap::_type_name&apos; is not assigned a value in &apos;PathRemap::operator=&apos;." verbose="Member variable &apos;PathRemap::_type_name&apos; is not assigned a value in &apos;PathRemap::operator=&apos;.">
            <location file="core/path_remap.h" line="39"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PathRemap::remap&apos; is not assigned a value in &apos;PathRemap::operator=&apos;." verbose="Member variable &apos;PathRemap::remap&apos; is not assigned a value in &apos;PathRemap::operator=&apos;.">
            <location file="core/path_remap.h" line="39"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,String,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,String,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;String,RemapData,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;String,RemapData,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;String,RemapData,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;String,RemapData,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;String,RemapData,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PathRemap::*&apos; can be static." verbose="The member function &apos;PathRemap::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/path_remap.h" line="39"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;String,RemapData,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;String,RemapData,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;String,RemapData,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;String,RemapData,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PackedDataContainerRef::offset&apos; is not assigned a value in &apos;PackedDataContainerRef::operator=&apos;." verbose="Member variable &apos;PackedDataContainerRef::offset&apos; is not assigned a value in &apos;PackedDataContainerRef::operator=&apos;.">
            <location file="core/packed_data_container.h" line="90"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PackedDataContainerRef::offset&apos; is not initialized in the constructor." verbose="Member variable &apos;PackedDataContainerRef::offset&apos; is not initialized in the constructor.">
            <location file="core/packed_data_container.cpp" line="451"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,uint32_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,uint32_t,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,uint32_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,uint32_t,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,uint32_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,uint32_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,uint32_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,uint32_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,uint32_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,uint32_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,uint32_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;RefPtr::data&apos; is not assigned a value in &apos;RefPtr::operator=&apos;." verbose="Member variable &apos;RefPtr::data&apos; is not assigned a value in &apos;RefPtr::operator=&apos;.">
            <location file="core/ref_ptr.cpp" line="33"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RefPtr::unref&apos; can be const." verbose="The member function &apos;RefPtr::unref&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/ref_ptr.h" line="54"/>
            <location file="core/ref_ptr.cpp" line="78"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;WeakRef::set_obj&apos; can be static." verbose="The member function &apos;WeakRef::set_obj&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/reference.h" line="326"/>
            <location file="core/reference.cpp" line="104"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;WeakRef::set_ref&apos; can be static." verbose="The member function &apos;WeakRef::set_ref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/reference.h" line="327"/>
            <location file="core/reference.cpp" line="108"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/stream_peer_ssl.h" line="7"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/os/input.h" line="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/resource.cpp" line="237"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RID_OwnerBase::new_ID&apos; can be static." verbose="The member function &apos;RID_OwnerBase::new_ID&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/rid.h" line="92"/>
            <location file="core/rid.cpp" line="39"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Resource::set_import_metadata&apos; can be static." verbose="The member function &apos;Resource::set_import_metadata&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/resource.h" line="141"/>
            <location file="core/resource.cpp" line="317"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Resource::get_import_metadata&apos; can be static." verbose="The member function &apos;Resource::get_import_metadata&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/resource.h" line="142"/>
            <location file="core/resource.cpp" line="323"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StreamPeerSSL::_type_name&apos; is not assigned a value in &apos;StreamPeerSSL::operator=&apos;." verbose="Member variable &apos;StreamPeerSSL::_type_name&apos; is not assigned a value in &apos;StreamPeerSSL::operator=&apos;.">
            <location file="core/io/stream_peer_ssl.h" line="7"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Input::_type_name&apos; is not assigned a value in &apos;Input::operator=&apos;." verbose="Member variable &apos;Input::_type_name&apos; is not assigned a value in &apos;Input::operator=&apos;.">
            <location file="core/os/input.h" line="38"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputDefault::_type_name&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." verbose="Member variable &apos;InputDefault::_type_name&apos; is not assigned a value in &apos;InputDefault::operator=&apos;.">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputDefault::mouse_button_mask&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." verbose="Member variable &apos;InputDefault::mouse_button_mask&apos; is not assigned a value in &apos;InputDefault::operator=&apos;.">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputDefault::keys_pressed&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." verbose="Member variable &apos;InputDefault::keys_pressed&apos; is not assigned a value in &apos;InputDefault::operator=&apos;.">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputDefault::joy_buttons_pressed&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." verbose="Member variable &apos;InputDefault::joy_buttons_pressed&apos; is not assigned a value in &apos;InputDefault::operator=&apos;.">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputDefault::joy_axis&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." verbose="Member variable &apos;InputDefault::joy_axis&apos; is not assigned a value in &apos;InputDefault::operator=&apos;.">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputDefault::custom_action_press&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." verbose="Member variable &apos;InputDefault::custom_action_press&apos; is not assigned a value in &apos;InputDefault::operator=&apos;.">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputDefault::joy_names&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." verbose="Member variable &apos;InputDefault::joy_names&apos; is not assigned a value in &apos;InputDefault::operator=&apos;.">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputDefault::accelerometer&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." verbose="Member variable &apos;InputDefault::accelerometer&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." inconclusive="true">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputDefault::mouse_pos&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." verbose="Member variable &apos;InputDefault::mouse_pos&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." inconclusive="true">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputDefault::main_loop&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." verbose="Member variable &apos;InputDefault::main_loop&apos; is not assigned a value in &apos;InputDefault::operator=&apos;.">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;InputDefault::emulate_touch&apos; is not assigned a value in &apos;InputDefault::operator=&apos;." verbose="Member variable &apos;InputDefault::emulate_touch&apos; is not assigned a value in &apos;InputDefault::operator=&apos;.">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;XMLParser::_type_name&apos; is not assigned a value in &apos;XMLParser::operator=&apos;." verbose="Member variable &apos;XMLParser::_type_name&apos; is not assigned a value in &apos;XMLParser::operator=&apos;.">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;XMLParser::data&apos; is not assigned a value in &apos;XMLParser::operator=&apos;." verbose="Member variable &apos;XMLParser::data&apos; is not assigned a value in &apos;XMLParser::operator=&apos;.">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;XMLParser::P&apos; is not assigned a value in &apos;XMLParser::operator=&apos;." verbose="Member variable &apos;XMLParser::P&apos; is not assigned a value in &apos;XMLParser::operator=&apos;.">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;XMLParser::length&apos; is not assigned a value in &apos;XMLParser::operator=&apos;." verbose="Member variable &apos;XMLParser::length&apos; is not assigned a value in &apos;XMLParser::operator=&apos;.">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;XMLParser::special_characters&apos; is not assigned a value in &apos;XMLParser::operator=&apos;." verbose="Member variable &apos;XMLParser::special_characters&apos; is not assigned a value in &apos;XMLParser::operator=&apos;.">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;XMLParser::node_name&apos; is not assigned a value in &apos;XMLParser::operator=&apos;." verbose="Member variable &apos;XMLParser::node_name&apos; is not assigned a value in &apos;XMLParser::operator=&apos;.">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;XMLParser::node_empty&apos; is not assigned a value in &apos;XMLParser::operator=&apos;." verbose="Member variable &apos;XMLParser::node_empty&apos; is not assigned a value in &apos;XMLParser::operator=&apos;.">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;XMLParser::node_type&apos; is not assigned a value in &apos;XMLParser::operator=&apos;." verbose="Member variable &apos;XMLParser::node_type&apos; is not assigned a value in &apos;XMLParser::operator=&apos;.">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;XMLParser::attributes&apos; is not assigned a value in &apos;XMLParser::operator=&apos;." verbose="Member variable &apos;XMLParser::attributes&apos; is not assigned a value in &apos;XMLParser::operator=&apos;.">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::_type_name&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::_type_name&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::status&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::status&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::resolving&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::resolving&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." inconclusive="true">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::conn_port&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::conn_port&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::conn_host&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::conn_host&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::ssl&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::ssl&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::ssl_verify_host&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::ssl_verify_host&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::blocking&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::blocking&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::response_str&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::response_str&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::chunked&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::chunked&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::chunk&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::chunk&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::chunk_left&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::chunk_left&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::body_size&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::body_size&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::body_left&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::body_left&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::tcp_connection&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::tcp_connection&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::connection&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::connection&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::response_num&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::response_num&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::response_headers&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::response_headers&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;HTTPClient::read_chunk_size&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;." verbose="Member variable &apos;HTTPClient::read_chunk_size&apos; is not assigned a value in &apos;HTTPClient::operator=&apos;.">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;StreamPeerTCP&gt;::operator=&apos; should return &apos;Ref&lt;StreamPeerTCP&gt; &amp;&apos;." verbose="The Ref&lt;StreamPeerTCP&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;StreamPeerTCP&gt; &amp;Ref&lt;StreamPeerTCP&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;TCP_Server&gt;::operator=&apos; should return &apos;Ref&lt;TCP_Server&gt; &amp;&apos;." verbose="The Ref&lt;TCP_Server&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;TCP_Server&gt; &amp;Ref&lt;TCP_Server&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;PacketPeerUDP&gt;::operator=&apos; should return &apos;Ref&lt;PacketPeerUDP&gt; &amp;&apos;." verbose="The Ref&lt;PacketPeerUDP&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;PacketPeerUDP&gt; &amp;Ref&lt;PacketPeerUDP&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;StreamPeer&gt;::operator=&apos; should return &apos;Ref&lt;StreamPeer&gt; &amp;&apos;." verbose="The Ref&lt;StreamPeer&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;StreamPeer&gt; &amp;Ref&lt;StreamPeer&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;ResourceInteractiveLoader&gt;::operator=&apos; should return &apos;Ref&lt;ResourceInteractiveLoader&gt; &amp;&apos;." verbose="The Ref&lt;ResourceInteractiveLoader&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;ResourceInteractiveLoader&gt; &amp;Ref&lt;ResourceInteractiveLoader&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;int,ExtResource,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;int,ExtResource,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;int,ExtResource,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;int,ExtResource,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;int,ExtResource,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;Ref&lt;Resource&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;Ref&lt;Resource&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;Ref&lt;Resource&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;Ref&lt;Resource&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;Ref&lt;Resource&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;int,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;int,float,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;int,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;int,float,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;int,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;int,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;int,String,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;int,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;int,String,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;int,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Ref&lt;Resource&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Ref&lt;Resource&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Ref&lt;Resource&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Ref&lt;Resource&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Ref&lt;Resource&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;int,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;int,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;int,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;int,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;int,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;String,String,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;String,String,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;String,String,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;String,String,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;String,String,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;ExtResoucre&gt;::operator=&apos; should return &apos;Vector&lt;ExtResoucre&gt; &amp;&apos;." verbose="The Vector&lt;ExtResoucre&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;ExtResoucre&gt; &amp;Vector&lt;ExtResoucre&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;IntResoucre&gt;::operator=&apos; should return &apos;Vector&lt;IntResoucre&gt; &amp;&apos;." verbose="The Vector&lt;IntResoucre&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;IntResoucre&gt; &amp;Vector&lt;IntResoucre&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Attribute&gt;::operator=&apos; should return &apos;Vector&lt;Attribute&gt; &amp;&apos;." verbose="The Vector&lt;Attribute&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Attribute&gt; &amp;Vector&lt;Attribute&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Tag,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Tag,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Tag,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Tag,DefaultAllocator&gt; &amp;List&lt;Tag,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Property,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Property,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Property,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Property,DefaultAllocator&gt; &amp;List&lt;Property,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_File::*&apos; can be static." verbose="The member function &apos;_File::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="316"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Directory::*&apos; can be static." verbose="The member function &apos;_Directory::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="402"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Marshalls::*&apos; can be static." verbose="The member function &apos;_Marshalls::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="443"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Mutex::*&apos; can be static." verbose="The member function &apos;_Mutex::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="467"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Semaphore::*&apos; can be static." verbose="The member function &apos;_Semaphore::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="483"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;_Thread::*&apos; can be static." verbose="The member function &apos;_Thread::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/bind/core_bind.h" line="498"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;StreamPeerSSL::*&apos; can be static." verbose="The member function &apos;StreamPeerSSL::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/io/stream_peer_ssl.h" line="7"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Input::*&apos; can be static." verbose="The member function &apos;Input::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/os/input.h" line="38"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;InputDefault::*&apos; can be static." verbose="The member function &apos;InputDefault::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/os/input.h" line="91"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;XMLParser::*&apos; can be static." verbose="The member function &apos;XMLParser::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HTTPClient::*&apos; can be static." verbose="The member function &apos;HTTPClient::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/io/http_client.h" line="40"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,Map&lt;String,Variant,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,ExtResource,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;int,ExtResource,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,ExtResource,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;int,ExtResource,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,ExtResource,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;int,ExtResource,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Ref&lt;Resource&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;Ref&lt;Resource&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Ref&lt;Resource&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;Ref&lt;Resource&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Ref&lt;Resource&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;Ref&lt;Resource&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;int,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;int,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;int,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;int,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;int,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;int,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Ref&lt;Resource&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Ref&lt;Resource&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Ref&lt;Resource&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Ref&lt;Resource&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Ref&lt;Resource&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Ref&lt;Resource&gt;,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;int,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;int,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;int,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;int,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;int,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;int,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;String,String,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;String,String,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;String,String,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;String,String,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ExtResoucre&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;ExtResoucre&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ExtResoucre&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;ExtResoucre&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;IntResoucre&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;IntResoucre&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;IntResoucre&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;IntResoucre&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Attribute&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Attribute&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Attribute&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Attribute&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Tag,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Tag,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Tag,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Tag,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Property,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Property,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Property,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Property,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;ExtResoucre,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;ExtResoucre,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;IntResoucre,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;IntResoucre,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Attribute,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Attribute,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StreamPeerTCP&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StreamPeerTCP&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StreamPeerTCP&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StreamPeerTCP&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StreamPeerTCP&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StreamPeerTCP&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StreamPeerTCP&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StreamPeerTCP&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;TCP_Server&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;TCP_Server&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;TCP_Server&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;TCP_Server&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;TCP_Server&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;TCP_Server&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;TCP_Server&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;TCP_Server&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PacketPeerUDP&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PacketPeerUDP&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PacketPeerUDP&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PacketPeerUDP&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PacketPeerUDP&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PacketPeerUDP&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PacketPeerUDP&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PacketPeerUDP&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StreamPeer&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StreamPeer&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StreamPeer&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StreamPeer&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StreamPeer&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StreamPeer&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StreamPeer&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StreamPeer&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;ResourceInteractiveLoader&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;ResourceInteractiveLoader&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;ResourceInteractiveLoader&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;ResourceInteractiveLoader&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;ResourceInteractiveLoader&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;ResourceInteractiveLoader&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;ResourceInteractiveLoader&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;ResourceInteractiveLoader&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/stream_peer.h" line="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/stream_peer_tcp.h" line="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/packet_peer.h" line="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/packet_peer.h" line="74"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/ip.h" line="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/script_debugger_remote.cpp" line="355"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/script_debugger_remote.cpp" line="604"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StreamPeer::_type_name&apos; is not assigned a value in &apos;StreamPeer::operator=&apos;." verbose="Member variable &apos;StreamPeer::_type_name&apos; is not assigned a value in &apos;StreamPeer::operator=&apos;.">
            <location file="core/io/stream_peer.h" line="35"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StreamPeerTCP::_type_name&apos; is not assigned a value in &apos;StreamPeerTCP::operator=&apos;." verbose="Member variable &apos;StreamPeerTCP::_type_name&apos; is not assigned a value in &apos;StreamPeerTCP::operator=&apos;.">
            <location file="core/io/stream_peer_tcp.h" line="38"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PacketPeer::_type_name&apos; is not assigned a value in &apos;PacketPeer::operator=&apos;." verbose="Member variable &apos;PacketPeer::_type_name&apos; is not assigned a value in &apos;PacketPeer::operator=&apos;.">
            <location file="core/io/packet_peer.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PacketPeer::last_get_error&apos; is not assigned a value in &apos;PacketPeer::operator=&apos;." verbose="Member variable &apos;PacketPeer::last_get_error&apos; is not assigned a value in &apos;PacketPeer::operator=&apos;.">
            <location file="core/io/packet_peer.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PacketPeerStream::_type_name&apos; is not assigned a value in &apos;PacketPeerStream::operator=&apos;." verbose="Member variable &apos;PacketPeerStream::_type_name&apos; is not assigned a value in &apos;PacketPeerStream::operator=&apos;.">
            <location file="core/io/packet_peer.h" line="74"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PacketPeerStream::peer&apos; is not assigned a value in &apos;PacketPeerStream::operator=&apos;." verbose="Member variable &apos;PacketPeerStream::peer&apos; is not assigned a value in &apos;PacketPeerStream::operator=&apos;.">
            <location file="core/io/packet_peer.h" line="74"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PacketPeerStream::ring_buffer&apos; is not assigned a value in &apos;PacketPeerStream::operator=&apos;." verbose="Member variable &apos;PacketPeerStream::ring_buffer&apos; is not assigned a value in &apos;PacketPeerStream::operator=&apos;." inconclusive="true">
            <location file="core/io/packet_peer.h" line="74"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PacketPeerStream::temp_buffer&apos; is not assigned a value in &apos;PacketPeerStream::operator=&apos;." verbose="Member variable &apos;PacketPeerStream::temp_buffer&apos; is not assigned a value in &apos;PacketPeerStream::operator=&apos;.">
            <location file="core/io/packet_peer.h" line="74"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ScriptDebuggerRemote::request_scene_tree_ud&apos; is not initialized in the constructor." verbose="Member variable &apos;ScriptDebuggerRemote::request_scene_tree_ud&apos; is not initialized in the constructor.">
            <location file="core/script_debugger_remote.cpp" line="655"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;IP::_type_name&apos; is not assigned a value in &apos;IP::operator=&apos;." verbose="Member variable &apos;IP::_type_name&apos; is not assigned a value in &apos;IP::operator=&apos;.">
            <location file="core/io/ip.h" line="39"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;IP::resolver&apos; is not assigned a value in &apos;IP::operator=&apos;." verbose="Member variable &apos;IP::resolver&apos; is not assigned a value in &apos;IP::operator=&apos;.">
            <location file="core/io/ip.h" line="39"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;PacketPeerStream&gt;::operator=&apos; should return &apos;Ref&lt;PacketPeerStream&gt; &amp;&apos;." verbose="The Ref&lt;PacketPeerStream&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;PacketPeerStream&gt; &amp;Ref&lt;PacketPeerStream&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;ScriptLanguage::StackInfo&gt;::operator=&apos; should return &apos;Vector&lt;ScriptLanguage::StackInfo&gt; &amp;&apos;." verbose="The Vector&lt;ScriptLanguage::StackInfo&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;ScriptLanguage::StackInfo&gt; &amp;Vector&lt;ScriptLanguage::StackInfo&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Message,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Message,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Message,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Message,DefaultAllocator&gt; &amp;List&lt;Message,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;OutputError,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;OutputError,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;OutputError,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;OutputError,DefaultAllocator&gt; &amp;List&lt;OutputError,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;IP_Address,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;IP_Address,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;IP_Address,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;IP_Address,DefaultAllocator&gt; &amp;List&lt;IP_Address,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;tcp_client&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;tcp_client&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/script_debugger_remote.cpp" line="657"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;StreamPeer::*&apos; can be static." verbose="The member function &apos;StreamPeer::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/io/stream_peer.h" line="35"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;StreamPeerTCP::*&apos; can be static." verbose="The member function &apos;StreamPeerTCP::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/io/stream_peer_tcp.h" line="38"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PacketPeer::*&apos; can be static." verbose="The member function &apos;PacketPeer::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/io/packet_peer.h" line="37"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PacketPeerStream::*&apos; can be static." verbose="The member function &apos;PacketPeerStream::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/io/packet_peer.h" line="74"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;IP::*&apos; can be static." verbose="The member function &apos;IP::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/io/ip.h" line="39"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ScriptLanguage::StackInfo&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;ScriptLanguage::StackInfo&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ScriptLanguage::StackInfo&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;ScriptLanguage::StackInfo&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Message,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Message,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Message,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Message,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;OutputError,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;OutputError,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;OutputError,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;OutputError,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;IP_Address,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;IP_Address,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;IP_Address,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;IP_Address,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;ScriptLanguage::StackInfo,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;ScriptLanguage::StackInfo,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PacketPeerStream&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PacketPeerStream&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PacketPeerStream&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PacketPeerStream&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PacketPeerStream&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PacketPeerStream&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PacketPeerStream&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PacketPeerStream&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;XMLParser::node_offset&apos; is not assigned a value in &apos;XMLParser::operator=&apos;." verbose="Member variable &apos;XMLParser::node_offset&apos; is not assigned a value in &apos;XMLParser::operator=&apos;.">
            <location file="core/io/xml_parser.h" line="43"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: error" verbose="Unused variable: error">
            <location file="core/script_language.cpp" line="130"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;script&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;script&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/script_language.cpp" line="311"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Script::_notification&apos; can be const." verbose="The member function &apos;Script::_notification&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/script_language.h" line="73"/>
            <location file="core/script_language.cpp" line="37"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;ScriptDebugger::breakpoint_find_source&apos; can be static." verbose="The member function &apos;ScriptDebugger::breakpoint_find_source&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/script_language.h" line="281"/>
            <location file="core/script_language.cpp" line="206"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;StringName,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;StringName::setup&apos;" verbose="Unused private function: &apos;StringName::setup&apos;">
            <location file="core/string_db.h" line="86"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;StringName::cleanup&apos;" verbose="Unused private function: &apos;StringName::cleanup&apos;">
            <location file="core/string_db.h" line="87"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;middle&apos; can be reduced." verbose="The scope of the variable &apos;middle&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/ucaps.h" line="1350"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;middle&apos; can be reduced." verbose="The scope of the variable &apos;middle&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="core/ucaps.h" line="1374"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num_items&apos; is assigned a value that is never used." verbose="Variable &apos;num_items&apos; is assigned a value that is never used.">
            <location file="core/ustring.cpp" line="3652"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/io/resource_loader.h" line="40"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;found&apos; is assigned a value that is never used." verbose="Variable &apos;found&apos; is assigned a value that is never used.">
            <location file="core/translation.cpp" line="691"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::_type_name&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::_type_name&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::actions&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::actions&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::current_action&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::current_action&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::action_level&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::action_level&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::max_steps&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::max_steps&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::merging&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::merging&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::callback&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::callback&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::callback_ud&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::callback_ud&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::method_callbck_ud&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::method_callbck_ud&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::prop_callback_ud&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::prop_callback_ud&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::method_callback&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::method_callback&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::property_callback&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::property_callback&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Action&gt;::operator=&apos; should return &apos;Vector&lt;Action&gt; &amp;&apos;." verbose="The Vector&lt;Action&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Action&gt; &amp;Vector&lt;Action&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Operation,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Operation,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Operation,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Operation,DefaultAllocator&gt; &amp;List&lt;Operation,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;UndoRedo::*&apos; can be static." verbose="The member function &apos;UndoRedo::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Action&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Action&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Action&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Action&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Operation,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Operation,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Operation,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Operation,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Action,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Action,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ResourceInteractiveLoader::_type_name&apos; is not assigned a value in &apos;ResourceInteractiveLoader::operator=&apos;." verbose="Member variable &apos;ResourceInteractiveLoader::_type_name&apos; is not assigned a value in &apos;ResourceInteractiveLoader::operator=&apos;.">
            <location file="core/io/resource_loader.h" line="40"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;locale&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;locale&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/translation.cpp" line="497"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;locale&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;locale&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/translation.cpp" line="701"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;ResourceInteractiveLoader::*&apos; can be static." verbose="The member function &apos;ResourceInteractiveLoader::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/io/resource_loader.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;UndoRedo::version&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;." verbose="Member variable &apos;UndoRedo::version&apos; is not assigned a value in &apos;UndoRedo::operator=&apos;.">
            <location file="core/undo_redo.h" line="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="core/variant_call.cpp" line="1061"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,_VariantCall::FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,_VariantCall::FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,_VariantCall::FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,_VariantCall::FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,_VariantCall::FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;ConstructData,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;ConstructData,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;ConstructData,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;ConstructData,DefaultAllocator&gt; &amp;List&lt;ConstructData,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;_VariantCall::ConstructData,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;_VariantCall::ConstructData,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;_VariantCall::ConstructData,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;_VariantCall::ConstructData,DefaultAllocator&gt; &amp;List&lt;_VariantCall::ConstructData,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_server.h" line="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_server.h" line="93"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_server.h" line="133"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_server.h" line="210"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_server.h" line="232"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual_server.h" line="45"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/audio_server.h" line="109"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/spatial_sound_server.h" line="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/environment.h" line="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/world.h" line="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d_server.h" line="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d_server.h" line="93"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d_server.h" line="136"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d_server.h" line="214"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d_server.h" line="237"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d_server.h" line="562"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/world_2d.h" line="41"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/main/node.h" line="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/texture.h" line="44"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/texture.h" line="88"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/texture.h" line="166"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/texture.h" line="207"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/texture.h" line="258"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/font.h" line="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/style_box.h" line="40"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/style_box.h" line="68"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/style_box.h" line="79"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/style_box.h" line="118"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="core/variant_call.cpp" line="145"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/style_box.h" line="164"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/theme.h" line="43"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/main/timer.h" line="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/shader.h" line="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/shader.h" line="109"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/resources/shader.h" line="118"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/2d/canvas_item.h" line="45"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/gui/control.h" line="49"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file="core/dvector.h" line="81"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file="core/dvector.h" line="153"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,_VariantCall::FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,_VariantCall::FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,_VariantCall::FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,_VariantCall::FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,_VariantCall::FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,_VariantCall::FuncData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;ConstructData,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;ConstructData,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;ConstructData,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;ConstructData,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;_VariantCall::ConstructData,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;_VariantCall::ConstructData,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;_VariantCall::ConstructData,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;_VariantCall::ConstructData,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::mix&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::mix&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::vol&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::vol&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::pan&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::pan&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::depth&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::depth&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::height&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::height&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::chorus_send&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::chorus_send&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::reverb_send&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::reverb_send&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::speed&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::speed&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::positional&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::positional&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::had_prev_reverb&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::had_prev_reverb&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::had_prev_chorus&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::had_prev_chorus&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel::had_prev_vol&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel::had_prev_vol&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="146"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ReverbState::reverb&apos; is not initialized in the constructor." verbose="Member variable &apos;ReverbState::reverb&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="217"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ReverbState::buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;ReverbState::buffer&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_mixer_sw.h" line="217"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::volume&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::volume&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_server_sw.h" line="64"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AudioServerSW&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AudioServerSW&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="servers/audio/audio_server_sw.h" line="214"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/alsa/audio_driver_alsa.cpp" line="145"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverALSA::samples_in&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverALSA::samples_in&apos; is not initialized in the constructor.">
            <location file="drivers/alsa/audio_driver_alsa.cpp" line="259"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverALSA::samples_out&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverALSA::samples_out&apos; is not initialized in the constructor.">
            <location file="drivers/alsa/audio_driver_alsa.cpp" line="259"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverALSA::mix_rate&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverALSA::mix_rate&apos; is not initialized in the constructor.">
            <location file="drivers/alsa/audio_driver_alsa.cpp" line="259"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverALSA::channels&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverALSA::channels&apos; is not initialized in the constructor.">
            <location file="drivers/alsa/audio_driver_alsa.cpp" line="259"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverALSA::active&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverALSA::active&apos; is not initialized in the constructor.">
            <location file="drivers/alsa/audio_driver_alsa.cpp" line="259"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverALSA::thread_exited&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverALSA::thread_exited&apos; is not initialized in the constructor.">
            <location file="drivers/alsa/audio_driver_alsa.cpp" line="259"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverALSA::exit_thread&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverALSA::exit_thread&apos; is not initialized in the constructor.">
            <location file="drivers/alsa/audio_driver_alsa.cpp" line="259"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverALSA::pcm_open&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverALSA::pcm_open&apos; is not initialized in the constructor.">
            <location file="drivers/alsa/audio_driver_alsa.cpp" line="259"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;LP_dir_context_st::dummy&apos; is never used." verbose="struct or union member &apos;LP_dir_context_st::dummy&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/LPdir_nyi.c" line="32"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;filespec&apos; is assigned a value that is never used." verbose="Variable &apos;filespec&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/LPdir_vms.c" line="89"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;len_0&apos; is used before limits check." verbose="Defensive programming: The variable &apos;len_0&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="drivers/builtin_openssl2/crypto/LPdir_win.c" line="123"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/LPdir_win.c" line="78"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/LPdir_win.c" line="121"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp&apos; can be reduced." verbose="The scope of the variable &apos;temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_core.c" line="734"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp&apos; can be reduced." verbose="The scope of the variable &apos;temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_core.c" line="1309"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;AES_ASM;ROTATE&apos; since the value of &apos;ROTATE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;AES_ASM;ROTATE&apos; since the value of &apos;ROTATE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_core.c" line="1"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;len&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;len&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_ige.c" line="90"/>
            <location file="drivers/builtin_openssl2/crypto/aes/aes_ige.c" line="84"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp2&apos; can be reduced." verbose="The scope of the variable &apos;tmp2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_ige.c" line="221"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;R&apos; can be reduced." verbose="The scope of the variable &apos;R&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_wrap.c" line="66"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;R&apos; can be reduced." verbose="The scope of the variable &apos;R&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_wrap.c" line="103"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: wctx" verbose="Unused variable: wctx">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_wrap.c" line="242"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: xctx" verbose="Unused variable: xctx">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_wrap.c" line="242"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp&apos; can be reduced." verbose="The scope of the variable &apos;temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="576"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r0&apos; can be reduced." verbose="The scope of the variable &apos;r0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="693"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r1&apos; can be reduced." verbose="The scope of the variable &apos;r1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="693"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r2&apos; can be reduced." verbose="The scope of the variable &apos;r2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="693"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tp1&apos; can be reduced." verbose="The scope of the variable &apos;tp1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="905"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tp2&apos; can be reduced." verbose="The scope of the variable &apos;tp2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="905"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tp4&apos; can be reduced." verbose="The scope of the variable &apos;tp4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="905"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tp8&apos; can be reduced." verbose="The scope of the variable &apos;tp8&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="905"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tp9&apos; can be reduced." verbose="The scope of the variable &apos;tp9&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="905"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tpb&apos; can be reduced." verbose="The scope of the variable &apos;tpb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="905"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tpd&apos; can be reduced." verbose="The scope of the variable &apos;tpd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="905"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tpe&apos; can be reduced." verbose="The scope of the variable &apos;tpe&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="905"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m&apos; can be reduced." verbose="The scope of the variable &apos;m&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="905"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/aes/aes_x86core.c" line="71"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_bitstr.c" line="68"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;o&apos; is used before limits check." verbose="Defensive programming: The variable &apos;o&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_gentm.c" line="156"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_i2d_fp.c" line="88"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_i2d_fp.c" line="140"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_print.c" line="78"/>
            <location file="drivers/builtin_openssl2/crypto/asn1/a_print.c" line="80"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_print.c" line="65"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_strex.c" line="241"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;q&apos; can be reduced." verbose="The scope of the variable &apos;q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_strex.c" line="241"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hextmp&apos; can be reduced." verbose="The scope of the variable &apos;hextmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_strex.c" line="242"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fn_nid&apos; can be reduced." verbose="The scope of the variable &apos;fn_nid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_strex.c" line="396"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fn&apos; can be reduced." verbose="The scope of the variable &apos;fn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_strex.c" line="397"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_strex.c" line="398"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_strex.c" line="402"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mask&apos; can be reduced." verbose="The scope of the variable &apos;mask&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/a_strnid.c" line="128"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PhysicsDirectBodyState::_type_name&apos; is not assigned a value in &apos;PhysicsDirectBodyState::operator=&apos;." verbose="Member variable &apos;PhysicsDirectBodyState::_type_name&apos; is not assigned a value in &apos;PhysicsDirectBodyState::operator=&apos;.">
            <location file="servers/physics_server.h" line="39"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PhysicsShapeQueryParameters::_type_name&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;PhysicsShapeQueryParameters::_type_name&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;.">
            <location file="servers/physics_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PhysicsShapeQueryParameters::transform&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;PhysicsShapeQueryParameters::transform&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;." inconclusive="true">
            <location file="servers/physics_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PhysicsShapeQueryParameters::margin&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;PhysicsShapeQueryParameters::margin&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;.">
            <location file="servers/physics_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PhysicsShapeQueryParameters::exclude&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;PhysicsShapeQueryParameters::exclude&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;.">
            <location file="servers/physics_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PhysicsDirectSpaceState::_type_name&apos; is not assigned a value in &apos;PhysicsDirectSpaceState::operator=&apos;." verbose="Member variable &apos;PhysicsDirectSpaceState::_type_name&apos; is not assigned a value in &apos;PhysicsDirectSpaceState::operator=&apos;.">
            <location file="servers/physics_server.h" line="133"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PhysicsShapeQueryResult::_type_name&apos; is not assigned a value in &apos;PhysicsShapeQueryResult::operator=&apos;." verbose="Member variable &apos;PhysicsShapeQueryResult::_type_name&apos; is not assigned a value in &apos;PhysicsShapeQueryResult::operator=&apos;.">
            <location file="servers/physics_server.h" line="210"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PhysicsShapeQueryResult::result&apos; is not assigned a value in &apos;PhysicsShapeQueryResult::operator=&apos;." verbose="Member variable &apos;PhysicsShapeQueryResult::result&apos; is not assigned a value in &apos;PhysicsShapeQueryResult::operator=&apos;.">
            <location file="servers/physics_server.h" line="210"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PhysicsServer::_type_name&apos; is not assigned a value in &apos;PhysicsServer::operator=&apos;." verbose="Member variable &apos;PhysicsServer::_type_name&apos; is not assigned a value in &apos;PhysicsServer::operator=&apos;.">
            <location file="servers/physics_server.h" line="232"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;VisualServer::_type_name&apos; is not assigned a value in &apos;VisualServer::operator=&apos;." verbose="Member variable &apos;VisualServer::_type_name&apos; is not assigned a value in &apos;VisualServer::operator=&apos;.">
            <location file="servers/visual_server.h" line="45"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;VisualServer::mm_policy&apos; is not assigned a value in &apos;VisualServer::operator=&apos;." verbose="Member variable &apos;VisualServer::mm_policy&apos; is not assigned a value in &apos;VisualServer::operator=&apos;.">
            <location file="servers/visual_server.h" line="45"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;AudioServer::_type_name&apos; is not assigned a value in &apos;AudioServer::operator=&apos;." verbose="Member variable &apos;AudioServer::_type_name&apos; is not assigned a value in &apos;AudioServer::operator=&apos;.">
            <location file="servers/audio_server.h" line="109"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SpatialSoundServer::_type_name&apos; is not assigned a value in &apos;SpatialSoundServer::operator=&apos;." verbose="Member variable &apos;SpatialSoundServer::_type_name&apos; is not assigned a value in &apos;SpatialSoundServer::operator=&apos;.">
            <location file="servers/spatial_sound_server.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Environment::_type_name&apos; is not assigned a value in &apos;Environment::operator=&apos;." verbose="Member variable &apos;Environment::_type_name&apos; is not assigned a value in &apos;Environment::operator=&apos;.">
            <location file="scene/resources/environment.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Environment::bg_mode&apos; is not assigned a value in &apos;Environment::operator=&apos;." verbose="Member variable &apos;Environment::bg_mode&apos; is not assigned a value in &apos;Environment::operator=&apos;.">
            <location file="scene/resources/environment.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Environment::bg_param&apos; is not assigned a value in &apos;Environment::operator=&apos;." verbose="Member variable &apos;Environment::bg_param&apos; is not assigned a value in &apos;Environment::operator=&apos;.">
            <location file="scene/resources/environment.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Environment::fx_enabled&apos; is not assigned a value in &apos;Environment::operator=&apos;." verbose="Member variable &apos;Environment::fx_enabled&apos; is not assigned a value in &apos;Environment::operator=&apos;.">
            <location file="scene/resources/environment.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Environment::fx_param&apos; is not assigned a value in &apos;Environment::operator=&apos;." verbose="Member variable &apos;Environment::fx_param&apos; is not assigned a value in &apos;Environment::operator=&apos;.">
            <location file="scene/resources/environment.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;World::_type_name&apos; is not assigned a value in &apos;World::operator=&apos;." verbose="Member variable &apos;World::_type_name&apos; is not assigned a value in &apos;World::operator=&apos;.">
            <location file="scene/resources/world.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;World::indexer&apos; is not assigned a value in &apos;World::operator=&apos;." verbose="Member variable &apos;World::indexer&apos; is not assigned a value in &apos;World::operator=&apos;.">
            <location file="scene/resources/world.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;World::environment&apos; is not assigned a value in &apos;World::operator=&apos;." verbose="Member variable &apos;World::environment&apos; is not assigned a value in &apos;World::operator=&apos;.">
            <location file="scene/resources/world.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DDirectBodyState::_type_name&apos; is not assigned a value in &apos;Physics2DDirectBodyState::operator=&apos;." verbose="Member variable &apos;Physics2DDirectBodyState::_type_name&apos; is not assigned a value in &apos;Physics2DDirectBodyState::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DShapeQueryParameters::_type_name&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;Physics2DShapeQueryParameters::_type_name&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DShapeQueryParameters::transform&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;Physics2DShapeQueryParameters::transform&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;." inconclusive="true">
            <location file="servers/physics_2d_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DShapeQueryParameters::motion&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;Physics2DShapeQueryParameters::motion&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;." inconclusive="true">
            <location file="servers/physics_2d_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DShapeQueryParameters::margin&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;Physics2DShapeQueryParameters::margin&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DShapeQueryParameters::exclude&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;Physics2DShapeQueryParameters::exclude&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DDirectSpaceState::_type_name&apos; is not assigned a value in &apos;Physics2DDirectSpaceState::operator=&apos;." verbose="Member variable &apos;Physics2DDirectSpaceState::_type_name&apos; is not assigned a value in &apos;Physics2DDirectSpaceState::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="136"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DShapeQueryResult::_type_name&apos; is not assigned a value in &apos;Physics2DShapeQueryResult::operator=&apos;." verbose="Member variable &apos;Physics2DShapeQueryResult::_type_name&apos; is not assigned a value in &apos;Physics2DShapeQueryResult::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="214"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DShapeQueryResult::result&apos; is not assigned a value in &apos;Physics2DShapeQueryResult::operator=&apos;." verbose="Member variable &apos;Physics2DShapeQueryResult::result&apos; is not assigned a value in &apos;Physics2DShapeQueryResult::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="214"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DServer::_type_name&apos; is not assigned a value in &apos;Physics2DServer::operator=&apos;." verbose="Member variable &apos;Physics2DServer::_type_name&apos; is not assigned a value in &apos;Physics2DServer::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="237"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DTestMotionResult::_type_name&apos; is not assigned a value in &apos;Physics2DTestMotionResult::operator=&apos;." verbose="Member variable &apos;Physics2DTestMotionResult::_type_name&apos; is not assigned a value in &apos;Physics2DTestMotionResult::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="562"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DTestMotionResult::result&apos; is not assigned a value in &apos;Physics2DTestMotionResult::operator=&apos;." verbose="Member variable &apos;Physics2DTestMotionResult::result&apos; is not assigned a value in &apos;Physics2DTestMotionResult::operator=&apos;." inconclusive="true">
            <location file="servers/physics_2d_server.h" line="562"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DTestMotionResult::colliding&apos; is not assigned a value in &apos;Physics2DTestMotionResult::operator=&apos;." verbose="Member variable &apos;Physics2DTestMotionResult::colliding&apos; is not assigned a value in &apos;Physics2DTestMotionResult::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="562"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;World2D::_type_name&apos; is not assigned a value in &apos;World2D::operator=&apos;." verbose="Member variable &apos;World2D::_type_name&apos; is not assigned a value in &apos;World2D::operator=&apos;.">
            <location file="scene/resources/world_2d.h" line="41"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;World2D::indexer&apos; is not assigned a value in &apos;World2D::operator=&apos;." verbose="Member variable &apos;World2D::indexer&apos; is not assigned a value in &apos;World2D::operator=&apos;.">
            <location file="scene/resources/world_2d.h" line="41"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::_type_name&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::_type_name&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::root&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::root&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::fixed_process_time&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::fixed_process_time&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::idle_process_time&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::idle_process_time&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::accept_quit&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::accept_quit&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::editor_hint&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::editor_hint&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::pause&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::pause&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::root_lock&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::root_lock&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::group_map&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::group_map&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::_quit&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::_quit&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::initialized&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::initialized&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::input_handled&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::input_handled&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::last_screen_size&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::last_screen_size&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." inconclusive="true">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::tree_changed_name&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::tree_changed_name&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::node_removed_name&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::node_removed_name&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::node_count&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::node_count&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::call_lock&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::call_lock&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::call_skip&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::call_skip&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::stretch_mode&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::stretch_mode&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::stretch_aspect&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::stretch_aspect&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::stretch_min&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::stretch_min&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." inconclusive="true">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::delete_queue&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::delete_queue&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::unique_group_calls&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::unique_group_calls&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::ugc_locked&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::ugc_locked&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::current_scene&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::current_scene&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::xform_change_list&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::xform_change_list&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." inconclusive="true">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Node::_type_name&apos; is not assigned a value in &apos;Node::operator=&apos;." verbose="Member variable &apos;Node::_type_name&apos; is not assigned a value in &apos;Node::operator=&apos;.">
            <location file="scene/main/node.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Node::data&apos; is not assigned a value in &apos;Node::operator=&apos;." verbose="Member variable &apos;Node::data&apos; is not assigned a value in &apos;Node::operator=&apos;." inconclusive="true">
            <location file="scene/main/node.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Texture::_type_name&apos; is not assigned a value in &apos;Texture::operator=&apos;." verbose="Member variable &apos;Texture::_type_name&apos; is not assigned a value in &apos;Texture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="44"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ImageTexture::_type_name&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;." verbose="Member variable &apos;ImageTexture::_type_name&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="88"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ImageTexture::format&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;." verbose="Member variable &apos;ImageTexture::format&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="88"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ImageTexture::w&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;." verbose="Member variable &apos;ImageTexture::w&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="88"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ImageTexture::h&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;." verbose="Member variable &apos;ImageTexture::h&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="88"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ImageTexture::storage&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;." verbose="Member variable &apos;ImageTexture::storage&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="88"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ImageTexture::size_override&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;." verbose="Member variable &apos;ImageTexture::size_override&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;." inconclusive="true">
            <location file="scene/resources/texture.h" line="88"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ImageTexture::lossy_storage_quality&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;." verbose="Member variable &apos;ImageTexture::lossy_storage_quality&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="88"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;AtlasTexture::_type_name&apos; is not assigned a value in &apos;AtlasTexture::operator=&apos;." verbose="Member variable &apos;AtlasTexture::_type_name&apos; is not assigned a value in &apos;AtlasTexture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="166"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;AtlasTexture::atlas&apos; is not assigned a value in &apos;AtlasTexture::operator=&apos;." verbose="Member variable &apos;AtlasTexture::atlas&apos; is not assigned a value in &apos;AtlasTexture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="166"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;AtlasTexture::region&apos; is not assigned a value in &apos;AtlasTexture::operator=&apos;." verbose="Member variable &apos;AtlasTexture::region&apos; is not assigned a value in &apos;AtlasTexture::operator=&apos;." inconclusive="true">
            <location file="scene/resources/texture.h" line="166"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;AtlasTexture::margin&apos; is not assigned a value in &apos;AtlasTexture::operator=&apos;." verbose="Member variable &apos;AtlasTexture::margin&apos; is not assigned a value in &apos;AtlasTexture::operator=&apos;." inconclusive="true">
            <location file="scene/resources/texture.h" line="166"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;LargeTexture::_type_name&apos; is not assigned a value in &apos;LargeTexture::operator=&apos;." verbose="Member variable &apos;LargeTexture::_type_name&apos; is not assigned a value in &apos;LargeTexture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="207"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;LargeTexture::pieces&apos; is not assigned a value in &apos;LargeTexture::operator=&apos;." verbose="Member variable &apos;LargeTexture::pieces&apos; is not assigned a value in &apos;LargeTexture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="207"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;LargeTexture::size&apos; is not assigned a value in &apos;LargeTexture::operator=&apos;." verbose="Member variable &apos;LargeTexture::size&apos; is not assigned a value in &apos;LargeTexture::operator=&apos;." inconclusive="true">
            <location file="scene/resources/texture.h" line="207"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CubeMap::_type_name&apos; is not assigned a value in &apos;CubeMap::operator=&apos;." verbose="Member variable &apos;CubeMap::_type_name&apos; is not assigned a value in &apos;CubeMap::operator=&apos;.">
            <location file="scene/resources/texture.h" line="258"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CubeMap::valid&apos; is not assigned a value in &apos;CubeMap::operator=&apos;." verbose="Member variable &apos;CubeMap::valid&apos; is not assigned a value in &apos;CubeMap::operator=&apos;.">
            <location file="scene/resources/texture.h" line="258"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CubeMap::format&apos; is not assigned a value in &apos;CubeMap::operator=&apos;." verbose="Member variable &apos;CubeMap::format&apos; is not assigned a value in &apos;CubeMap::operator=&apos;.">
            <location file="scene/resources/texture.h" line="258"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CubeMap::w&apos; is not assigned a value in &apos;CubeMap::operator=&apos;." verbose="Member variable &apos;CubeMap::w&apos; is not assigned a value in &apos;CubeMap::operator=&apos;.">
            <location file="scene/resources/texture.h" line="258"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CubeMap::h&apos; is not assigned a value in &apos;CubeMap::operator=&apos;." verbose="Member variable &apos;CubeMap::h&apos; is not assigned a value in &apos;CubeMap::operator=&apos;.">
            <location file="scene/resources/texture.h" line="258"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CubeMap::storage&apos; is not assigned a value in &apos;CubeMap::operator=&apos;." verbose="Member variable &apos;CubeMap::storage&apos; is not assigned a value in &apos;CubeMap::operator=&apos;.">
            <location file="scene/resources/texture.h" line="258"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CubeMap::size_override&apos; is not assigned a value in &apos;CubeMap::operator=&apos;." verbose="Member variable &apos;CubeMap::size_override&apos; is not assigned a value in &apos;CubeMap::operator=&apos;." inconclusive="true">
            <location file="scene/resources/texture.h" line="258"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CubeMap::lossy_storage_quality&apos; is not assigned a value in &apos;CubeMap::operator=&apos;." verbose="Member variable &apos;CubeMap::lossy_storage_quality&apos; is not assigned a value in &apos;CubeMap::operator=&apos;.">
            <location file="scene/resources/texture.h" line="258"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Font::_type_name&apos; is not assigned a value in &apos;Font::operator=&apos;." verbose="Member variable &apos;Font::_type_name&apos; is not assigned a value in &apos;Font::operator=&apos;.">
            <location file="scene/resources/font.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Font::textures&apos; is not assigned a value in &apos;Font::operator=&apos;." verbose="Member variable &apos;Font::textures&apos; is not assigned a value in &apos;Font::operator=&apos;.">
            <location file="scene/resources/font.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Font::char_map&apos; is not assigned a value in &apos;Font::operator=&apos;." verbose="Member variable &apos;Font::char_map&apos; is not assigned a value in &apos;Font::operator=&apos;.">
            <location file="scene/resources/font.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Font::kerning_map&apos; is not assigned a value in &apos;Font::operator=&apos;." verbose="Member variable &apos;Font::kerning_map&apos; is not assigned a value in &apos;Font::operator=&apos;.">
            <location file="scene/resources/font.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Font::height&apos; is not assigned a value in &apos;Font::operator=&apos;." verbose="Member variable &apos;Font::height&apos; is not assigned a value in &apos;Font::operator=&apos;.">
            <location file="scene/resources/font.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Font::ascent&apos; is not assigned a value in &apos;Font::operator=&apos;." verbose="Member variable &apos;Font::ascent&apos; is not assigned a value in &apos;Font::operator=&apos;.">
            <location file="scene/resources/font.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Font::distance_field_hint&apos; is not assigned a value in &apos;Font::operator=&apos;." verbose="Member variable &apos;Font::distance_field_hint&apos; is not assigned a value in &apos;Font::operator=&apos;.">
            <location file="scene/resources/font.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBox::_type_name&apos; is not assigned a value in &apos;StyleBox::operator=&apos;." verbose="Member variable &apos;StyleBox::_type_name&apos; is not assigned a value in &apos;StyleBox::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBox::margin&apos; is not assigned a value in &apos;StyleBox::operator=&apos;." verbose="Member variable &apos;StyleBox::margin&apos; is not assigned a value in &apos;StyleBox::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="40"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxEmpty::_type_name&apos; is not assigned a value in &apos;StyleBoxEmpty::operator=&apos;." verbose="Member variable &apos;StyleBoxEmpty::_type_name&apos; is not assigned a value in &apos;StyleBoxEmpty::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="68"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxTexture::_type_name&apos; is not assigned a value in &apos;StyleBoxTexture::operator=&apos;." verbose="Member variable &apos;StyleBoxTexture::_type_name&apos; is not assigned a value in &apos;StyleBoxTexture::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="79"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxTexture::expand_margin&apos; is not assigned a value in &apos;StyleBoxTexture::operator=&apos;." verbose="Member variable &apos;StyleBoxTexture::expand_margin&apos; is not assigned a value in &apos;StyleBoxTexture::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="79"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxTexture::margin&apos; is not assigned a value in &apos;StyleBoxTexture::operator=&apos;." verbose="Member variable &apos;StyleBoxTexture::margin&apos; is not assigned a value in &apos;StyleBoxTexture::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="79"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxTexture::texture&apos; is not assigned a value in &apos;StyleBoxTexture::operator=&apos;." verbose="Member variable &apos;StyleBoxTexture::texture&apos; is not assigned a value in &apos;StyleBoxTexture::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="79"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxTexture::draw_center&apos; is not assigned a value in &apos;StyleBoxTexture::operator=&apos;." verbose="Member variable &apos;StyleBoxTexture::draw_center&apos; is not assigned a value in &apos;StyleBoxTexture::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="79"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxFlat::_type_name&apos; is not assigned a value in &apos;StyleBoxFlat::operator=&apos;." verbose="Member variable &apos;StyleBoxFlat::_type_name&apos; is not assigned a value in &apos;StyleBoxFlat::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="118"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxFlat::border_size&apos; is not assigned a value in &apos;StyleBoxFlat::operator=&apos;." verbose="Member variable &apos;StyleBoxFlat::border_size&apos; is not assigned a value in &apos;StyleBoxFlat::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="118"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxFlat::draw_center&apos; is not assigned a value in &apos;StyleBoxFlat::operator=&apos;." verbose="Member variable &apos;StyleBoxFlat::draw_center&apos; is not assigned a value in &apos;StyleBoxFlat::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="118"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxFlat::blend&apos; is not assigned a value in &apos;StyleBoxFlat::operator=&apos;." verbose="Member variable &apos;StyleBoxFlat::blend&apos; is not assigned a value in &apos;StyleBoxFlat::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="118"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxImageMask::_type_name&apos; is not assigned a value in &apos;StyleBoxImageMask::operator=&apos;." verbose="Member variable &apos;StyleBoxImageMask::_type_name&apos; is not assigned a value in &apos;StyleBoxImageMask::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="164"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxImageMask::expand_margin&apos; is not assigned a value in &apos;StyleBoxImageMask::operator=&apos;." verbose="Member variable &apos;StyleBoxImageMask::expand_margin&apos; is not assigned a value in &apos;StyleBoxImageMask::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="164"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;StyleBoxImageMask::expand&apos; is not assigned a value in &apos;StyleBoxImageMask::operator=&apos;." verbose="Member variable &apos;StyleBoxImageMask::expand&apos; is not assigned a value in &apos;StyleBoxImageMask::operator=&apos;.">
            <location file="scene/resources/style_box.h" line="164"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Theme::_type_name&apos; is not assigned a value in &apos;Theme::operator=&apos;." verbose="Member variable &apos;Theme::_type_name&apos; is not assigned a value in &apos;Theme::operator=&apos;.">
            <location file="scene/resources/theme.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Theme::icon_map&apos; is not assigned a value in &apos;Theme::operator=&apos;." verbose="Member variable &apos;Theme::icon_map&apos; is not assigned a value in &apos;Theme::operator=&apos;.">
            <location file="scene/resources/theme.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Theme::style_map&apos; is not assigned a value in &apos;Theme::operator=&apos;." verbose="Member variable &apos;Theme::style_map&apos; is not assigned a value in &apos;Theme::operator=&apos;.">
            <location file="scene/resources/theme.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Theme::font_map&apos; is not assigned a value in &apos;Theme::operator=&apos;." verbose="Member variable &apos;Theme::font_map&apos; is not assigned a value in &apos;Theme::operator=&apos;.">
            <location file="scene/resources/theme.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Theme::color_map&apos; is not assigned a value in &apos;Theme::operator=&apos;." verbose="Member variable &apos;Theme::color_map&apos; is not assigned a value in &apos;Theme::operator=&apos;.">
            <location file="scene/resources/theme.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Theme::constant_map&apos; is not assigned a value in &apos;Theme::operator=&apos;." verbose="Member variable &apos;Theme::constant_map&apos; is not assigned a value in &apos;Theme::operator=&apos;.">
            <location file="scene/resources/theme.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Theme::default_theme_font&apos; is not assigned a value in &apos;Theme::operator=&apos;." verbose="Member variable &apos;Theme::default_theme_font&apos; is not assigned a value in &apos;Theme::operator=&apos;.">
            <location file="scene/resources/theme.h" line="43"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Timer::_type_name&apos; is not assigned a value in &apos;Timer::operator=&apos;." verbose="Member variable &apos;Timer::_type_name&apos; is not assigned a value in &apos;Timer::operator=&apos;.">
            <location file="scene/main/timer.h" line="36"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Timer::wait_time&apos; is not assigned a value in &apos;Timer::operator=&apos;." verbose="Member variable &apos;Timer::wait_time&apos; is not assigned a value in &apos;Timer::operator=&apos;.">
            <location file="scene/main/timer.h" line="36"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Timer::one_shot&apos; is not assigned a value in &apos;Timer::operator=&apos;." verbose="Member variable &apos;Timer::one_shot&apos; is not assigned a value in &apos;Timer::operator=&apos;.">
            <location file="scene/main/timer.h" line="36"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Timer::autostart&apos; is not assigned a value in &apos;Timer::operator=&apos;." verbose="Member variable &apos;Timer::autostart&apos; is not assigned a value in &apos;Timer::operator=&apos;.">
            <location file="scene/main/timer.h" line="36"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Timer::time_left&apos; is not assigned a value in &apos;Timer::operator=&apos;." verbose="Member variable &apos;Timer::time_left&apos; is not assigned a value in &apos;Timer::operator=&apos;.">
            <location file="scene/main/timer.h" line="36"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Timer::timer_process_mode&apos; is not assigned a value in &apos;Timer::operator=&apos;." verbose="Member variable &apos;Timer::timer_process_mode&apos; is not assigned a value in &apos;Timer::operator=&apos;.">
            <location file="scene/main/timer.h" line="36"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Shader::_type_name&apos; is not assigned a value in &apos;Shader::operator=&apos;." verbose="Member variable &apos;Shader::_type_name&apos; is not assigned a value in &apos;Shader::operator=&apos;.">
            <location file="scene/resources/shader.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Shader::mode&apos; is not assigned a value in &apos;Shader::operator=&apos;." verbose="Member variable &apos;Shader::mode&apos; is not assigned a value in &apos;Shader::operator=&apos;.">
            <location file="scene/resources/shader.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Shader::params_cache_dirty&apos; is not assigned a value in &apos;Shader::operator=&apos;." verbose="Member variable &apos;Shader::params_cache_dirty&apos; is not assigned a value in &apos;Shader::operator=&apos;.">
            <location file="scene/resources/shader.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Shader::params_cache&apos; is not assigned a value in &apos;Shader::operator=&apos;." verbose="Member variable &apos;Shader::params_cache&apos; is not assigned a value in &apos;Shader::operator=&apos;.">
            <location file="scene/resources/shader.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Shader::default_textures&apos; is not assigned a value in &apos;Shader::operator=&apos;." verbose="Member variable &apos;Shader::default_textures&apos; is not assigned a value in &apos;Shader::operator=&apos;.">
            <location file="scene/resources/shader.h" line="37"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;MaterialShader::_type_name&apos; is not assigned a value in &apos;MaterialShader::operator=&apos;." verbose="Member variable &apos;MaterialShader::_type_name&apos; is not assigned a value in &apos;MaterialShader::operator=&apos;.">
            <location file="scene/resources/shader.h" line="109"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItemShader::_type_name&apos; is not assigned a value in &apos;CanvasItemShader::operator=&apos;." verbose="Member variable &apos;CanvasItemShader::_type_name&apos; is not assigned a value in &apos;CanvasItemShader::operator=&apos;.">
            <location file="scene/resources/shader.h" line="118"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItemMaterial::_type_name&apos; is not assigned a value in &apos;CanvasItemMaterial::operator=&apos;." verbose="Member variable &apos;CanvasItemMaterial::_type_name&apos; is not assigned a value in &apos;CanvasItemMaterial::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="45"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItemMaterial::shader&apos; is not assigned a value in &apos;CanvasItemMaterial::operator=&apos;." verbose="Member variable &apos;CanvasItemMaterial::shader&apos; is not assigned a value in &apos;CanvasItemMaterial::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="45"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItemMaterial::shading_mode&apos; is not assigned a value in &apos;CanvasItemMaterial::operator=&apos;." verbose="Member variable &apos;CanvasItemMaterial::shading_mode&apos; is not assigned a value in &apos;CanvasItemMaterial::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="45"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::_type_name&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::_type_name&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::xform_change&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::xform_change&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." inconclusive="true">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::group&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::group&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::canvas_layer&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::canvas_layer&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::opacity&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::opacity&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::self_opacity&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::self_opacity&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::children_items&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::children_items&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::C&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::C&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::blend_mode&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::blend_mode&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::light_mask&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::light_mask&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::first_draw&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::first_draw&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::hidden&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::hidden&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::pending_update&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::pending_update&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::toplevel&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::toplevel&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::pending_children_sort&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::pending_children_sort&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::drawing&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::drawing&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::block_transform_notify&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::block_transform_notify&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::behind&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::behind&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::use_parent_material&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::use_parent_material&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::material&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::material&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::global_transform&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::global_transform&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." inconclusive="true">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CanvasItem::global_invalid&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;." verbose="Member variable &apos;CanvasItem::global_invalid&apos; is not assigned a value in &apos;CanvasItem::operator=&apos;.">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Control::_type_name&apos; is not assigned a value in &apos;Control::operator=&apos;." verbose="Member variable &apos;Control::_type_name&apos; is not assigned a value in &apos;Control::operator=&apos;.">
            <location file="scene/gui/control.h" line="49"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Control::data&apos; is not assigned a value in &apos;Control::operator=&apos;." verbose="Member variable &apos;Control::data&apos; is not assigned a value in &apos;Control::operator=&apos;." inconclusive="true">
            <location file="scene/gui/control.h" line="49"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Control::window&apos; is not assigned a value in &apos;Control::operator=&apos;." verbose="Member variable &apos;Control::window&apos; is not assigned a value in &apos;Control::operator=&apos;.">
            <location file="scene/gui/control.h" line="49"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;PhysicsShapeQueryParameters&gt;::operator=&apos; should return &apos;Ref&lt;PhysicsShapeQueryParameters&gt; &amp;&apos;." verbose="The Ref&lt;PhysicsShapeQueryParameters&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;PhysicsShapeQueryParameters&gt; &amp;Ref&lt;PhysicsShapeQueryParameters&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;Environment&gt;::operator=&apos; should return &apos;Ref&lt;Environment&gt; &amp;&apos;." verbose="The Ref&lt;Environment&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;Environment&gt; &amp;Ref&lt;Environment&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;Physics2DShapeQueryParameters&gt;::operator=&apos; should return &apos;Ref&lt;Physics2DShapeQueryParameters&gt; &amp;&apos;." verbose="The Ref&lt;Physics2DShapeQueryParameters&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;Physics2DShapeQueryParameters&gt; &amp;Ref&lt;Physics2DShapeQueryParameters&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;Physics2DTestMotionResult&gt;::operator=&apos; should return &apos;Ref&lt;Physics2DTestMotionResult&gt; &amp;&apos;." verbose="The Ref&lt;Physics2DTestMotionResult&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;Physics2DTestMotionResult&gt; &amp;Ref&lt;Physics2DTestMotionResult&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: idx &gt;= 0 || idx &lt; 4." verbose="Logical disjunction always evaluates to true: idx &gt;= 0 || idx &lt; 4. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?">
            <location file="core/variant_op.cpp" line="1345"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;PackedScene&gt;::operator=&apos; should return &apos;Ref&lt;PackedScene&gt; &amp;&apos;." verbose="The Ref&lt;PackedScene&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;PackedScene&gt; &amp;Ref&lt;PackedScene&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: idx &gt;= 0 || idx &lt; 4." verbose="Logical disjunction always evaluates to true: idx &gt;= 0 || idx &lt; 4. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?">
            <location file="core/variant_op.cpp" line="2188"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;Texture&gt;::operator=&apos; should return &apos;Ref&lt;Texture&gt; &amp;&apos;." verbose="The Ref&lt;Texture&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;Texture&gt; &amp;Ref&lt;Texture&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;Theme&gt;::operator=&apos; should return &apos;Ref&lt;Theme&gt; &amp;&apos;." verbose="The Ref&lt;Theme&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;Theme&gt; &amp;Ref&lt;Theme&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;StyleBox&gt;::operator=&apos; should return &apos;Ref&lt;StyleBox&gt; &amp;&apos;." verbose="The Ref&lt;StyleBox&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;StyleBox&gt; &amp;Ref&lt;StyleBox&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;Font&gt;::operator=&apos; should return &apos;Ref&lt;Font&gt; &amp;&apos;." verbose="The Ref&lt;Font&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;Font&gt; &amp;Ref&lt;Font&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;Shader&gt;::operator=&apos; should return &apos;Ref&lt;Shader&gt; &amp;&apos;." verbose="The Ref&lt;Shader&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;Shader&gt; &amp;Ref&lt;Shader&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;CanvasItemMaterial&gt;::operator=&apos; should return &apos;Ref&lt;CanvasItemMaterial&gt; &amp;&apos;." verbose="The Ref&lt;CanvasItemMaterial&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;CanvasItemMaterial&gt; &amp;Ref&lt;CanvasItemMaterial&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;World2D&gt;::operator=&apos; should return &apos;Ref&lt;World2D&gt; &amp;&apos;." verbose="The Ref&lt;World2D&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;World2D&gt; &amp;Ref&lt;World2D&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,Group,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,Group,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,Group,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,Group,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,Group,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;UGCall,Vector&lt;Variant&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;UGCall,Vector&lt;Variant&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;UGCall,Vector&lt;Variant&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;UGCall,Vector&lt;Variant&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;UGCall,Vector&lt;Variant&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;Node*,Node*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;Node*,Node*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;Node*,Node*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;Node*,Node*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;Node*,Node*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;KerningPairKey,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;KerningPairKey,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;KerningPairKey,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;KerningPairKey,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;KerningPairKey,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Node*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Node*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Node*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Node*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Node*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,GroupData,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,GroupData,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,GroupData,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,GroupData,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,GroupData,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;wchar_t,Character,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;wchar_t,Character,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;wchar_t,Character,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;wchar_t,Character,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;wchar_t,Character,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,Color,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,Color,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;StringName,HashMap&lt;StringName,int,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;StringName,HashMap&lt;StringName,int,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;StringName,HashMap&lt;StringName,int,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;StringName,HashMap&lt;StringName,int,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt; &amp;HashMap&lt;StringName,HashMap&lt;StringName,int,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Node*,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Node*,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Node*,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Node*,DefaultAllocator&gt; &amp;List&lt;Node*,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;GroupInfo,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;GroupInfo,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;GroupInfo,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;GroupInfo,DefaultAllocator&gt; &amp;List&lt;GroupInfo,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;CanvasItem*,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;CanvasItem*,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;CanvasItem*,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;CanvasItem*,DefaultAllocator&gt; &amp;List&lt;CanvasItem*,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Control*,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Control*,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Control*,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Control*,DefaultAllocator&gt; &amp;List&lt;Control*,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;wchar_t,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;wchar_t,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;wchar_t,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;wchar_t,DefaultAllocator&gt; &amp;List&lt;wchar_t,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;float&gt;::operator=&apos; should return &apos;DVector&lt;float&gt; &amp;&apos;." verbose="The DVector&lt;float&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;float&gt; &amp;DVector&lt;float&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;PhysicsDirectSpaceState::ShapeResult&gt;::operator=&apos; should return &apos;Vector&lt;PhysicsDirectSpaceState::ShapeResult&gt; &amp;&apos;." verbose="The Vector&lt;PhysicsDirectSpaceState::ShapeResult&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;PhysicsDirectSpaceState::ShapeResult&gt; &amp;Vector&lt;PhysicsDirectSpaceState::ShapeResult&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Physics2DDirectSpaceState::ShapeResult&gt;::operator=&apos; should return &apos;Vector&lt;Physics2DDirectSpaceState::ShapeResult&gt; &amp;&apos;." verbose="The Vector&lt;Physics2DDirectSpaceState::ShapeResult&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Physics2DDirectSpaceState::ShapeResult&gt; &amp;Vector&lt;Physics2DDirectSpaceState::ShapeResult&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Node*&gt;::operator=&apos; should return &apos;Vector&lt;Node*&gt; &amp;&apos;." verbose="The Vector&lt;Node*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Node*&gt; &amp;Vector&lt;Node*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Connection&gt;::operator=&apos; should return &apos;Vector&lt;Connection&gt; &amp;&apos;." verbose="The Vector&lt;Connection&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Connection&gt; &amp;Vector&lt;Connection&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Piece&gt;::operator=&apos; should return &apos;Vector&lt;Piece&gt; &amp;&apos;." verbose="The Vector&lt;Piece&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Piece&gt; &amp;Vector&lt;Piece&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Ref&lt;Texture&gt;&gt;::operator=&apos; should return &apos;Vector&lt;Ref&lt;Texture&gt;&gt; &amp;&apos;." verbose="The Vector&lt;Ref&lt;Texture&gt;&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Ref&lt;Texture&gt;&gt; &amp;Vector&lt;Ref&lt;Texture&gt;&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;KerningPairKey&gt;::operator=&apos; should return &apos;Vector&lt;KerningPairKey&gt; &amp;&apos;." verbose="The Vector&lt;KerningPairKey&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;KerningPairKey&gt; &amp;Vector&lt;KerningPairKey&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;_VariantStrPair&gt;::operator=&apos; should return &apos;Vector&lt;_VariantStrPair&gt; &amp;&apos;." verbose="The Vector&lt;_VariantStrPair&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;_VariantStrPair&gt; &amp;Vector&lt;_VariantStrPair&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Variant::static_assign&apos; can be static." verbose="The member function &apos;Variant::static_assign&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/variant.h" line="419"/>
            <location file="core/variant.cpp" line="2906"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PhysicsDirectBodyState::*&apos; can be static." verbose="The member function &apos;PhysicsDirectBodyState::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_server.h" line="39"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PhysicsShapeQueryParameters::*&apos; can be static." verbose="The member function &apos;PhysicsShapeQueryParameters::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_server.h" line="93"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PhysicsDirectSpaceState::*&apos; can be static." verbose="The member function &apos;PhysicsDirectSpaceState::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_server.h" line="133"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PhysicsShapeQueryResult::*&apos; can be static." verbose="The member function &apos;PhysicsShapeQueryResult::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_server.h" line="210"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PhysicsServer::*&apos; can be static." verbose="The member function &apos;PhysicsServer::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_server.h" line="232"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;VisualServer::*&apos; can be static." verbose="The member function &apos;VisualServer::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/visual_server.h" line="45"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;AudioServer::*&apos; can be static." verbose="The member function &apos;AudioServer::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/audio_server.h" line="109"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SpatialSoundServer::*&apos; can be static." verbose="The member function &apos;SpatialSoundServer::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/spatial_sound_server.h" line="37"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Environment::*&apos; can be static." verbose="The member function &apos;Environment::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/environment.h" line="37"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;World::*&apos; can be static." verbose="The member function &apos;World::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/world.h" line="43"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Physics2DDirectBodyState::*&apos; can be static." verbose="The member function &apos;Physics2DDirectBodyState::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d_server.h" line="40"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Physics2DShapeQueryParameters::*&apos; can be static." verbose="The member function &apos;Physics2DShapeQueryParameters::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d_server.h" line="93"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Physics2DDirectSpaceState::*&apos; can be static." verbose="The member function &apos;Physics2DDirectSpaceState::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d_server.h" line="136"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Physics2DShapeQueryResult::*&apos; can be static." verbose="The member function &apos;Physics2DShapeQueryResult::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d_server.h" line="214"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Physics2DServer::*&apos; can be static." verbose="The member function &apos;Physics2DServer::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d_server.h" line="237"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Physics2DTestMotionResult::*&apos; can be static." verbose="The member function &apos;Physics2DTestMotionResult::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d_server.h" line="562"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;World2D::*&apos; can be static." verbose="The member function &apos;World2D::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/world_2d.h" line="41"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Node::*&apos; can be static." verbose="The member function &apos;Node::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/main/node.h" line="43"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Texture::*&apos; can be static." verbose="The member function &apos;Texture::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/texture.h" line="44"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;ImageTexture::*&apos; can be static." verbose="The member function &apos;ImageTexture::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/texture.h" line="88"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;AtlasTexture::*&apos; can be static." verbose="The member function &apos;AtlasTexture::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/texture.h" line="166"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;LargeTexture::*&apos; can be static." verbose="The member function &apos;LargeTexture::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/texture.h" line="207"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CubeMap::*&apos; can be static." verbose="The member function &apos;CubeMap::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/texture.h" line="258"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Font::*&apos; can be static." verbose="The member function &apos;Font::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/font.h" line="40"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;StyleBox::*&apos; can be static." verbose="The member function &apos;StyleBox::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/style_box.h" line="40"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;StyleBoxEmpty::*&apos; can be static." verbose="The member function &apos;StyleBoxEmpty::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/style_box.h" line="68"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;StyleBoxTexture::*&apos; can be static." verbose="The member function &apos;StyleBoxTexture::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/style_box.h" line="79"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;StyleBoxFlat::*&apos; can be static." verbose="The member function &apos;StyleBoxFlat::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/style_box.h" line="118"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;StyleBoxImageMask::*&apos; can be static." verbose="The member function &apos;StyleBoxImageMask::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/style_box.h" line="164"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Theme::*&apos; can be static." verbose="The member function &apos;Theme::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/theme.h" line="43"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Timer::*&apos; can be static." verbose="The member function &apos;Timer::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/main/timer.h" line="36"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Shader::*&apos; can be static." verbose="The member function &apos;Shader::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/shader.h" line="37"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;MaterialShader::*&apos; can be static." verbose="The member function &apos;MaterialShader::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/shader.h" line="109"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CanvasItemShader::*&apos; can be static." verbose="The member function &apos;CanvasItemShader::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/resources/shader.h" line="118"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CanvasItemMaterial::*&apos; can be static." verbose="The member function &apos;CanvasItemMaterial::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/2d/canvas_item.h" line="45"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CanvasItem::*&apos; can be static." verbose="The member function &apos;CanvasItem::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/2d/canvas_item.h" line="89"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Control::*&apos; can be static." verbose="The member function &apos;Control::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="scene/gui/control.h" line="49"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Group,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Group,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Group,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Group,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Group,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Group,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;UGCall,Vector&lt;Variant&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;UGCall,Vector&lt;Variant&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;UGCall,Vector&lt;Variant&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;UGCall,Vector&lt;Variant&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;UGCall,Vector&lt;Variant&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;UGCall,Vector&lt;Variant&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Node*,Node*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;Node*,Node*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Node*,Node*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;Node*,Node*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Node*,Node*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;Node*,Node*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;KerningPairKey,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;KerningPairKey,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;KerningPairKey,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;KerningPairKey,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;KerningPairKey,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;KerningPairKey,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Node*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Node*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Node*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Node*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Node*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Node*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,GroupData,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,GroupData,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,GroupData,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,GroupData,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;wchar_t,Character,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;wchar_t,Character,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;wchar_t,Character,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;wchar_t,Character,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Texture&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;StyleBox&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Ref&lt;Font&gt;,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,Color,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,int,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,int,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,int,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;StringName,HashMap&lt;StringName,int,StringNameHasher,3,8&gt;,StringNameHasher,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Node*,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Node*,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Node*,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Node*,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;GroupInfo,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;GroupInfo,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;GroupInfo,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;GroupInfo,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;CanvasItem*,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;CanvasItem*,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;CanvasItem*,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;CanvasItem*,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Control*,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Control*,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Control*,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Control*,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;wchar_t,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;wchar_t,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;wchar_t,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;wchar_t,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;PhysicsDirectSpaceState::ShapeResult&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;PhysicsDirectSpaceState::ShapeResult&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;PhysicsDirectSpaceState::ShapeResult&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;PhysicsDirectSpaceState::ShapeResult&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Physics2DDirectSpaceState::ShapeResult&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Physics2DDirectSpaceState::ShapeResult&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Physics2DDirectSpaceState::ShapeResult&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Physics2DDirectSpaceState::ShapeResult&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Node*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Node*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Node*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Node*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Connection&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Connection&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Connection&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Connection&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Piece&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Piece&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Piece&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Piece&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Ref&lt;Texture&gt;&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Ref&lt;Texture&gt;&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Ref&lt;Texture&gt;&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Ref&lt;Texture&gt;&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;KerningPairKey&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;KerningPairKey&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;KerningPairKey&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;KerningPairKey&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;_VariantStrPair&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;_VariantStrPair&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;_VariantStrPair&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;_VariantStrPair&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;PhysicsDirectSpaceState::ShapeResult,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;PhysicsDirectSpaceState::ShapeResult,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Physics2DDirectSpaceState::ShapeResult,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Physics2DDirectSpaceState::ShapeResult,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Node*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Node*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Connection,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Connection,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Piece,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Piece,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Ref&lt;Texture&gt;,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Ref&lt;Texture&gt;,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;KerningPairKey,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;KerningPairKey,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;_VariantStrPair,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;_VariantStrPair,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PhysicsShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PhysicsShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PhysicsShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PhysicsShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PhysicsShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PhysicsShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PhysicsShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PhysicsShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Environment&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Environment&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Environment&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Environment&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Environment&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Environment&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Environment&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Environment&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Physics2DShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Physics2DShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Physics2DShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Physics2DShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Physics2DShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Physics2DShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Physics2DShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Physics2DShapeQueryParameters&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Physics2DTestMotionResult&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Physics2DTestMotionResult&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Physics2DTestMotionResult&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Physics2DTestMotionResult&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Physics2DTestMotionResult&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Physics2DTestMotionResult&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Physics2DTestMotionResult&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Physics2DTestMotionResult&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedScene&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedScene&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedScene&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedScene&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedScene&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedScene&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;PackedScene&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;PackedScene&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Texture&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Texture&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Texture&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Texture&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Texture&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Texture&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Texture&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Texture&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Theme&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Theme&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Theme&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Theme&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Theme&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Theme&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Theme&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Theme&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StyleBox&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StyleBox&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StyleBox&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StyleBox&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StyleBox&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StyleBox&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;StyleBox&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;StyleBox&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Font&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Font&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Font&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Font&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Font&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Font&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Font&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Font&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Shader&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Shader&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Shader&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Shader&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Shader&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Shader&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;Shader&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;Shader&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;CanvasItemMaterial&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;CanvasItemMaterial&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;CanvasItemMaterial&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;CanvasItemMaterial&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;CanvasItemMaterial&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;CanvasItemMaterial&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;CanvasItemMaterial&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;CanvasItemMaterial&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;World2D&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;World2D&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;World2D&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;World2D&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;World2D&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;World2D&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;World2D&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;World2D&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ameth&apos; can be reduced." verbose="The scope of the variable &apos;ameth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/ameth_lib.c" line="206"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;erch&apos; can be reduced." verbose="The scope of the variable &apos;erch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn1_gen.c" line="388"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn1_lib.c" line="158"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ttag&apos; can be reduced." verbose="The scope of the variable &apos;ttag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn1_lib.c" line="199"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn1_lib.c" line="237"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn1_lib.c" line="237"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;j&apos; to itself." verbose="Redundant assignment of &apos;j&apos; to itself.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn1_par.c" line="137"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_mime.c" line="195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_mime.c" line="283"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_mime.c" line="284"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;asnin&apos; can be reduced." verbose="The scope of the variable &apos;asnin&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_mime.c" line="434"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prm&apos; can be reduced." verbose="The scope of the variable &apos;prm&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_mime.c" line="438"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_mime.c" line="440"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;eol&apos; can be reduced." verbose="The scope of the variable &apos;eol&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_mime.c" line="539"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_mime.c" line="784"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_mime.c" line="835"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_mime.c" line="836"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_mime.c" line="938"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oval&apos; can be reduced." verbose="The scope of the variable &apos;oval&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_moid.c" line="76"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oid&apos; can be reduced." verbose="The scope of the variable &apos;oid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/asn_moid.c" line="114"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;derlen&apos; is assigned a value that is never used." verbose="Variable &apos;derlen&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/asn1/bio_ndef.c" line="170"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_octree&apos; should be passed by reference." verbose="Parameter &apos;p_octree&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="servers/visual_server.h" line="600"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_light&apos; should be passed by reference." verbose="Parameter &apos;p_light&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="servers/visual_server.h" line="603"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_texture&apos; should be passed by reference." verbose="Parameter &apos;p_texture&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="servers/visual_server.h" line="612"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/t_crl.c" line="88"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/t_pkey.c" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/t_pkey.c" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ameth&apos; can be reduced." verbose="The scope of the variable &apos;ameth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/t_x509.c" line="326"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;q&apos; can be reduced." verbose="The scope of the variable &apos;q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/tasn_dec.c" line="1157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/tasn_dec.c" line="1222"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;seqtt&apos; can be reduced." verbose="The scope of the variable &apos;seqtt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/tasn_fre.c" line="81"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/tasn_fre.c" line="185"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/tasn_prn.c" line="342"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tname&apos; can be reduced." verbose="The scope of the variable &apos;tname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/tasn_prn.c" line="355"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext&apos; can be reduced." verbose="The scope of the variable &apos;ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_crl.c" line="213"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_info.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_long.c" line="109"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ltmp&apos; can be reduced." verbose="The scope of the variable &apos;ltmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_name.c" line="483"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: ret" verbose="Possible null pointer dereference: ret" inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="113"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: ret" verbose="Possible null pointer dereference: ret" inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="114"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: ret" verbose="Possible null pointer dereference: ret" inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="115"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: ret" verbose="Possible null pointer dereference: ret" inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="116"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: ret" verbose="Possible null pointer dereference: ret" inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="117"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: ret" verbose="Possible null pointer dereference: ret" inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="118"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: ret" verbose="Possible null pointer dereference: ret" inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="119"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: ret" verbose="Possible null pointer dereference: ret" inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="120"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: ret" verbose="Possible null pointer dereference: ret" inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="121"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: ret" verbose="Possible null pointer dereference: ret" inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="122"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="124"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: c" verbose="Unused variable: c">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="110"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/asn1/x_pkey.c" line="1"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin0&apos; is assigned a value that is never used." verbose="Variable &apos;tin0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_cbc.c" line="140"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin1&apos; is assigned a value that is never used." verbose="Variable &apos;tin1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_cbc.c" line="140"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout0&apos; is assigned a value that is never used." verbose="Variable &apos;tout0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_cbc.c" line="140"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout1&apos; is assigned a value that is never used." verbose="Variable &apos;tout1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_cbc.c" line="140"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_cbc.c" line="141"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_cfb64.c" line="118"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_cfb64.c" line="118"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_cfb64.c" line="118"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_cfb64.c" line="118"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;l&apos; is assigned a value that is never used." verbose="Variable &apos;l&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_ecb.c" line="94"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d&apos; is assigned a value that is never used." verbose="Variable &apos;d&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_ecb.c" line="94"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin0&apos; is assigned a value that is never used." verbose="Variable &apos;tin0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_enc.c" line="302"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin1&apos; is assigned a value that is never used." verbose="Variable &apos;tin1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_enc.c" line="302"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout0&apos; is assigned a value that is never used." verbose="Variable &apos;tout0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_enc.c" line="302"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout1&apos; is assigned a value that is never used." verbose="Variable &apos;tout1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_enc.c" line="302"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_enc.c" line="303"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_ofb64.c" line="107"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_ofb64.c" line="107"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_ofb64.c" line="107"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;d&apos; is not assigned a value." verbose="Variable &apos;d&apos; is not assigned a value.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_ofb64.c" line="72"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_ofb64.c" line="107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_opts.c" line="167"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_opts.c" line="184"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;buf&apos; is assigned a value that is never used." verbose="Variable &apos;buf&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_opts.c" line="229"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rank&apos; is assigned a value that is never used." verbose="Variable &apos;rank&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_opts.c" line="244"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num&apos; is assigned a value that is never used." verbose="Variable &apos;num&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_opts.c" line="285"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ca&apos; is assigned a value that is never used." verbose="Variable &apos;ca&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_opts.c" line="267"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cc&apos; is assigned a value that is never used." verbose="Variable &apos;cc&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_opts.c" line="269"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cd&apos; is assigned a value that is never used." verbose="Variable &apos;cd&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_opts.c" line="270"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ce&apos; is assigned a value that is never used." verbose="Variable &apos;ce&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_opts.c" line="272"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_opts.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bf/bf_opts.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bf/bfspeed.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bf/bfspeed.c" line="157"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bf/bfspeed.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bf/bfspeed.c" line="1"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;h&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;h&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="645"/>
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="644"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="178"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="590"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;again&apos; is not used." verbose="Label &apos;again&apos; is not used.">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="737"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;l&apos; is assigned a value that is never used." verbose="Variable &apos;l&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="969"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FIONBIO&apos; since the value of &apos;FIONBIO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FIONBIO&apos; since the value of &apos;FIONBIO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="1"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="242"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="506"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="478"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;OPENSSL_SYS_WINDOWS;SO_REUSEADDR&apos; since the value of &apos;SO_REUSEADDR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;OPENSSL_SYS_WINDOWS;SO_REUSEADDR&apos; since the value of &apos;SO_REUSEADDR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;OPENSSL_USE_IPV6;SO_REUSEADDR&apos; since the value of &apos;SO_REUSEADDR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;OPENSSL_USE_IPV6;SO_REUSEADDR&apos; since the value of &apos;SO_REUSEADDR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SO_REUSEADDR&apos; since the value of &apos;SO_REUSEADDR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SO_REUSEADDR&apos; since the value of &apos;SO_REUSEADDR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/b_sock.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ref&apos; can be reduced." verbose="The scope of the variable &apos;ref&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bio_lib.c" line="509"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bio_lib.c" line="1"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;init&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;init&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_acpt.c" line="393"/>
            <location file="drivers/builtin_openssl2/crypto/bio/bss_acpt.c" line="388"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ip&apos; can be reduced." verbose="The scope of the variable &apos;ip&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_acpt.c" line="343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp&apos; can be reduced." verbose="The scope of the variable &apos;pp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_acpt.c" line="346"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dbio&apos; can be reduced." verbose="The scope of the variable &apos;dbio&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_conn.c" line="454"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ip&apos; can be reduced." verbose="The scope of the variable &apos;ip&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_conn.c" line="455"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pptr&apos; can be reduced." verbose="The scope of the variable &apos;pptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_conn.c" line="456"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SO_KEEPALIVE&apos; since the value of &apos;SO_KEEPALIVE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SO_KEEPALIVE&apos; since the value of &apos;SO_KEEPALIVE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_conn.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ip&apos; can be reduced." verbose="The scope of the variable &apos;ip&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1010"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1010"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;snp&apos; can be reduced." verbose="The scope of the variable &apos;snp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1013"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cmsg&apos; can be reduced." verbose="The scope of the variable &apos;cmsg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1016"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sockflags&apos; can be reduced." verbose="The scope of the variable &apos;sockflags&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1709"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1779"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EAGAIN&apos; since the value of &apos;EAGAIN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EAGAIN&apos; since the value of &apos;EAGAIN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EALREADY&apos; since the value of &apos;EALREADY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EALREADY&apos; since the value of &apos;EALREADY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EINPROGRESS&apos; since the value of &apos;EINPROGRESS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EINPROGRESS&apos; since the value of &apos;EINPROGRESS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EMSGSIZE&apos; since the value of &apos;EMSGSIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EMSGSIZE&apos; since the value of &apos;EMSGSIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EPROTO&apos; since the value of &apos;EPROTO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EPROTO&apos; since the value of &apos;EPROTO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EWOULDBLOCK&apos; since the value of &apos;EWOULDBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EWOULDBLOCK&apos; since the value of &apos;EWOULDBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EWOULDBLOCK;WSAEWOULDBLOCK&apos; since the value of &apos;EWOULDBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EWOULDBLOCK;WSAEWOULDBLOCK&apos; since the value of &apos;EWOULDBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;IP_MTU;OPENSSL_SYS_LINUX&apos; since the value of &apos;IP_MTU&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;IP_MTU;OPENSSL_SYS_LINUX&apos; since the value of &apos;IP_MTU&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;IP_MTU_DISCOVER;IP_PMTUDISC_DO;OPENSSL_SYS_LINUX&apos; since the value of &apos;IP_MTU_DISCOVER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;IP_MTU_DISCOVER;IP_PMTUDISC_DO;OPENSSL_SYS_LINUX&apos; since the value of &apos;IP_MTU_DISCOVER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;OPENSSL_SYS_WINDOWS;SO_RCVTIMEO&apos; since the value of &apos;SO_RCVTIMEO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;OPENSSL_SYS_WINDOWS;SO_RCVTIMEO&apos; since the value of &apos;SO_RCVTIMEO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;OPENSSL_SYS_WINDOWS;SO_SNDTIMEO&apos; since the value of &apos;SO_SNDTIMEO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;OPENSSL_SYS_WINDOWS;SO_SNDTIMEO&apos; since the value of &apos;SO_SNDTIMEO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;OPENSSL_SYS_WINDOWS;WSAEWOULDBLOCK&apos; since the value of &apos;WSAEWOULDBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;OPENSSL_SYS_WINDOWS;WSAEWOULDBLOCK&apos; since the value of &apos;WSAEWOULDBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SCTP_AUTHENTICATION_EVENT&apos; since the value of &apos;SCTP_AUTHENTICATION_EVENT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SCTP_AUTHENTICATION_EVENT&apos; since the value of &apos;SCTP_AUTHENTICATION_EVENT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SCTP_AUTHENTICATION_EVENT;SCTP_EVENT&apos; since the value of &apos;SCTP_AUTHENTICATION_EVENT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SCTP_AUTHENTICATION_EVENT;SCTP_EVENT&apos; since the value of &apos;SCTP_AUTHENTICATION_EVENT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SCTP_AUTH_DEACTIVATE_KEY&apos; since the value of &apos;SCTP_AUTH_DEACTIVATE_KEY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SCTP_AUTH_DEACTIVATE_KEY&apos; since the value of &apos;SCTP_AUTH_DEACTIVATE_KEY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SCTP_EVENT&apos; since the value of &apos;SCTP_EVENT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SCTP_EVENT&apos; since the value of &apos;SCTP_EVENT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SCTP_PRINFO;SCTP_SNDINFO&apos; since the value of &apos;SCTP_PRINFO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SCTP_PRINFO;SCTP_SNDINFO&apos; since the value of &apos;SCTP_PRINFO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SCTP_PR_SCTP_NONE&apos; since the value of &apos;SCTP_PR_SCTP_NONE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SCTP_PR_SCTP_NONE&apos; since the value of &apos;SCTP_PR_SCTP_NONE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SCTP_RCVINFO&apos; since the value of &apos;SCTP_RCVINFO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SCTP_RCVINFO&apos; since the value of &apos;SCTP_RCVINFO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SCTP_SACK_IMMEDIATELY&apos; since the value of &apos;SCTP_SACK_IMMEDIATELY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SCTP_SACK_IMMEDIATELY&apos; since the value of &apos;SCTP_SACK_IMMEDIATELY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SCTP_SNDRCV&apos; since the value of &apos;SCTP_SNDRCV&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SCTP_SNDRCV&apos; since the value of &apos;SCTP_SNDRCV&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SO_RCVTIMEO&apos; since the value of &apos;SO_RCVTIMEO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SO_RCVTIMEO&apos; since the value of &apos;SO_RCVTIMEO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SO_SNDTIMEO&apos; since the value of &apos;SO_SNDTIMEO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SO_SNDTIMEO&apos; since the value of &apos;SO_SNDTIMEO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_dgram.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ip&apos; can be reduced." verbose="The scope of the variable &apos;ip&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_fd.c" line="179"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_fd.c" line="256"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EALREADY&apos; since the value of &apos;EALREADY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EALREADY&apos; since the value of &apos;EALREADY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_fd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EINPROGRESS&apos; since the value of &apos;EINPROGRESS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EINPROGRESS&apos; since the value of &apos;EINPROGRESS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_fd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_fd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENOTCONN&apos; since the value of &apos;ENOTCONN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENOTCONN&apos; since the value of &apos;ENOTCONN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_fd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EPROTO&apos; since the value of &apos;EPROTO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EPROTO&apos; since the value of &apos;EPROTO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_fd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EWOULDBLOCK&apos; since the value of &apos;EWOULDBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EWOULDBLOCK&apos; since the value of &apos;EWOULDBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_fd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;CP_UTF8;_WIN32&apos; since the value of &apos;CP_UTF8&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;CP_UTF8;_WIN32&apos; since the value of &apos;CP_UTF8&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_file.c" line="1"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_mem.c" line="152"/>
            <location file="drivers/builtin_openssl2/crypto/bio/bss_mem.c" line="147"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;status&apos; can be reduced." verbose="The scope of the variable &apos;status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_rtcp.c" line="223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ip&apos; can be reduced." verbose="The scope of the variable &apos;ip&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_sock.c" line="171"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_sock.c" line="219"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EALREADY&apos; since the value of &apos;EALREADY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EALREADY&apos; since the value of &apos;EALREADY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_sock.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EINPROGRESS&apos; since the value of &apos;EINPROGRESS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EINPROGRESS&apos; since the value of &apos;EINPROGRESS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_sock.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_sock.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;ENOTCONN&apos; since the value of &apos;ENOTCONN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;ENOTCONN&apos; since the value of &apos;ENOTCONN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_sock.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EPROTO&apos; since the value of &apos;EPROTO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EPROTO&apos; since the value of &apos;EPROTO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_sock.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EWOULDBLOCK&apos; since the value of &apos;EWOULDBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EWOULDBLOCK&apos; since the value of &apos;EWOULDBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/bio/bss_sock.c" line="1"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_asm.c" line="992"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bp&apos; is assigned a value that is never used." verbose="Variable &apos;bp&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_add.c" line="133"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dummy&apos; can be reduced." verbose="The scope of the variable &apos;dummy&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_add.c" line="172"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dummy&apos; is assigned a value that is never used." verbose="Variable &apos;dummy&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_add.c" line="211"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_lib.c" line="303"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_lib.c" line="702"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 186." verbose="Expression is always false because &apos;else if&apos; condition matches previous condition at line 186.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_lib.c" line="210"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 186." verbose="Expression is always false because &apos;else if&apos; condition matches previous condition at line 186.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_lib.c" line="220"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 188." verbose="Expression is always false because &apos;else if&apos; condition matches previous condition at line 188.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_lib.c" line="198"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_mul.c" line="553"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_mul.c" line="553"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mp&apos; can be reduced." verbose="The scope of the variable &apos;mp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_mul.c" line="763"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;neg&apos; is assigned a value that is never used." verbose="Variable &apos;neg&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_mul.c" line="845"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;zero&apos; is assigned a value that is never used." verbose="Variable &apos;zero&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/bn/bn_mul.c" line="799"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bn/bnspeed.c" line="130"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bn/bnspeed.c" line="147"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bn/expspeed.c" line="156"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/bn/expspeed.c" line="173"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/buffer/buffer.c" line="194"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;l&apos; is assigned a value that is never used." verbose="Variable &apos;l&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_ecb.c" line="78"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d&apos; is assigned a value that is never used." verbose="Variable &apos;d&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_ecb.c" line="78"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin0&apos; is assigned a value that is never used." verbose="Variable &apos;tin0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_enc.c" line="206"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin1&apos; is assigned a value that is never used." verbose="Variable &apos;tin1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_enc.c" line="206"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout0&apos; is assigned a value that is never used." verbose="Variable &apos;tout0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_enc.c" line="206"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout1&apos; is assigned a value that is never used." verbose="Variable &apos;tout1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_enc.c" line="206"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_enc.c" line="207"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_ofb64.c" line="108"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_ofb64.c" line="108"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_ofb64.c" line="108"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;d&apos; is not assigned a value." verbose="Variable &apos;d&apos; is not assigned a value.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_ofb64.c" line="73"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/c_ofb64.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cast/cast_spd.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cast/cast_spd.c" line="157"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/cast/cast_spd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/cast/cast_spd.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cast/castopts.c" line="177"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cast/castopts.c" line="194"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;buf&apos; is assigned a value that is never used." verbose="Variable &apos;buf&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/castopts.c" line="239"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rank&apos; is assigned a value that is never used." verbose="Variable &apos;rank&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/castopts.c" line="254"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num&apos; is assigned a value that is never used." verbose="Variable &apos;num&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/castopts.c" line="295"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ca&apos; is assigned a value that is never used." verbose="Variable &apos;ca&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/castopts.c" line="277"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cc&apos; is assigned a value that is never used." verbose="Variable &apos;cc&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/castopts.c" line="279"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cd&apos; is assigned a value that is never used." verbose="Variable &apos;cd&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/castopts.c" line="280"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ce&apos; is assigned a value that is never used." verbose="Variable &apos;ce&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/cast/castopts.c" line="282"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/cast/castopts.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cast/casttest.c" line="137"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/cast/castopts.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cch&apos; can be reduced." verbose="The scope of the variable &apos;cch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cms/cms_sd.c" line="113"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rch&apos; can be reduced." verbose="The scope of the variable &apos;rch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cms/cms_sd.c" line="114"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;si&apos; can be reduced." verbose="The scope of the variable &apos;si&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cms/cms_sd.c" line="115"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sitmp&apos; can be reduced." verbose="The scope of the variable &apos;sitmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cms/cms_sd.c" line="175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cms/cms_sd.c" line="278"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;si&apos; can be reduced." verbose="The scope of the variable &apos;si&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cms/cms_sd.c" line="559"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;si&apos; can be reduced." verbose="The scope of the variable &apos;si&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cms/cms_sd.c" line="689"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ri&apos; can be reduced." verbose="The scope of the variable &apos;ri&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cms/cms_smime.c" line="612"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ri&apos; can be reduced." verbose="The scope of the variable &apos;ri&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cms/cms_smime.c" line="675"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ri&apos; can be reduced." verbose="The scope of the variable &apos;ri&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/cms/cms_smime.c" line="713"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/builtin_openssl2/crypto/comp/c_zlib.c" line="211"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/builtin_openssl2/crypto/comp/c_zlib.c" line="239"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ip&apos; can be reduced." verbose="The scope of the variable &apos;ip&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/comp/c_zlib.c" line="717"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/cnf_save.c" line="84"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;section&apos; can be reduced." verbose="The scope of the variable &apos;section&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/cnf_save.c" line="85"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;name&apos; can be reduced." verbose="The scope of the variable &apos;name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/cnf_save.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/cnf_save.c" line="87"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/conf_api.c" line="131"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/conf_api.c" line="132"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vv&apos; can be reduced." verbose="The scope of the variable &apos;vv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/conf_api.c" line="250"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vl&apos; can be reduced." verbose="The scope of the variable &apos;vl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/conf_mod.c" line="128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/conf_mod.c" line="131"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmod&apos; can be reduced." verbose="The scope of the variable &apos;tmod&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/conf_mod.c" line="325"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;md&apos; can be reduced." verbose="The scope of the variable &apos;md&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/conf_mod.c" line="425"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;imod&apos; can be reduced." verbose="The scope of the variable &apos;imod&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/conf/conf_mod.c" line="458"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;CFLAGS&apos; since the value of &apos;CFLAGS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;CFLAGS&apos; since the value of &apos;CFLAGS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/cversion.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DATE&apos; since the value of &apos;DATE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DATE&apos; since the value of &apos;DATE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/cversion.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;OPENSSLDIR&apos; since the value of &apos;OPENSSLDIR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;OPENSSLDIR&apos; since the value of &apos;OPENSSLDIR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/cversion.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PLATFORM&apos; since the value of &apos;PLATFORM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PLATFORM&apos; since the value of &apos;PLATFORM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/cversion.c" line="1"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: niv1" verbose="Uninitialized variable: niv1">
            <location file="drivers/builtin_openssl2/crypto/des/cbc3_enc.c" line="96"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: niv2" verbose="Uninitialized variable: niv2">
            <location file="drivers/builtin_openssl2/crypto/des/cbc3_enc.c" line="97"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout0&apos; is assigned a value that is never used." verbose="Variable &apos;tout0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cbc_cksm.c" line="95"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin0&apos; is assigned a value that is never used." verbose="Variable &apos;tin0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cbc_cksm.c" line="95"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin1&apos; is assigned a value that is never used." verbose="Variable &apos;tin1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cbc_cksm.c" line="95"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cbc_cksm.c" line="95"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin0&apos; is assigned a value that is never used." verbose="Variable &apos;tin0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ncbc_enc.c" line="146"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin1&apos; is assigned a value that is never used." verbose="Variable &apos;tin1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ncbc_enc.c" line="146"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout0&apos; is assigned a value that is never used." verbose="Variable &apos;tout0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ncbc_enc.c" line="146"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout1&apos; is assigned a value that is never used." verbose="Variable &apos;tout1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ncbc_enc.c" line="146"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ncbc_enc.c" line="147"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/builtin_openssl2/crypto/cryptlib.c" line="859"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64ede.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64ede.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64ede.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c&apos; is assigned a value that is never used." verbose="Variable &apos;c&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64ede.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d0&apos; is assigned a value that is never used." verbose="Variable &apos;d0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64ede.c" line="252"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d1&apos; is assigned a value that is never used." verbose="Variable &apos;d1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64ede.c" line="252"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64ede.c" line="252"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64ede.c" line="252"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64ede.c" line="252"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64enc.c" line="118"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64enc.c" line="118"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64enc.c" line="118"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c&apos; is assigned a value that is never used." verbose="Variable &apos;c&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64enc.c" line="118"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;%&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a%b?c:d&apos;&apos; should be written as either &apos;&apos;(a%b)?c:d&apos;&apos; or &apos;&apos;a%(b?c:d)&apos;&apos;.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64ede.c" line="193"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;%&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a%b?c:d&apos;&apos; should be written as either &apos;&apos;(a%b)?c:d&apos;&apos; or &apos;&apos;a%(b?c:d)&apos;&apos;.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb64ede.c" line="231"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d0&apos; is assigned a value that is never used." verbose="Variable &apos;d0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb_enc.c" line="193"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d1&apos; is assigned a value that is never used." verbose="Variable &apos;d1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb_enc.c" line="193"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb_enc.c" line="193"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb_enc.c" line="193"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/cfb_enc.c" line="193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/des.c" line="740"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/des.c" line="757"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin0&apos; is assigned a value that is never used." verbose="Variable &apos;tin0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_enc.c" line="396"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin1&apos; is assigned a value that is never used." verbose="Variable &apos;tin1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_enc.c" line="396"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout0&apos; is assigned a value that is never used." verbose="Variable &apos;tout0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_enc.c" line="396"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout1&apos; is assigned a value that is never used." verbose="Variable &apos;tout1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_enc.c" line="396"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_enc.c" line="397"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ins" verbose="Unused variable: ins">
            <location file="drivers/builtin_openssl2/crypto/des/des.c" line="131"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: outs" verbose="Unused variable: outs">
            <location file="drivers/builtin_openssl2/crypto/des/des.c" line="131"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/des_opts.c" line="362"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/des_opts.c" line="379"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;buf&apos; is assigned a value that is never used." verbose="Variable &apos;buf&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_opts.c" line="421"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rank&apos; is assigned a value that is never used." verbose="Variable &apos;rank&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_opts.c" line="437"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;num&apos; is assigned a value that is never used." verbose="Variable &apos;num&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_opts.c" line="500"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ca&apos; is assigned a value that is never used." verbose="Variable &apos;ca&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_opts.c" line="463"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cc&apos; is assigned a value that is never used." verbose="Variable &apos;cc&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_opts.c" line="465"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cd&apos; is assigned a value that is never used." verbose="Variable &apos;cd&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_opts.c" line="466"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ce&apos; is assigned a value that is never used." verbose="Variable &apos;ce&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/des_opts.c" line="468"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/builtin_openssl2/crypto/des/destest.c" line="797"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/builtin_openssl2/crypto/des/destest.c" line="805"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/des/des_opts.c" line="1"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: cs" verbose="Unused variable: cs">
            <location file="drivers/builtin_openssl2/crypto/des/destest.c" line="342"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: cret" verbose="Unused variable: cret">
            <location file="drivers/builtin_openssl2/crypto/des/destest.c" line="343"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lqret&apos; is assigned a value that is never used." verbose="Variable &apos;lqret&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/destest.c" line="350"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: num" verbose="Unused variable: num">
            <location file="drivers/builtin_openssl2/crypto/des/destest.c" line="352"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iv2" verbose="Unused variable: iv2">
            <location file="drivers/builtin_openssl2/crypto/des/destest.c" line="338"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/des/des_opts.c" line="1"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;l&apos; is assigned a value that is never used." verbose="Variable &apos;l&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ecb_enc.c" line="121"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ll&apos; is assigned a value that is never used." verbose="Variable &apos;ll&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ecb_enc.c" line="121"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin0&apos; is assigned a value that is never used." verbose="Variable &apos;tin0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ede_cbcm_enc.c" line="196"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin1&apos; is assigned a value that is never used." verbose="Variable &apos;tin1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ede_cbcm_enc.c" line="196"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout0&apos; is assigned a value that is never used." verbose="Variable &apos;tout0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ede_cbcm_enc.c" line="196"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout1&apos; is assigned a value that is never used." verbose="Variable &apos;tout1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ede_cbcm_enc.c" line="196"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ede_cbcm_enc.c" line="197"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/des/enc_read.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/enc_writ.c" line="92"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/des/enc_writ.c" line="1"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64ede.c" line="114"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64ede.c" line="114"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64ede.c" line="114"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64ede.c" line="86"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64ede.c" line="87"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64ede.c" line="103"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64enc.c" line="107"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64enc.c" line="107"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64enc.c" line="107"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64enc.c" line="107"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64enc.c" line="84"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64enc.c" line="85"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d">
            <location file="drivers/builtin_openssl2/crypto/des/ofb64enc.c" line="96"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d0&apos; is assigned a value that is never used." verbose="Variable &apos;d0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb_enc.c" line="133"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d1&apos; is assigned a value that is never used." verbose="Variable &apos;d1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb_enc.c" line="133"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;vv0&apos; is assigned a value that is never used." verbose="Variable &apos;vv0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb_enc.c" line="133"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb_enc.c" line="133"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb_enc.c" line="133"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/ofb_enc.c" line="133"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/pcbc_enc.c" line="121"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/qud_cksm.c" line="81"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cp&apos; can be reduced." verbose="The scope of the variable &apos;cp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/qud_cksm.c" line="82"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;ps&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;ps&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="357"/>
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="335"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;i&apos; to itself." verbose="Redundant assignment of &apos;i&apos; to itself.">
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="474"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;tty&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;tty&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="303"/>
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="292"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="481"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;IOSB::iosb$w_count&apos; is never used." verbose="struct or union member &apos;IOSB::iosb$w_count&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="184"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;IOSB::iosb$l_info&apos; is never used." verbose="struct or union member &apos;IOSB::iosb$l_info&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="185"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGUSR1&apos; since the value of &apos;SIGUSR1&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGUSR1&apos; since the value of &apos;SIGUSR1&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGUSR2&apos; since the value of &apos;SIGUSR2&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGUSR2&apos; since the value of &apos;SIGUSR2&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGWINCH&apos; since the value of &apos;SIGWINCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGWINCH&apos; since the value of &apos;SIGWINCH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;TTY_get&apos; since the value of &apos;TTY_get&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;TTY_get&apos; since the value of &apos;TTY_get&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;TTY_set&apos; since the value of &apos;TTY_set&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;TTY_set&apos; since the value of &apos;TTY_set&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/des/read_pwd.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/speed.c" line="145"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/speed.c" line="162"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/str2key.c" line="66"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/des/str2key.c" line="106"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/des/speed.c" line="1"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: j" verbose="Unused variable: j">
            <location file="drivers/builtin_openssl2/crypto/des/str2key.c" line="66"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: j" verbose="Unused variable: j">
            <location file="drivers/builtin_openssl2/crypto/des/str2key.c" line="106"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/des/speed.c" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &apos;[&apos; when these macros are defined: &apos;&apos;." verbose="Invalid number of character &apos;[&apos; when these macros are defined: &apos;&apos;.">
            <location file="drivers/builtin_openssl2/crypto/des/times/usparc.cc" line="11"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin0&apos; is assigned a value that is never used." verbose="Variable &apos;tin0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/xcbc_enc.c" line="193"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin1&apos; is assigned a value that is never used." verbose="Variable &apos;tin1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/xcbc_enc.c" line="193"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout0&apos; is assigned a value that is never used." verbose="Variable &apos;tout0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/xcbc_enc.c" line="193"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout1&apos; is assigned a value that is never used." verbose="Variable &apos;tout1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/xcbc_enc.c" line="193"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/des/xcbc_enc.c" line="195"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file="drivers/builtin_openssl2/crypto/dh/dhtest.c" line="222"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/dh/dh_lib.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/dsa/dsa_lib.c" line="1"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;filespec2&apos; is redundant or there is possible null pointer dereference: filespec2." verbose="Either the condition &apos;filespec2&apos; is redundant or there is possible null pointer dereference: filespec2.">
            <location file="drivers/builtin_openssl2/crypto/dso/dso_dl.c" line="295"/>
            <location file="drivers/builtin_openssl2/crypto/dso/dso_dl.c" line="307"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;.">
            <location file="drivers/builtin_openssl2/crypto/dso/dso_dl.c" line="136"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;if(filespec2&amp;&amp;filespec2[spec2len-1]==&apos;/&apos;)&apos; is redundant or there is possible null pointer dereference: filespec2." verbose="Either the condition &apos;if(filespec2&amp;&amp;filespec2[spec2len-1]==&apos;/&apos;)&apos; is redundant or there is possible null pointer dereference: filespec2.">
            <location file="drivers/builtin_openssl2/crypto/dso/dso_dlfcn.c" line="343"/>
            <location file="drivers/builtin_openssl2/crypto/dso/dso_dlfcn.c" line="340"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;filespec2&apos; is redundant or there is possible null pointer dereference: filespec2." verbose="Either the condition &apos;filespec2&apos; is redundant or there is possible null pointer dereference: filespec2.">
            <location file="drivers/builtin_openssl2/crypto/dso/dso_dlfcn.c" line="343"/>
            <location file="drivers/builtin_openssl2/crypto/dso/dso_dlfcn.c" line="355"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/dso/dso_lib.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DEF_DSO_METHOD&apos; since the value of &apos;DEF_DSO_METHOD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DEF_DSO_METHOD&apos; since the value of &apos;DEF_DSO_METHOD&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/dso/dso_openssl.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DSO_DLFCN;RTLD_GLOBAL&apos; since the value of &apos;RTLD_GLOBAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DSO_DLFCN;RTLD_GLOBAL&apos; since the value of &apos;RTLD_GLOBAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/dso/dso_dlfcn.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DSO_WIN32;MODULEENTRY32&apos; since the value of &apos;MODULEENTRY32&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DSO_WIN32;MODULEENTRY32&apos; since the value of &apos;MODULEENTRY32&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/dso/dso_win32.c" line="1"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/builtin_openssl2/crypto/dso/dso_win32.c" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ec/ec_asn1.c" line="696"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ec/ec_asn1.c" line="1022"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/ec/ec_key.c" line="1"/>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite conditions in nested &apos;if&apos; blocks lead to a dead code block." verbose="Opposite conditions in nested &apos;if&apos; blocks lead to a dead code block.">
            <location file="drivers/builtin_openssl2/crypto/ec/ec_mult.c" line="516"/>
            <location file="drivers/builtin_openssl2/crypto/ec/ec_mult.c" line="505"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cval&apos; can be reduced." verbose="The scope of the variable &apos;cval&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/engine/eng_cnf.c" line="219"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new_idx&apos; is assigned a value that is never used." verbose="Variable &apos;new_idx&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/engine/eng_dyn.c" line="253"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PhysicsShapeQueryParameters::layer_mask&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;PhysicsShapeQueryParameters::layer_mask&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;.">
            <location file="servers/physics_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PhysicsShapeQueryParameters::object_type_mask&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;PhysicsShapeQueryParameters::object_type_mask&apos; is not assigned a value in &apos;PhysicsShapeQueryParameters::operator=&apos;.">
            <location file="servers/physics_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DShapeQueryParameters::layer_mask&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;Physics2DShapeQueryParameters::layer_mask&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Physics2DShapeQueryParameters::object_type_mask&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;." verbose="Member variable &apos;Physics2DShapeQueryParameters::object_type_mask&apos; is not assigned a value in &apos;Physics2DShapeQueryParameters::operator=&apos;.">
            <location file="servers/physics_2d_server.h" line="93"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::tree_version&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::tree_version&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::last_id&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::last_id&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;SceneTree::current_frame&apos; is not assigned a value in &apos;SceneTree::operator=&apos;." verbose="Member variable &apos;SceneTree::current_frame&apos; is not assigned a value in &apos;SceneTree::operator=&apos;.">
            <location file="scene/main/scene_main_loop.h" line="53"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;ImageTexture::flags&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;." verbose="Member variable &apos;ImageTexture::flags&apos; is not assigned a value in &apos;ImageTexture::operator=&apos;.">
            <location file="scene/resources/texture.h" line="88"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;CubeMap::flags&apos; is not assigned a value in &apos;CubeMap::operator=&apos;." verbose="Member variable &apos;CubeMap::flags&apos; is not assigned a value in &apos;CubeMap::operator=&apos;.">
            <location file="scene/resources/texture.h" line="258"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/engine/tb_asnmth.c" line="154"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/engine/tb_pkmeth.c" line="152"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmpp&apos; can be reduced." verbose="The scope of the variable &apos;tmpp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/err/err.c" line="1007"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/err/err.c" line="1008"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/err/err.c" line="1077"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ppmd&apos; can be reduced." verbose="The scope of the variable &apos;ppmd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/bio_md.c" line="175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/bio_ok.c" line="215"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/bio_ok.c" line="300"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ppmd&apos; can be reduced." verbose="The scope of the variable &apos;ppmd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/bio_ok.c" line="367"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/bio_ok.c" line="369"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: type. &apos;!type || (type &amp;&amp; type.type==ctx.digest.type)&apos; is equivalent to &apos;!type || type.type==ctx.digest.type&apos;" verbose="Redundant condition: type. &apos;!type || (type &amp;&amp; type.type==ctx.digest.type)&apos; is equivalent to &apos;!type || type.type==ctx.digest.type&apos;">
            <location file="drivers/builtin_openssl2/crypto/evp/digest.c" line="153"/>
        </error>
        <error id="duplicateBranch" severity="style" msg="Found duplicate branches for &apos;if&apos; and &apos;else&apos;." verbose="Finding the same code in an &apos;if&apos; and related &apos;else&apos; branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/evp/e_aes.c" line="581"/>
            <location file="drivers/builtin_openssl2/crypto/evp/e_aes.c" line="583"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_aes.c" line="689"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;EVP_AES_HMAC_SHA1::payload_length&apos; is never used." verbose="struct or union member &apos;EVP_AES_HMAC_SHA1::payload_length&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_aes_cbc_hmac_sha1.c" line="79"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Anonymous0::tls_ver&apos; is never used." verbose="struct or union member &apos;Anonymous0::tls_ver&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_aes_cbc_hmac_sha1.c" line="81"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Anonymous0::tls_aad&apos; is never used." verbose="struct or union member &apos;Anonymous0::tls_aad&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_aes_cbc_hmac_sha1.c" line="82"/>
        </error>
        <error id="invalidPrintfArgType_int" severity="warning" msg="%lx in format string (no. 1) requires &apos;unsigned long&apos; but the argument type is &apos;EVP_CIPHER_CTX *&apos;." verbose="%lx in format string (no. 1) requires &apos;unsigned long&apos; but the argument type is &apos;EVP_CIPHER_CTX *&apos;.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_des3.c" line="128"/>
        </error>
        <error id="invalidPrintfArgType_int" severity="warning" msg="%lx in format string (no. 1) requires &apos;unsigned long&apos; but the argument type is &apos;EVP_CIPHER_CTX *&apos;." verbose="%lx in format string (no. 1) requires &apos;unsigned long&apos; but the argument type is &apos;EVP_CIPHER_CTX *&apos;.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_des3.c" line="263"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: cp" verbose="Unused variable: cp">
            <location file="drivers/builtin_openssl2/crypto/evp/e_des3.c" line="127"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;key_bits&apos; can be reduced." verbose="The scope of the variable &apos;key_bits&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_rc2.c" line="172"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_rc2.c" line="173"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;iv&apos; can be reduced." verbose="The scope of the variable &apos;iv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_rc2.c" line="174"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;num&apos; can be reduced." verbose="The scope of the variable &apos;num&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_rc2.c" line="196"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_rc2.c" line="197"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mac&apos; can be reduced." verbose="The scope of the variable &apos;mac&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/e_rc4_hmac_md5.c" line="172"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oval&apos; can be reduced." verbose="The scope of the variable &apos;oval&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/evp_cnf.c" line="79"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/encode.c" line="134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/encode.c" line="361"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b&apos; can be reduced." verbose="The scope of the variable &apos;b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/encode.c" line="361"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/encode.c" line="361"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/encode.c" line="361"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/encode.c" line="362"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/encode.c" line="401"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: cipher. &apos;!cipher || (cipher &amp;&amp; cipher.nid==ctx.cipher.nid)&apos; is equivalent to &apos;!cipher || cipher.nid==ctx.cipher.nid&apos;" verbose="Redundant condition: cipher. &apos;!cipher || (cipher &amp;&amp; cipher.nid==ctx.cipher.nid)&apos; is equivalent to &apos;!cipher || cipher.nid==ctx.cipher.nid&apos;">
            <location file="drivers/builtin_openssl2/crypto/evp/evp_enc.c" line="119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/evp_enc.c" line="310"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/evp_enc.c" line="503"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bad&apos; is assigned a value that is never used." verbose="Variable &apos;bad&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/evp/encode.c" line="419"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/evp_lib.c" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/evp_lib.c" line="111"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/evp_pbe.c" line="278"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/builtin_openssl2/crypto/evp/evp_test.c" line="301"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/builtin_openssl2/crypto/evp/evp_test.c" line="301"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tpbe&apos; can be reduced." verbose="The scope of the variable &apos;tpbe&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/evp_pbe.c" line="132"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tpbe2" verbose="Unused variable: tpbe2">
            <location file="drivers/builtin_openssl2/crypto/evp/evp_pbe.c" line="132"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/m_sigver.c" line="133"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/evp/p_lib.c" line="166"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/evp/p_lib.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inc&apos; can be reduced." verbose="The scope of the variable &apos;inc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/hmac/hm_ameth.c" line="119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/hmac/hmactest.c" line="128"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin0&apos; is assigned a value that is never used." verbose="Variable &apos;tin0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_cbc.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin1&apos; is assigned a value that is never used." verbose="Variable &apos;tin1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_cbc.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout0&apos; is assigned a value that is never used." verbose="Variable &apos;tout0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_cbc.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout1&apos; is assigned a value that is never used." verbose="Variable &apos;tout1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_cbc.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_cbc.c" line="133"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;l0&apos; is assigned a value that is never used." verbose="Variable &apos;l0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_ecb.c" line="83"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;l1&apos; is assigned a value that is never used." verbose="Variable &apos;l1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_ecb.c" line="83"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d&apos; is assigned a value that is never used." verbose="Variable &apos;d&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_ecb.c" line="83"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_ofb64.c" line="108"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_ofb64.c" line="108"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_ofb64.c" line="108"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;d&apos; is not assigned a value." verbose="Variable &apos;d&apos; is not assigned a value.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_ofb64.c" line="73"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_ofb64.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n1&apos; can be reduced." verbose="The scope of the variable &apos;n1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_skey.c" line="137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n2&apos; can be reduced." verbose="The scope of the variable &apos;n2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_skey.c" line="137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;q&apos; can be reduced." verbose="The scope of the variable &apos;q&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_skey.c" line="137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_skey.c" line="137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b1&apos; can be reduced." verbose="The scope of the variable &apos;b1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_skey.c" line="137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/idea/i_skey.c" line="137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/idea/idea_spd.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/idea/idea_spd.c" line="157"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/idea/idea_spd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/idea/idea_spd.c" line="1"/>
        </error>
        <error id="charBitOp" severity="warning" msg="When using &apos;char&apos; variables in bit operations, sign extension can generate unexpected results." verbose="When using &apos;char&apos; variables in bit operations, sign extension can generate unexpected results. For example:\012    char c = 0x80;\012    int i = 0 | c;\012    if (i &amp; 0x8000)\012        printf(&quot;not expected&quot;);\012The &quot;not expected&quot; will be printed on the screen.">
            <location file="drivers/builtin_openssl2/crypto/lhash/lhash.c" line="461"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/lhash/lhash.c" line="313"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/lhash/lhash.c" line="313"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hash&apos; can be reduced." verbose="The scope of the variable &apos;hash&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/lhash/lhash.c" line="314"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/lhash/lhash.c" line="447"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/lhash/lhash.c" line="448"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md2/md2.c" line="71"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;IN&apos; can be reduced." verbose="The scope of the variable &apos;IN&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md2/md2.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md2/md2.c" line="102"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;chunk&apos; can be reduced." verbose="The scope of the variable &apos;chunk&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md2/md2_one.c" line="79"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md2/md2test.c" line="105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md4/md4.c" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;IN&apos; can be reduced." verbose="The scope of the variable &apos;IN&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md4/md4.c" line="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md4/md4.c" line="104"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;chunk&apos; can be reduced." verbose="The scope of the variable &apos;chunk&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md4/md4_one.c" line="81"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: k" verbose="Unused variable: k">
            <location file="drivers/builtin_openssl2/crypto/md4/md4s.cpp" line="46"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: data" verbose="Unused variable: data">
            <location file="drivers/builtin_openssl2/crypto/md4/md4s.cpp" line="47"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iv" verbose="Unused variable: iv">
            <location file="drivers/builtin_openssl2/crypto/md4/md4s.cpp" line="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md4/md4test.c" line="101"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md5/md5.c" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;IN&apos; can be reduced." verbose="The scope of the variable &apos;IN&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md5/md5.c" line="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md5/md5.c" line="104"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;md4_block_data_order&apos; since the value of &apos;md4_block_data_order&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;md4_block_data_order&apos; since the value of &apos;md4_block_data_order&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/md4/md4_dgst.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;chunk&apos; can be reduced." verbose="The scope of the variable &apos;chunk&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md5/md5_one.c" line="81"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: k" verbose="Unused variable: k">
            <location file="drivers/builtin_openssl2/crypto/md5/md5s.cpp" line="46"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: data" verbose="Unused variable: data">
            <location file="drivers/builtin_openssl2/crypto/md5/md5s.cpp" line="47"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iv" verbose="Unused variable: iv">
            <location file="drivers/builtin_openssl2/crypto/md5/md5s.cpp" line="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/md5/md5test.c" line="101"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/mdc2/mdc2dgst.c" line="130"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mp&apos; can be reduced." verbose="The scope of the variable &apos;mp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/mem_dbg.c" line="571"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mp&apos; can be reduced." verbose="The scope of the variable &apos;mp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/mem_dbg.c" line="608"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lcl&apos; can be reduced." verbose="The scope of the variable &apos;lcl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/mem_dbg.c" line="670"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_openssl2/crypto/mem_dbg.c" line="532"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_openssl2/crypto/mem_dbg.c" line="588"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_openssl2/crypto/mem_dbg.c" line="638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/modes/cbc128.c" line="172"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/modes/cbc128.c" line="189"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/modes/ccm128.c" line="158"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/modes/ctr128.c" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/modes/ctr128.c" line="81"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/modes/ctr128.c" line="179"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Anonymous2::align&apos; is never used." verbose="struct or union member &apos;Anonymous2::align&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="91"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Anonymous3::align&apos; is never used." verbose="struct or union member &apos;Anonymous3::align&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="123"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Anonymous4::align&apos; is never used." verbose="struct or union member &apos;Anonymous4::align&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="154"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Anonymous5::align&apos; is never used." verbose="struct or union member &apos;Anonymous5::align&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="191"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Anonymous6::align&apos; is never used." verbose="struct or union member &apos;Anonymous6::align&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="234"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Anonymous7::align&apos; is never used." verbose="struct or union member &apos;Anonymous7::align&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="268"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tmp" verbose="Uninitialized variable: tmp">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="170"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tmp" verbose="Uninitialized variable: tmp">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="212"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: tmp" verbose="Unused variable: tmp">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="123"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rem&apos; can be reduced." verbose="The scope of the variable &apos;rem&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/modes/gcm128.c" line="339"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnt&apos; can be reduced." verbose="The scope of the variable &apos;cnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/modes/gcm128.c" line="410"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nlo&apos; can be reduced." verbose="The scope of the variable &apos;nlo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/modes/gcm128.c" line="411"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nhi&apos; can be reduced." verbose="The scope of the variable &apos;nhi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/modes/gcm128.c" line="411"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;out_t&apos; is assigned a value that is never used." verbose="Variable &apos;out_t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/modes/gcm128.c" line="1182"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;in_t&apos; is assigned a value that is never used." verbose="Variable &apos;in_t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/modes/gcm128.c" line="1183"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="344"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="353"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="355"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="361"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="363"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="369"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="371"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="377"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="379"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="387"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="403"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="405"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="411"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="413"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="419"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="421"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="427"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/crypto/modes/cts128.c" line="429"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;BSWAP4&apos; since the value of &apos;BSWAP4&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;BSWAP4&apos; since the value of &apos;BSWAP4&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/modes/gcm128.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;BSWAP4;STRICT_ALIGNMENT&apos; since the value of &apos;BSWAP4&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;BSWAP4;STRICT_ALIGNMENT&apos; since the value of &apos;BSWAP4&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/modes/gcm128.c" line="1"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;status&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;status&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="196"/>
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="191"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;status&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;status&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="199"/>
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="196"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;status&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;status&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="210"/>
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="199"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;status&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;status&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="215"/>
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="210"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Anonymous0::code&apos; is never used." verbose="struct or union member &apos;Anonymous0::code&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="107"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;vms_vectime::centi_second&apos; is never used." verbose="struct or union member &apos;vms_vectime::centi_second&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="179"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;logvalue&apos; is assigned a value that is never used." verbose="Variable &apos;logvalue&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="124"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;status&apos; is assigned a value that is never used." verbose="Variable &apos;status&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/o_time.c" line="215"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: stop" verbose="Unused variable: stop">
            <location file="drivers/builtin_openssl2/crypto/modes/gcm128.c" line="1862"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i">
            <location file="drivers/builtin_openssl2/crypto/modes/gcm128.c" line="1864"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;adp&apos; can be reduced." verbose="The scope of the variable &apos;adp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/objects/obj_dat.c" line="401"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;adp&apos; can be reduced." verbose="The scope of the variable &apos;adp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/objects/obj_dat.c" line="642"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;adp&apos; can be reduced." verbose="The scope of the variable &apos;adp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/objects/obj_dat.c" line="662"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/objects/obj_dat.c" line="738"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;single&apos; can be reduced." verbose="The scope of the variable &apos;single&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ocsp/ocsp_cl.c" line="239"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ocsp/ocsp_vfy.c" line="193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sca&apos; can be reduced." verbose="The scope of the variable &apos;sca&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ocsp/ocsp_vfy.c" line="219"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmpid&apos; can be reduced." verbose="The scope of the variable &apos;tmpid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ocsp/ocsp_vfy.c" line="263"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ocsp/ocsp_vfy.c" line="335"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmpid&apos; can be reduced." verbose="The scope of the variable &apos;tmpid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ocsp/ocsp_vfy.c" line="336"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="drivers/builtin_openssl2/crypto/pem/pem_lib.c" line="533"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ameth&apos; can be reduced." verbose="The scope of the variable &apos;ameth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pem/pem_lib.c" line="195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ameth&apos; can be reduced." verbose="The scope of the variable &apos;ameth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pem/pem_lib.c" line="217"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p8&apos; can be reduced." verbose="The scope of the variable &apos;p8&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pem/pem_pk8.c" line="116"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file="drivers/builtin_openssl2/crypto/pem/pvkfmt.c" line="682"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pem/pvkfmt.c" line="453"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pvk_magic&apos; can be reduced." verbose="The scope of the variable &apos;pvk_magic&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pem/pvkfmt.c" line="665"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;attrib&apos; can be reduced." verbose="The scope of the variable &apos;attrib&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs12/p12_attr.c" line="123"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;if(unipass)&apos; is redundant or there is possible null pointer dereference: pass." verbose="Either the condition &apos;if(unipass)&apos; is redundant or there is possible null pointer dereference: pass.">
            <location file="drivers/builtin_openssl2/crypto/pkcs12/p12_key.c" line="96"/>
            <location file="drivers/builtin_openssl2/crypto/pkcs12/p12_key.c" line="153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bagnid&apos; can be reduced." verbose="The scope of the variable &apos;bagnid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs12/p12_kiss.c" line="184"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p7&apos; can be reduced." verbose="The scope of the variable &apos;p7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs12/p12_kiss.c" line="185"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs12/p12_kiss.c" line="269"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/bio_ber.c" line="158"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/bio_ber.c" line="159"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/bio_ber.c" line="159"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;ber_struct::class&apos; is never used." verbose="struct or union member &apos;ber_struct::class&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/bio_ber.c" line="79"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;ber_struct::length&apos; is never used." verbose="struct or union member &apos;ber_struct::length&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/bio_ber.c" line="80"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;ber_struct::inf&apos; is never used." verbose="struct or union member &apos;ber_struct::inf&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/bio_ber.c" line="81"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;b&apos; is assigned a value that is never used." verbose="Variable &apos;b&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/bio_ber.c" line="147"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/example.c" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/example.c" line="213"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/pk7_doit.c" line="395"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;xa&apos; can be reduced." verbose="The scope of the variable &apos;xa&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/pk7_doit.c" line="1182"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sitmp&apos; can be reduced." verbose="The scope of the variable &apos;sitmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/pk7_smime.c" line="239"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/pk7_smime.c" line="537"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/pkcs7/pk7_smime.c" line="538"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGEMT&apos; since the value of &apos;SIGEMT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGEMT&apos; since the value of &apos;SIGEMT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/ppccap.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_AIX;_SC_AIX_KERNEL_BITMODE&apos; since the value of &apos;_SC_AIX_KERNEL_BITMODE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_AIX;_SC_AIX_KERNEL_BITMODE&apos; since the value of &apos;_SC_AIX_KERNEL_BITMODE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/ppccap.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rand/md_rand.c" line="195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rand/md_rand.c" line="340"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rand/md_rand.c" line="340"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EAGAIN&apos; since the value of &apos;EAGAIN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EAGAIN&apos; since the value of &apos;EAGAIN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rand/rand_egd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EALREADY&apos; since the value of &apos;EALREADY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EALREADY&apos; since the value of &apos;EALREADY&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rand/rand_egd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EINPROGRESS&apos; since the value of &apos;EINPROGRESS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EINPROGRESS&apos; since the value of &apos;EINPROGRESS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rand/rand_egd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EINTR&apos; since the value of &apos;EINTR&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rand/rand_egd.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;EISCONN&apos; since the value of &apos;EISCONN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;EISCONN&apos; since the value of &apos;EISCONN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rand/rand_egd.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;failed_module&apos; can be reduced." verbose="The scope of the variable &apos;failed_module&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rand/rand_os2.c" line="89"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rand/rand_os2.c" line="94"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DEFAULT_HOME&apos; since the value of &apos;DEFAULT_HOME&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DEFAULT_HOME&apos; since the value of &apos;DEFAULT_HOME&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rand/randfile.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;good&apos; can be reduced." verbose="The scope of the variable &apos;good&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rand/rand_win.c" line="197"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rand/rand_win.c" line="750"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;O_CREAT&apos; since the value of &apos;O_CREAT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;O_CREAT&apos; since the value of &apos;O_CREAT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rand/randfile.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;S_IFBLK;S_IFCHR&apos; since the value of &apos;S_IFBLK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;S_IFBLK;S_IFCHR&apos; since the value of &apos;S_IFBLK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rand/randfile.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;S_ISBLK;S_ISCHR&apos; since the value of &apos;S_ISBLK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;S_ISBLK;S_ISCHR&apos; since the value of &apos;S_ISBLK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rand/randfile.c" line="1"/>
        </error>
        <error id="invalidPrintfArgType_float" severity="warning" msg="%f in format string (no. 1) requires &apos;double&apos; but the argument type is &apos;long&apos;." verbose="%f in format string (no. 1) requires &apos;double&apos; but the argument type is &apos;long&apos;.">
            <location file="drivers/builtin_openssl2/crypto/rand/randtest.c" line="141"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;l&apos; is assigned a value that is never used." verbose="Variable &apos;l&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2_ecb.c" line="86"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d&apos; is assigned a value that is never used." verbose="Variable &apos;d&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2_ecb.c" line="86"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin0&apos; is assigned a value that is never used." verbose="Variable &apos;tin0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2_cbc.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin1&apos; is assigned a value that is never used." verbose="Variable &apos;tin1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2_cbc.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout0&apos; is assigned a value that is never used." verbose="Variable &apos;tout0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2_cbc.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout1&apos; is assigned a value that is never used." verbose="Variable &apos;tout1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2_cbc.c" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2_cbc.c" line="133"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2ofb64.c" line="108"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2ofb64.c" line="108"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2ofb64.c" line="108"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;d&apos; is not assigned a value." verbose="Variable &apos;d&apos; is not assigned a value.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2ofb64.c" line="73"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2ofb64.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2speed.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2speed.c" line="157"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2speed.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rc2/rc2speed.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;RC4_CHUNK&apos; since the value of &apos;RC4_CHUNK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;RC4_CHUNK&apos; since the value of &apos;RC4_CHUNK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rc4/rc4_enc.c" line="1"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: k" verbose="Unused variable: k">
            <location file="drivers/builtin_openssl2/crypto/rc4/rc4s.cpp" line="42"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: data" verbose="Unused variable: data">
            <location file="drivers/builtin_openssl2/crypto/rc4/rc4s.cpp" line="43"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iv" verbose="Unused variable: iv">
            <location file="drivers/builtin_openssl2/crypto/rc4/rc4s.cpp" line="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rc4/rc4speed.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rc4/rc4speed.c" line="157"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: b" verbose="Unused variable: b">
            <location file="drivers/builtin_openssl2/crypto/rc4/rc4speed.c" line="183"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: cb" verbose="Unused variable: cb">
            <location file="drivers/builtin_openssl2/crypto/rc4/rc4speed.c" line="185"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: data" verbose="Unused variable: data">
            <location file="drivers/builtin_openssl2/crypto/rc4/rc4speed.c" line="199"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rc4/rc4speed.c" line="1"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;l&apos; is assigned a value that is never used." verbose="Variable &apos;l&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5_ecb.c" line="78"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d&apos; is assigned a value that is never used." verbose="Variable &apos;d&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5_ecb.c" line="78"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rc4/rc4speed.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m&apos; can be reduced." verbose="The scope of the variable &apos;m&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5_skey.c" line="66"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5cfb64.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0&apos; is assigned a value that is never used." verbose="Variable &apos;v0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5ofb64.c" line="108"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1&apos; is assigned a value that is never used." verbose="Variable &apos;v1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5ofb64.c" line="108"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5ofb64.c" line="108"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;d&apos; is not assigned a value." verbose="Variable &apos;d&apos; is not assigned a value.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5ofb64.c" line="73"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ti&apos; is assigned a value that is never used." verbose="Variable &apos;ti&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5ofb64.c" line="108"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin0&apos; is assigned a value that is never used." verbose="Variable &apos;tin0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5_enc.c" line="134"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin1&apos; is assigned a value that is never used." verbose="Variable &apos;tin1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5_enc.c" line="134"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout0&apos; is assigned a value that is never used." verbose="Variable &apos;tout0&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5_enc.c" line="134"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tout1&apos; is assigned a value that is never used." verbose="Variable &apos;tout1&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5_enc.c" line="134"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tin&apos; is assigned a value that is never used." verbose="Variable &apos;tin&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5_enc.c" line="135"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5speed.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5speed.c" line="157"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;LINT;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5speed.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGALRM&apos; since the value of &apos;SIGALRM&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rc5/rc5speed.c" line="1"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: k" verbose="Unused variable: k">
            <location file="drivers/builtin_openssl2/crypto/ripemd/asm/rips.cpp" line="48"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: data" verbose="Unused variable: data">
            <location file="drivers/builtin_openssl2/crypto/ripemd/asm/rips.cpp" line="49"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: iv" verbose="Unused variable: iv">
            <location file="drivers/builtin_openssl2/crypto/ripemd/asm/rips.cpp" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ripemd/rmd160.c" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;IN&apos; can be reduced." verbose="The scope of the variable &apos;IN&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ripemd/rmd160.c" line="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ripemd/rmd160.c" line="104"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ripemd/rmdtest.c" line="107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b&apos; can be reduced." verbose="The scope of the variable &apos;b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rsa/rsa_lib.c" line="294"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/rsa/rsa_lib.c" line="1"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/rsa/rsa_pk1.c" line="198"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="drivers/builtin_openssl2/crypto/rsa/rsa_pss.c" line="148"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/rsa/rsa_x931.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/sha/sha.c" line="70"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;IN&apos; can be reduced." verbose="The scope of the variable &apos;IN&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/sha/sha.c" line="71"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/sha/sha.c" line="101"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/sha/sha1.c" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;IN&apos; can be reduced." verbose="The scope of the variable &apos;IN&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/sha/sha1.c" line="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/sha/sha1.c" line="104"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bn_mul_mont_fpu&apos; can be reduced." verbose="The scope of the variable &apos;bn_mul_mont_fpu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/sparcv9cap.c" line="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bn_mul_mont_int&apos; can be reduced." verbose="The scope of the variable &apos;bn_mul_mont_int&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/sparcv9cap.c" line="20"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SIGEMT&apos; since the value of &apos;SIGEMT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SIGEMT&apos; since the value of &apos;SIGEMT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/sparcv9cap.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t0&apos; can be reduced." verbose="The scope of the variable &apos;t0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/seed/seed.c" line="252"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t1&apos; can be reduced." verbose="The scope of the variable &apos;t1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/seed/seed.c" line="252"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t0&apos; can be reduced." verbose="The scope of the variable &apos;t0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/seed/seed.c" line="295"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t1&apos; can be reduced." verbose="The scope of the variable &apos;t1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/seed/seed.c" line="295"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/srp/srp_vfy.c" line="131"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/srp/srp_vfy.c" line="318"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;gN&apos; can be reduced." verbose="The scope of the variable &apos;gN&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/srp/srp_vfy.c" line="320"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;j&apos; is used before limits check." verbose="Defensive programming: The variable &apos;j&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="drivers/builtin_openssl2/crypto/srp/srp_vfy.c" line="119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/stack/stack.c" line="193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/stack/stack.c" line="193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/stack/stack.c" line="216"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SS&apos; since the value of &apos;SS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SS&apos; since the value of &apos;SS&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/seed/seed.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/store/str_mem.c" line="271"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="475"/>
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="475"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="616"/>
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="616"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="670"/>
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="670"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="811"/>
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="811"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Anonymous0::any&apos; is never used." verbose="struct or union member &apos;Anonymous0::any&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="1271"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/threads/mttest.c" line="373"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/threads/mttest.c" line="701"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/threads/mttest.c" line="701"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;e&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;e&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="140"/>
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="136"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/store/str_lib.c" line="1"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;thread_ctx&apos; is assigned a value that is never used." verbose="Variable &apos;thread_ctx&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/threads/mttest.c" line="1001"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;critical&apos; can be reduced." verbose="The scope of the variable &apos;critical&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ts/ts_lib.c" line="102"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ex&apos; can be reduced." verbose="The scope of the variable &apos;ex&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ts/ts_lib.c" line="103"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;obj&apos; can be reduced." verbose="The scope of the variable &apos;obj&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ts/ts_lib.c" line="104"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses.">
            <location file="drivers/builtin_openssl2/crypto/ts/ts_rsp_verify.c" line="705"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;.">
            <location file="drivers/builtin_openssl2/crypto/ts/ts_rsp_sign.c" line="769"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/txt_db/txt_db.c" line="221"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/txt_db/txt_db.c" line="347"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max&apos; can be reduced." verbose="The scope of the variable &apos;max&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/txt_db/txt_db.c" line="348"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/ui/ui_openssl.c" line="677"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_&apos; since the value of &apos;_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_&apos; since the value of &apos;_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/ui/ui_lib.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_&apos; since the value of &apos;_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_&apos; since the value of &apos;_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/ui/ui_util.c" line="1"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;IOSB::iosb$w_count&apos; is never used." verbose="struct or union member &apos;IOSB::iosb$w_count&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/ui/ui_openssl.c" line="262"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;IOSB::iosb$l_info&apos; is never used." verbose="struct or union member &apos;IOSB::iosb$l_info&apos; is never used.">
            <location file="drivers/builtin_openssl2/crypto/ui/ui_openssl.c" line="263"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L0&apos; can be reduced." verbose="The scope of the variable &apos;L0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/whrlpool/wp_block.c" line="504"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L1&apos; can be reduced." verbose="The scope of the variable &apos;L1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/whrlpool/wp_block.c" line="504"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L2&apos; can be reduced." verbose="The scope of the variable &apos;L2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/whrlpool/wp_block.c" line="504"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L3&apos; can be reduced." verbose="The scope of the variable &apos;L3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/whrlpool/wp_block.c" line="504"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L4&apos; can be reduced." verbose="The scope of the variable &apos;L4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/whrlpool/wp_block.c" line="504"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L5&apos; can be reduced." verbose="The scope of the variable &apos;L5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/whrlpool/wp_block.c" line="504"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L6&apos; can be reduced." verbose="The scope of the variable &apos;L6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/whrlpool/wp_block.c" line="504"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L7&apos; can be reduced." verbose="The scope of the variable &apos;L7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/whrlpool/wp_block.c" line="504"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ps&apos; is assigned a value that is never used." verbose="Variable &apos;ps&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/ui/ui_openssl.c" line="418"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;maxsize&apos; is assigned a value that is never used." verbose="Variable &apos;maxsize&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/crypto/ui/ui_openssl.c" line="421"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;TTY_get&apos; since the value of &apos;TTY_get&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;TTY_get&apos; since the value of &apos;TTY_get&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/ui/ui_openssl.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;TTY_set&apos; since the value of &apos;TTY_set&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;TTY_set&apos; since the value of &apos;TTY_set&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/ui/ui_openssl.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;_&apos; since the value of &apos;_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;_&apos; since the value of &apos;_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/crypto/ui/ui_openssl.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/whrlpool/wp_dgst.c" line="87"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dir&apos; can be reduced." verbose="The scope of the variable &apos;dir&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/by_dir.c" line="129"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;c&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;c&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/crypto/x509/by_dir.c" line="362"/>
            <location file="drivers/builtin_openssl2/crypto/x509/by_dir.c" line="360"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;file&apos; can be reduced." verbose="The scope of the variable &apos;file&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/by_file.c" line="96"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;itmp&apos; can be reduced." verbose="The scope of the variable &apos;itmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/by_file.c" line="267"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ex&apos; can be reduced." verbose="The scope of the variable &apos;ex&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_att.c" line="87"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x509&apos; can be reduced." verbose="The scope of the variable &apos;x509&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_cmp.c" line="269"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x509&apos; can be reduced." verbose="The scope of the variable &apos;x509&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_cmp.c" line="288"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lu&apos; can be reduced." verbose="The scope of the variable &apos;lu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_lu.c" line="236"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lu&apos; can be reduced." verbose="The scope of the variable &apos;lu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_lu.c" line="293"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_lu.c" line="295"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_lu.c" line="295"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_lu.c" line="628"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_obj.c" line="119"/>
            <location file="drivers/builtin_openssl2/crypto/x509/x509_obj.c" line="122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nid&apos; can be reduced." verbose="The scope of the variable &apos;nid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_req.c" line="168"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ex&apos; can be reduced." verbose="The scope of the variable &apos;ex&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_v3.c" line="88"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ex&apos; can be reduced." verbose="The scope of the variable &apos;ex&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_v3.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oid&apos; can be reduced." verbose="The scope of the variable &apos;oid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_vpm.c" line="277"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;doid&apos; can be reduced." verbose="The scope of the variable &apos;doid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_vpm.c" line="277"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_vpm.c" line="393"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ptmp&apos; can be reduced." verbose="The scope of the variable &apos;ptmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_vpm.c" line="394"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_vpm.c" line="418"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509cset.c" line="123"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ne&apos; can be reduced." verbose="The scope of the variable &apos;ne&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509name.c" line="112"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509name.c" line="141"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_vfy.c" line="427"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;issuer&apos; can be reduced." verbose="The scope of the variable &apos;issuer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_vfy.c" line="401"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ok&apos; can be reduced." verbose="The scope of the variable &apos;ok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_vfy.c" line="671"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;crl_score&apos; can be reduced." verbose="The scope of the variable &apos;crl_score&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_vfy.c" line="834"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_vfy.c" line="1687"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ktmp2&apos; can be reduced." verbose="The scope of the variable &apos;ktmp2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509/x509_vfy.c" line="1791"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;node&apos; can be reduced." verbose="The scope of the variable &apos;node&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_node.c" line="98"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;policy_oid&apos; can be reduced." verbose="The scope of the variable &apos;policy_oid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_node.c" line="178"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;if(tree)&apos; is redundant or there is possible null pointer dereference: tree." verbose="Either the condition &apos;if(tree)&apos; is redundant or there is possible null pointer dereference: tree." inconclusive="true">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_tree.c" line="853"/>
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_tree.c" line="593"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;node&apos; can be reduced." verbose="The scope of the variable &apos;node&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_tree.c" line="314"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;data&apos; can be reduced." verbose="The scope of the variable &apos;data&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_tree.c" line="344"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_tree.c" line="408"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;node&apos; can be reduced." verbose="The scope of the variable &apos;node&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_tree.c" line="448"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;anyptr&apos; can be reduced." verbose="The scope of the variable &apos;anyptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_tree.c" line="590"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;node&apos; can be reduced." verbose="The scope of the variable &apos;node&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_tree.c" line="637"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_tree.c" line="698"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cache&apos; can be reduced." verbose="The scope of the variable &apos;cache&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_tree.c" line="700"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oid&apos; can be reduced." verbose="The scope of the variable &apos;oid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/pcy_tree.c" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_alt.c" line="180"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_bitst.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext&apos; can be reduced." verbose="The scope of the variable &apos;ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_conf.c" line="328"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_conf.c" line="330"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pinfo&apos; can be reduced." verbose="The scope of the variable &apos;pinfo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_cpols.c" line="369"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qualinfo&apos; can be reduced." verbose="The scope of the variable &apos;qualinfo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_cpols.c" line="385"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_cpols.c" line="414"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;objtmp&apos; can be reduced." verbose="The scope of the variable &apos;objtmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_extku.c" line="122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;point&apos; can be reduced." verbose="The scope of the variable &apos;point&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_crld.c" line="567"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ne&apos; can be reduced." verbose="The scope of the variable &apos;ne&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_crld.c" line="591"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: not" verbose="Uninitialized variable: not">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_cpols.c" line="282"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: not" verbose="Uninitialized variable: not">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_cpols.c" line="304"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: nref" verbose="Uninitialized variable: nref">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_cpols.c" line="294"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: nref" verbose="Uninitialized variable: nref">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_cpols.c" line="305"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tree&apos; can be reduced." verbose="The scope of the variable &apos;tree&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_ncons.c" line="180"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pmap&apos; can be reduced." verbose="The scope of the variable &apos;pmap&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_pmaps.c" line="118"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_pmaps.c" line="120"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nval&apos; can be reduced." verbose="The scope of the variable &apos;nval&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_prn.c" line="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_prn.c" line="167"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cnf&apos; can be reduced." verbose="The scope of the variable &apos;cnf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_sxnet.c" line="134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;id&apos; can be reduced." verbose="The scope of the variable &apos;id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_sxnet.c" line="252"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;xptmp&apos; can be reduced." verbose="The scope of the variable &apos;xptmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_purp.c" line="151"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ex&apos; can be reduced." verbose="The scope of the variable &apos;ex&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_purp.c" line="364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext&apos; can be reduced." verbose="The scope of the variable &apos;ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3conf.c" line="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3_utl.c" line="807"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext&apos; can be reduced." verbose="The scope of the variable &apos;ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/crypto/x509v3/v3prin.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sslp&apos; can be reduced." verbose="The scope of the variable &apos;sslp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/bio_ssl.c" line="298"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;epoch&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;epoch&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="1287"/>
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="1286"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;curr_mtu&apos; can be reduced." verbose="The scope of the variable &apos;curr_mtu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;al&apos; can be reduced." verbose="The scope of the variable &apos;al&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="545"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ii&apos; can be reduced." verbose="The scope of the variable &apos;ii&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="669"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="916"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="917"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="918"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="981"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frag&apos; can be reduced." verbose="The scope of the variable &apos;frag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="1151"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;padding&apos; can be reduced." verbose="The scope of the variable &apos;padding&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="1469"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="929"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;i&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;i&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/ssl/d1_clnt.c" line="1661"/>
            <location file="drivers/builtin_openssl2/ssl/d1_clnt.c" line="1660"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_clnt.c" line="1641"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_clnt.c" line="1642"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_enc.c" line="141"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bs&apos; can be reduced." verbose="The scope of the variable &apos;bs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_enc.c" line="142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_enc.c" line="142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_enc.c" line="142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_enc.c" line="142"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;payload+padding&lt;=16381&apos; is always true" verbose="Condition &apos;payload+padding&lt;=16381&apos; is always true">
            <location file="drivers/builtin_openssl2/ssl/d1_both.c" line="1576"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 4) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 4) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_openssl2/ssl/d1_enc.c" line="223"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="drivers/builtin_openssl2/ssl/d1_clnt.c" line="811"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;KRB5SENDAUTH&apos; since the value of &apos;KRB5SENDAUTH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;KRB5SENDAUTH&apos; since the value of &apos;KRB5SENDAUTH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/d1_clnt.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mtu&apos; can be reduced." verbose="The scope of the variable &apos;mtu&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_lib.c" line="212"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_pkt.c" line="1730"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cb&apos; can be reduced." verbose="The scope of the variable &apos;cb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_pkt.c" line="1731"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;DTLS1_AD_MISSING_HANDSHAKE_MESSAGE&apos; since the value of &apos;DTLS1_AD_MISSING_HANDSHAKE_MESSAGE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;DTLS1_AD_MISSING_HANDSHAKE_MESSAGE&apos; since the value of &apos;DTLS1_AD_MISSING_HANDSHAKE_MESSAGE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/d1_pkt.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srtp.c" line="267"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prof&apos; can be reduced." verbose="The scope of the variable &apos;prof&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srtp.c" line="269"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srvr.c" line="863"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg_len&apos; can be reduced." verbose="The scope of the variable &apos;msg_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srvr.c" line="885"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg&apos; can be reduced." verbose="The scope of the variable &apos;msg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srvr.c" line="886"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srvr.c" line="886"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srvr.c" line="925"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srvr.c" line="926"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sl&apos; can be reduced." verbose="The scope of the variable &apos;sl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srvr.c" line="927"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srvr.c" line="928"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srvr.c" line="1011"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srvr.c" line="1583"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/d1_srvr.c" line="1584"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!krb5ticket&apos; is redundant or there is possible null pointer dereference: krb5ticket." verbose="Either the condition &apos;!krb5ticket&apos; is redundant or there is possible null pointer dereference: krb5ticket." inconclusive="true">
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="1513"/>
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="1457"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!krb5ticket&apos; is redundant or there is possible null pointer dereference: krb5ticket." verbose="Either the condition &apos;!krb5ticket&apos; is redundant or there is possible null pointer dereference: krb5ticket." inconclusive="true">
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="1513"/>
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="1465"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!krb5ticket&apos; is redundant or there is possible null pointer dereference: krb5ticket." verbose="Either the condition &apos;!krb5ticket&apos; is redundant or there is possible null pointer dereference: krb5ticket." inconclusive="true">
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="1513"/>
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="1466"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;test_auth&apos; can be reduced." verbose="The scope of the variable &apos;test_auth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="921"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i">
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="880"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: j" verbose="Unused variable: j">
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="880"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;n&apos; is assigned a value that is never used." verbose="Variable &apos;n&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="886"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rc&apos; is assigned a value that is never used." verbose="Variable &apos;rc&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="1967"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;n&apos; is assigned a value that is never used." verbose="Variable &apos;n&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="884"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;if(auth&amp;&amp;auth.ctime&amp;&amp;auth.ctime.length&amp;&amp;auth.ctime.data)&apos; is redundant or there is possible null pointer dereference: auth." verbose="Either the condition &apos;if(auth&amp;&amp;auth.ctime&amp;&amp;auth.ctime.length&amp;&amp;auth.ctime.data)&apos; is redundant or there is possible null pointer dereference: auth.">
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="2136"/>
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="2123"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/kssl.c" line="1483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cipher&apos; can be reduced." verbose="The scope of the variable &apos;cipher&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_clnt.c" line="259"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_clnt.c" line="299"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch_len&apos; can be reduced." verbose="The scope of the variable &apos;ch_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_clnt.c" line="299"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_clnt.c" line="300"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;version_major&apos; can be reduced." verbose="The scope of the variable &apos;version_major&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_clnt.c" line="302"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;version_minor&apos; can be reduced." verbose="The scope of the variable &apos;version_minor&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_clnt.c" line="302"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_clnt.c" line="304"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_lib.c" line="107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_lib.c" line="122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_lib.c" line="145"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_lib.c" line="168"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;OPENSSL_MAX_TLS1_2_CIPHER_LENGTH&apos; since the value of &apos;OPENSSL_MAX_TLS1_2_CIPHER_LENGTH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;OPENSSL_MAX_TLS1_2_CIPHER_LENGTH&apos; since the value of &apos;OPENSSL_MAX_TLS1_2_CIPHER_LENGTH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/s23_clnt.c" line="1"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mask&apos; is assigned a value that is never used." verbose="Variable &apos;mask&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/s23_clnt.c" line="346"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_pkt.c" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_pkt.c" line="95"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s23_pkt.c" line="96"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;n&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;n&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/ssl/s2_clnt.c" line="572"/>
            <location file="drivers/builtin_openssl2/ssl/s2_clnt.c" line="570"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_clnt.c" line="550"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_clnt.c" line="550"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_clnt.c" line="550"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;clear&apos; can be reduced." verbose="The scope of the variable &apos;clear&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_clnt.c" line="617"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;enc&apos; can be reduced." verbose="The scope of the variable &apos;enc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_clnt.c" line="617"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;karg&apos; can be reduced." verbose="The scope of the variable &apos;karg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_clnt.c" line="617"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_clnt.c" line="617"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_clnt.c" line="727"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;j&apos; is assigned a value that is never used." verbose="Variable &apos;j&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/s2_clnt.c" line="570"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_lib.c" line="435"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;c&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;c&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/ssl/s2_lib.c" line="460"/>
            <location file="drivers/builtin_openssl2/ssl/s2_lib.c" line="453"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_pkt.c" line="517"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_pkt.c" line="517"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bs&apos; can be reduced." verbose="The scope of the variable &apos;bs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_pkt.c" line="517"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_pkt.c" line="658"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_pkt.c" line="659"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;j&apos; is assigned a value that is never used." verbose="Variable &apos;j&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/s2_pkt.c" line="587"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;n&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;n&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/ssl/s2_srvr.c" line="781"/>
            <location file="drivers/builtin_openssl2/ssl/s2_srvr.c" line="777"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_srvr.c" line="700"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hit&apos; can be reduced." verbose="The scope of the variable &apos;hit&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_srvr.c" line="700"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_srvr.c" line="872"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s2_srvr.c" line="895"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_both.c" line="153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_both.c" line="154"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_both.c" line="155"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_both.c" line="314"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/s3_both.c" line="168"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;first_block&apos; can be reduced." verbose="The scope of the variable &apos;first_block&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_cbc.c" line="460"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;i&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;i&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/ssl/s3_clnt.c" line="3117"/>
            <location file="drivers/builtin_openssl2/ssl/s3_clnt.c" line="3116"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_clnt.c" line="3097"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_clnt.c" line="3098"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_clnt.c" line="3311"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;padding_len&apos; can be reduced." verbose="The scope of the variable &apos;padding_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_clnt.c" line="3311"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_clnt.c" line="3312"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_enc.c" line="482"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bs&apos; can be reduced." verbose="The scope of the variable &apos;bs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_enc.c" line="483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_enc.c" line="483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mac_size&apos; can be reduced." verbose="The scope of the variable &apos;mac_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_enc.c" line="483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_enc.c" line="711"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;KRB5SENDAUTH&apos; since the value of &apos;KRB5SENDAUTH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;KRB5SENDAUTH&apos; since the value of &apos;KRB5SENDAUTH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/s3_clnt.c" line="1"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;mask_k&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;mask_k&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/ssl/s3_lib.c" line="3825"/>
            <location file="drivers/builtin_openssl2/ssl/s3_lib.c" line="3820"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;emask_k&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;emask_k&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/ssl/s3_lib.c" line="3826"/>
            <location file="drivers/builtin_openssl2/ssl/s3_lib.c" line="3822"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_lib.c" line="3745"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_lib.c" line="4161"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;OPENSSL_MAX_TLS1_2_CIPHER_LENGTH&apos; since the value of &apos;OPENSSL_MAX_TLS1_2_CIPHER_LENGTH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;OPENSSL_MAX_TLS1_2_CIPHER_LENGTH&apos; since the value of &apos;OPENSSL_MAX_TLS1_2_CIPHER_LENGTH&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/s3_clnt.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_pkt.c" line="1525"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cb&apos; can be reduced." verbose="The scope of the variable &apos;cb&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_pkt.c" line="1526"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SSL_AD_MISSING_SRP_USERNAME&apos; since the value of &apos;SSL_AD_MISSING_SRP_USERNAME&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SSL_AD_MISSING_SRP_USERNAME&apos; since the value of &apos;SSL_AD_MISSING_SRP_USERNAME&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/s3_pkt.c" line="1"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/builtin_openssl2/ssl/s3_srvr.c" line="377"/>
            <location file="drivers/builtin_openssl2/ssl/s3_srvr.c" line="376"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_srvr.c" line="855"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_srvr.c" line="1298"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_srvr.c" line="1438"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_srvr.c" line="1439"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sl&apos; can be reduced." verbose="The scope of the variable &apos;sl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_srvr.c" line="1439"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_srvr.c" line="1440"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_srvr.c" line="1532"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_srvr.c" line="3327"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/s3_srvr.c" line="3328"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;err&apos; is not used." verbose="Label &apos;err&apos; is not used.">
            <location file="drivers/builtin_openssl2/ssl/s3_clnt.c" line="1072"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v7&apos; is assigned a value that is never used." verbose="Variable &apos;v7&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/ssl_asn1.c" line="125"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v8&apos; is assigned a value that is never used." verbose="Variable &apos;v8&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/ssl_asn1.c" line="125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v11&apos; can be reduced." verbose="The scope of the variable &apos;v11&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_asn1.c" line="134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_ciph.c" line="1111"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ctmp&apos; can be reduced." verbose="The scope of the variable &apos;ctmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_ciph.c" line="1764"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/ssl_cert.c" line="1"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;s!=0&apos; is redundant or there is possible null pointer dereference: s." verbose="Either the condition &apos;s!=0&apos; is redundant or there is possible null pointer dereference: s.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="1019"/>
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="1013"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="1343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="1382"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ecdh_ok&apos; can be reduced." verbose="The scope of the variable &apos;ecdh_ok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2024"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ecdsa_ok&apos; can be reduced." verbose="The scope of the variable &apos;ecdsa_ok&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2024"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ecc_pkey_size&apos; can be reduced." verbose="The scope of the variable &apos;ecc_pkey_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2024"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced." verbose="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2028"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ecc_pkey&apos; can be reduced." verbose="The scope of the variable &apos;ecc_pkey&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2029"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;signature_nid&apos; can be reduced." verbose="The scope of the variable &apos;signature_nid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2030"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pkey&apos; can be reduced." verbose="The scope of the variable &apos;pkey&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2231"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;keysize&apos; can be reduced." verbose="The scope of the variable &apos;keysize&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;signature_nid&apos; can be reduced." verbose="The scope of the variable &apos;signature_nid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2233"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;conn&apos; can be reduced." verbose="The scope of the variable &apos;conn&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2442"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ecdh_ok&apos; is assigned a value that is never used." verbose="Variable &apos;ecdh_ok&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2151"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ecc_pkey_size&apos; is assigned a value that is never used." verbose="Variable &apos;ecc_pkey_size&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2156"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ecdsa_ok&apos; is assigned a value that is never used." verbose="Variable &apos;ecdsa_ok&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="2153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssl_sess.c" line="705"/>
        </error>
        <error id="duplicateBranch" severity="style" msg="Found duplicate branches for &apos;if&apos; and &apos;else&apos;." verbose="Finding the same code in an &apos;if&apos; and related &apos;else&apos; branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." inconclusive="true">
            <location file="drivers/builtin_openssl2/ssl/ssl_task.c" line="322"/>
            <location file="drivers/builtin_openssl2/ssl/ssl_task.c" line="324"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="drivers/builtin_openssl2/ssl/ssl_task.c" line="310"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="drivers/builtin_openssl2/ssl/ssl_task.c" line="316"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;io_status::stsval&apos; is never used." verbose="struct or union member &apos;io_status::stsval&apos; is never used.">
            <location file="drivers/builtin_openssl2/ssl/ssl_task.c" line="161"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/ssl_sess.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/ssltest.c" line="859"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;CLOCKS_PER_SEC&apos; since the value of &apos;CLOCKS_PER_SEC&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;CLOCKS_PER_SEC&apos; since the value of &apos;CLOCKS_PER_SEC&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/ssltest.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_enc.c" line="688"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bs&apos; can be reduced." verbose="The scope of the variable &apos;bs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_enc.c" line="689"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_enc.c" line="689"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_enc.c" line="689"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_enc.c" line="689"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pad&apos; can be reduced." verbose="The scope of the variable &apos;pad&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_enc.c" line="689"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mac_size&apos; can be reduced." verbose="The scope of the variable &apos;mac_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_enc.c" line="689"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_enc.c" line="959"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 4) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 4) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_openssl2/ssl/t1_enc.c" line="815"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/ssl/t1_enc.c" line="1131"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 5) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%d in format string (no. 5) requires &apos;int&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/builtin_openssl2/ssl/t1_enc.c" line="1131"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;OPENSSL_SSL_CLIENT_ENGINE_AUTO&apos; since the value of &apos;OPENSSL_SSL_CLIENT_ENGINE_AUTO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;OPENSSL_SSL_CLIENT_ENGINE_AUTO&apos; since the value of &apos;OPENSSL_SSL_CLIENT_ENGINE_AUTO&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;REF_PRINT&apos; since the value of &apos;REF_PRINT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/ssl_lib.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;servname_type&apos; can be reduced." verbose="The scope of the variable &apos;servname_type&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_lib.c" line="1048"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_lib.c" line="1773"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alg_k&apos; can be reduced." verbose="The scope of the variable &apos;alg_k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_lib.c" line="1774"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;alg_a&apos; can be reduced." verbose="The scope of the variable &apos;alg_a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_lib.c" line="1774"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;padding&apos; can be reduced." verbose="The scope of the variable &apos;padding&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_openssl2/ssl/t1_lib.c" line="2592"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &apos;size&apos; is less than zero." verbose="The unsigned variable &apos;size&apos; will never be negative so it is either pointless or an error to check if it is.">
            <location file="drivers/builtin_openssl2/ssl/t1_lib.c" line="1131"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_openssl2/ssl/t1_lib.c" line="2234"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;payload+padding&lt;=16381&apos; is always true" verbose="Condition &apos;payload+padding&lt;=16381&apos; is always true">
            <location file="drivers/builtin_openssl2/ssl/t1_lib.c" line="2692"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/adler32.c" line="71"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;str&apos; can be reduced." verbose="The scope of the variable &apos;str&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/deflate.c" line="329"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/deflate.c" line="329"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;put&apos; can be reduced." verbose="The scope of the variable &apos;put&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/deflate.c" line="470"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;str&apos; can be reduced." verbose="The scope of the variable &apos;str&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/deflate.c" line="570"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;match&apos; can be reduced." verbose="The scope of the variable &apos;match&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/deflate.c" line="1152"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;more&apos; can be reduced." verbose="The scope of the variable &apos;more&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/deflate.c" line="1393"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_start&apos; can be reduced." verbose="The scope of the variable &apos;max_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/deflate.c" line="1570"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;static_tree_desc_s::dummy&apos; is never used." verbose="struct or union member &apos;static_tree_desc_s::dummy&apos; is never used.">
            <location file="drivers/builtin_zlib/zlib/deflate.c" line="155"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bflush&apos; is assigned a value that is never used." verbose="Variable &apos;bflush&apos; is assigned a value that is never used.">
            <location file="drivers/builtin_zlib/zlib/deflate.c" line="1840"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/crc32.c" line="92"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/crc32.c" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/crc32.c" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;poly&apos; can be reduced." verbose="The scope of the variable &apos;poly&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/crc32.c" line="94"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/crc32.c" line="97"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;.">
            <location file="drivers/builtin_zlib/zlib/crc32.c" line="114"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;%&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a%b?c:d&apos;&apos; should be written as either &apos;&apos;(a%b)?c:d&apos;&apos; or &apos;&apos;a%(b?c:d)&apos;&apos;.">
            <location file="drivers/builtin_zlib/zlib/crc32.c" line="174"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;TLSEXT_TYPE_opaque_prf_input&apos; since the value of &apos;TLSEXT_TYPE_opaque_prf_input&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;TLSEXT_TYPE_opaque_prf_input&apos; since the value of &apos;TLSEXT_TYPE_opaque_prf_input&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/builtin_openssl2/ssl/t1_lib.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bflush&apos; can be reduced." verbose="The scope of the variable &apos;bflush&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/deflate.c" line="1936"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;sane&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;sane&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="drivers/builtin_zlib/zlib/inflate.c" line="1481"/>
            <location file="drivers/builtin_zlib/zlib/inflate.c" line="1477"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dist&apos; can be reduced." verbose="The scope of the variable &apos;dist&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/inflate.c" line="383"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dictid&apos; can be reduced." verbose="The scope of the variable &apos;dictid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/inflate.c" line="1273"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/inflate.c" line="1366"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wsize&apos; can be reduced." verbose="The scope of the variable &apos;wsize&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/inflate.c" line="1429"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;.">
            <location file="drivers/builtin_zlib/zlib/inflate.c" line="682"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fill&apos; can be reduced." verbose="The scope of the variable &apos;fill&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/inftrees.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;curlen&apos; can be reduced." verbose="The scope of the variable &apos;curlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="712"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;curlen&apos; can be reduced." verbose="The scope of the variable &apos;curlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="757"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dist&apos; can be reduced." verbose="The scope of the variable &apos;dist&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="1063"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lc&apos; can be reduced." verbose="The scope of the variable &apos;lc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="1064"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lx&apos; can be reduced." verbose="The scope of the variable &apos;lx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="1065"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;code&apos; can be reduced." verbose="The scope of the variable &apos;code&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="1066"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;extra&apos; can be reduced." verbose="The scope of the variable &apos;extra&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="1067"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="826"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="826"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="853"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="856"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="859"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="926"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="926"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 1) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="930"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="930"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="1088"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;int&apos;." verbose="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;int&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="364"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;int&apos;." verbose="%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;int&apos;.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="370"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned variable &apos;static_lenb&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned variable &apos;static_lenb&apos; can&apos;t be negative so it is unnecessary to test it.">
            <location file="drivers/builtin_zlib/zlib/trees.c" line="970"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;z_internal_state::dummy&apos; is never used." verbose="struct or union member &apos;z_internal_state::dummy&apos; is never used.">
            <location file="drivers/builtin_zlib/zlib/zutil.c" line="14"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;errpoint&apos; is assigned a value that is never used." verbose="Variable &apos;errpoint&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_envelope.cpp" line="362"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPEnvelope::node&apos; is not initialized in the constructor." verbose="Member variable &apos;CPEnvelope::node&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_envelope.cpp" line="32"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPEnvelope::max_value&apos; is not initialized in the constructor." verbose="Member variable &apos;CPEnvelope::max_value&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_envelope.cpp" line="32"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPEnvelope::min_value&apos; is not initialized in the constructor." verbose="Member variable &apos;CPEnvelope::min_value&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_envelope.cpp" line="32"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::get_max&apos; can be const." verbose="The member function &apos;CPEnvelope::get_max&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="89"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::get_min&apos; can be const." verbose="The member function &apos;CPEnvelope::get_min&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="91"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::get_node_count&apos; can be const." verbose="The member function &apos;CPEnvelope::get_node_count&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="93"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="355"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::get_node&apos; can be const." verbose="The member function &apos;CPEnvelope::get_node&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="94"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="360"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::is_loop_enabled&apos; can be const." verbose="The member function &apos;CPEnvelope::is_loop_enabled&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="101"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="278"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::get_loop_begin&apos; can be const." verbose="The member function &apos;CPEnvelope::get_loop_begin&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="104"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="314"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::get_loop_end&apos; can be const." verbose="The member function &apos;CPEnvelope::get_loop_end&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="105"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="319"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::is_sustain_loop_enabled&apos; can be const." verbose="The member function &apos;CPEnvelope::is_sustain_loop_enabled&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="108"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="288"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::get_sustain_loop_begin&apos; can be const." verbose="The member function &apos;CPEnvelope::get_sustain_loop_begin&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="111"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="324"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::get_sustain_loop_end&apos; can be const." verbose="The member function &apos;CPEnvelope::get_sustain_loop_end&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="112"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="329"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::is_enabled&apos; can be const." verbose="The member function &apos;CPEnvelope::is_enabled&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="115"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="341"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::is_carry_enabled&apos; can be const." verbose="The member function &apos;CPEnvelope::is_carry_enabled&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="118"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="350"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::get_height_at_pos&apos; can be const." verbose="The member function &apos;CPEnvelope::get_height_at_pos&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="121"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="54"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPEnvelope::get_interp_height_at_pos&apos; can be const." verbose="The member function &apos;CPEnvelope::get_interp_height_at_pos&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_envelope.h" line="122"/>
            <location file="drivers/chibi/cp_envelope.cpp" line="118"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;CPSample::operator=&apos; should return &apos;CPSample &amp;&apos;." verbose="The CPSample::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;CPSample &amp;CPSample::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="drivers/chibi/cp_sample.h" line="69"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPNote::operator==&apos; can be const." verbose="The member function &apos;CPNote::operator==&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_note.h" line="82"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_name&apos; can be const." verbose="The member function &apos;CPInstrument::get_name&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="141"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="35"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_sample_number&apos; can be const." verbose="The member function &apos;CPInstrument::get_sample_number&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="145"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="71"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_note_number&apos; can be const." verbose="The member function &apos;CPInstrument::get_note_number&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="148"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="84"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_NNA_type&apos; can be const." verbose="The member function &apos;CPInstrument::get_NNA_type&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="151"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="95"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_DC_type&apos; can be const." verbose="The member function &apos;CPInstrument::get_DC_type&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="154"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="104"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_DC_action&apos; can be const." verbose="The member function &apos;CPInstrument::get_DC_action&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="157"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="114"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_volume_global_amount&apos; can be const." verbose="The member function &apos;CPInstrument::get_volume_global_amount&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="162"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="127"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_volume_fadeout&apos; can be const." verbose="The member function &apos;CPInstrument::get_volume_fadeout&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="165"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="136"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_volume_random_variation&apos; can be const." verbose="The member function &apos;CPInstrument::get_volume_random_variation&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="168"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="145"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_pan_default_amount&apos; can be const." verbose="The member function &apos;CPInstrument::get_pan_default_amount&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="173"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="157"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::is_pan_default_enabled&apos; can be const." verbose="The member function &apos;CPInstrument::is_pan_default_enabled&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="176"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="166"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_pan_pitch_separation&apos; can be const." verbose="The member function &apos;CPInstrument::get_pan_pitch_separation&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="179"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="178"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_pan_pitch_center&apos; can be const." verbose="The member function &apos;CPInstrument::get_pan_pitch_center&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="182"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="188"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_pan_random_variation&apos; can be const." verbose="The member function &apos;CPInstrument::get_pan_random_variation&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="185"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="198"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::is_pitch_use_as_filter&apos; can be const." verbose="The member function &apos;CPInstrument::is_pitch_use_as_filter&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="190"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="209"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::filter_use_default_cutoff&apos; can be const." verbose="The member function &apos;CPInstrument::filter_use_default_cutoff&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="193"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="219"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_filter_default_cutoff&apos; can be const." verbose="The member function &apos;CPInstrument::get_filter_default_cutoff&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="196"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="229"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::filter_use_default_resonance&apos; can be const." verbose="The member function &apos;CPInstrument::filter_use_default_resonance&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="199"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="238"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::get_filter_default_resonance&apos; can be const." verbose="The member function &apos;CPInstrument::get_filter_default_resonance&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="202"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="249"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPInstrument::is_empty&apos; can be const." verbose="The member function &apos;CPInstrument::is_empty&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_instrument.h" line="208"/>
            <location file="drivers/chibi/cp_instrument.cpp" line="323"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;CPSample_ID&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;CPSample_ID&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/chibi/cp_sample_manager.h" line="51"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_IT::song&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_IT::song&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_it.cpp" line="212"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_IT::header&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_IT::header&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_it.cpp" line="212"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_IT::source_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_IT::source_buffer&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_it.cpp" line="212"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_IT::source_position&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_IT::source_position&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_it.cpp" line="212"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_IT::source_remaining_bits&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_IT::source_remaining_bits&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_it.cpp" line="212"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_IT::pat_data&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_IT::pat_data&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_it.cpp" line="212"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CPLoader_IT&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CPLoader_IT&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/chibi/cp_loader_it.h" line="119"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." inconclusive="true">
            <location file="drivers/chibi/cp_loader_it_instruments.cpp" line="220"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flag&apos; can be reduced." verbose="The scope of the variable &apos;flag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_patterns.cpp" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aux_byte&apos; can be reduced." verbose="The scope of the variable &apos;aux_byte&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_patterns.cpp" line="53"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pat_size&apos; is assigned a value that is never used." verbose="Variable &apos;pat_size&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_loader_it_patterns.cpp" line="66"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;reserved&apos; is assigned a value that is never used." verbose="Variable &apos;reserved&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_loader_it_patterns.cpp" line="68"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;block_length&apos; can be reduced." verbose="The scope of the variable &apos;block_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_samples.cpp" line="389"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;block_position&apos; can be reduced." verbose="The scope of the variable &apos;block_position&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_samples.cpp" line="390"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bit_width&apos; can be reduced." verbose="The scope of the variable &apos;bit_width&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_samples.cpp" line="391"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d1&apos; can be reduced." verbose="The scope of the variable &apos;d1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_samples.cpp" line="393"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_samples.cpp" line="393"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;block_length&apos; can be reduced." verbose="The scope of the variable &apos;block_length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_samples.cpp" line="506"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;block_position&apos; can be reduced." verbose="The scope of the variable &apos;block_position&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_samples.cpp" line="507"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bit_width&apos; can be reduced." verbose="The scope of the variable &apos;bit_width&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_samples.cpp" line="508"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d1&apos; can be reduced." verbose="The scope of the variable &apos;d1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_samples.cpp" line="510"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d2&apos; can be reduced." verbose="The scope of the variable &apos;d2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_it_samples.cpp" line="510"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;convert_flag&apos; is assigned a value that is never used." verbose="Variable &apos;convert_flag&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_loader_it_samples.cpp" line="105"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CPLoader_MOD::load_sample&apos; can be static." verbose="The member function &apos;CPLoader_MOD::load_sample&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/chibi/cp_loader_mod.h" line="45"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CPLoader_MOD::load_instrument&apos; can be static." verbose="The member function &apos;CPLoader_MOD::load_instrument&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/chibi/cp_loader_mod.h" line="46"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CPLoader_MOD&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CPLoader_MOD&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/chibi/cp_loader_mod.h" line="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flag&apos; can be reduced." verbose="The scope of the variable &apos;flag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="251"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;filename&apos; is assigned a value that is never used." verbose="Variable &apos;filename&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dsk&apos; is assigned a value that is never used." verbose="Variable &apos;dsk&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="147"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pack&apos; is assigned a value that is never used." verbose="Variable &apos;pack&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="148"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;real_sample_size&apos; is assigned a value that is never used." verbose="Variable &apos;real_sample_size&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="191"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_S3M::sample_parapointers&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_S3M::sample_parapointers&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="402"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_S3M::pattern_parapointers&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_S3M::pattern_parapointers&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="402"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_S3M::header&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_S3M::header&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="402"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_S3M::sample_count&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_S3M::sample_count&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="402"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_S3M::pattern_count&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_S3M::pattern_count&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="402"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_S3M::song&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_S3M::song&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="402"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CPLoader_S3M::load_sample&apos; can be static." verbose="The member function &apos;CPLoader_S3M::load_sample&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/chibi/cp_loader_s3m.h" line="102"/>
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="311"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CPLoader_S3M::load_instrument&apos; can be static." verbose="The member function &apos;CPLoader_S3M::load_instrument&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/chibi/cp_loader_s3m.h" line="103"/>
            <location file="drivers/chibi/cp_loader_s3m.cpp" line="315"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CPLoader_S3M&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CPLoader_S3M&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/chibi/cp_loader_s3m.h" line="105"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/chibi/cp_pattern.cpp" line="59"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/chibi/cp_pattern.cpp" line="68"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPattern::get_event_pos&apos; can be const." verbose="The member function &apos;CPPattern::get_event_pos&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_pattern.h" line="64"/>
            <location file="drivers/chibi/cp_pattern.cpp" line="78"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPattern::is_empty&apos; can be const." verbose="The member function &apos;CPPattern::is_empty&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_pattern.h" line="72"/>
            <location file="drivers/chibi/cp_pattern.cpp" line="566"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CPPattern::script_transform_note&apos; can be static." verbose="The member function &apos;CPPattern::script_transform_note&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/chibi/cp_pattern.h" line="82"/>
            <location file="drivers/chibi/cp_pattern.cpp" line="392"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPattern::get_length&apos; can be const." verbose="The member function &apos;CPPattern::get_length&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_pattern.h" line="87"/>
            <location file="drivers/chibi/cp_pattern.cpp" line="553"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;aux&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;aux&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/chibi/cp_loader_xm.cpp" line="118"/>
            <location file="drivers/chibi/cp_loader_xm.cpp" line="117"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;aux&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;aux&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/chibi/cp_loader_xm.cpp" line="479"/>
            <location file="drivers/chibi/cp_loader_xm.cpp" line="477"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;aux&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;aux&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/chibi/cp_loader_xm.cpp" line="719"/>
            <location file="drivers/chibi/cp_loader_xm.cpp" line="711"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;aux&apos; is assigned a value that is never used." verbose="Variable &apos;aux&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_loader_xm.cpp" line="393"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;aux&apos; is assigned a value that is never used." verbose="Variable &apos;aux&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_loader_xm.cpp" line="479"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;auxb&apos; is assigned a value that is never used." verbose="Variable &apos;auxb&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_loader_xm.cpp" line="614"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;aux&apos; is assigned a value that is never used." verbose="Variable &apos;aux&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_loader_xm.cpp" line="719"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/chibi/cp_player_data.cpp" line="65"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::note&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::note&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::real_note&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::real_note&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::sample_start_index&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::sample_start_index&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::old_note&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::old_note&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::kick&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::kick&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::filter&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::filter&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::reverb_send&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::reverb_send&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_XM::header&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_XM::header&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_xm.cpp" line="736"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::chorus_send&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::chorus_send&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CPLoader_XM::song&apos; is not initialized in the constructor." verbose="Member variable &apos;CPLoader_XM::song&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_loader_xm.cpp" line="736"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::note_end_flags&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::note_end_flags&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::instrument_ptr&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::instrument_ptr&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::sample_ptr&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::sample_ptr&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::instrument_index&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::instrument_index&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::sample_index&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::sample_index&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CPLoader_XM::load_sample&apos; can be static." verbose="The member function &apos;CPLoader_XM::load_sample&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/chibi/cp_loader_xm.h" line="79"/>
            <location file="drivers/chibi/cp_loader_xm.cpp" line="677"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::new_instrument&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::new_instrument&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::base_speed&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::base_speed&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CPLoader_XM&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CPLoader_XM&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/chibi/cp_loader_xm.h" line="83"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::NNA_type&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::NNA_type&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::duplicate_check_type&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::duplicate_check_type&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::duplicate_check_action&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::duplicate_check_action&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::volume_envelope_on&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::volume_envelope_on&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::panning_envelope_on&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::panning_envelope_on&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::pitch_envelope_on&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::pitch_envelope_on&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::has_own_period&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::has_own_period&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::row_has_note&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::row_has_note&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::volume&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::volume&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::aux_volume&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::aux_volume&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::has_own_volume&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::has_own_volume&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::mute&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::mute&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::random_volume_variation&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::random_volume_variation&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::default_volume&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::default_volume&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::channel_volume&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::channel_volume&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::output_volume&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::output_volume&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::fadeout_volume&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::fadeout_volume&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::period&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::period&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::panning&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::panning&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::channel_panning&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::channel_panning&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::sliding&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::sliding&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::aux_period&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::aux_period&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::note_delay&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::note_delay&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::slave_voice&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::slave_voice&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::carry&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::carry&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::slave_voice_index&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::slave_voice_index&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::row&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::row&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::current_command&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::current_command&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::current_parameter&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::current_parameter&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::current_volume_command&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::current_volume_command&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::current_volume_parameter&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::current_volume_parameter&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::volcol_volume_slide&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::volcol_volume_slide&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::lo_offset&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::lo_offset&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::hi_offset&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::hi_offset&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::panbrello_type&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::panbrello_type&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::panbrello_position&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::panbrello_position&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::panbrello_speed&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::panbrello_speed&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::panbrello_depth&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::panbrello_depth&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::panbrello_info&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::panbrello_info&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::arpegio_info&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::arpegio_info&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::pattern_loop_position&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::pattern_loop_position&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::pattern_loop_count&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::pattern_loop_count&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::doing_vibrato&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::doing_vibrato&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::vibrato_position&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::vibrato_position&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::vibrato_speed&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::vibrato_speed&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::vibrato_depth&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::vibrato_depth&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::vibrato_type&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::vibrato_type&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::tremor_position&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::tremor_position&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::tremor_speed&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::tremor_speed&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::tremor_depth&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::tremor_depth&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::tremor_info&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::tremor_info&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::tremolo_position&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::tremolo_position&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::tremolo_speed&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::tremolo_speed&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::tremolo_depth&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::tremolo_depth&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::tremolo_info&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::tremolo_info&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::tremolo_type&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::tremolo_type&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::retrig_counter&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::retrig_counter&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::retrig_speed&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::retrig_speed&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::retrig_volslide&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::retrig_volslide&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::sample_offset_hi&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::sample_offset_hi&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::sample_offset&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::sample_offset&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::sample_offset_fine&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::sample_offset_fine&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::slide_to_period&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::slide_to_period&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::portamento_speed&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::portamento_speed&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::volume_slide_info&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::volume_slide_info&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::channel_volume_slide_info&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::channel_volume_slide_info&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::global_volume_slide_info&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::global_volume_slide_info&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::channel_pan_slide_info&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::channel_pan_slide_info&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::pitch_slide_info&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::pitch_slide_info&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::tempo_slide_info&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::tempo_slide_info&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::current_S_effect&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::current_S_effect&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::current_S_data&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::current_S_data&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::volume_column_effect_mem&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::volume_column_effect_mem&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::volume_column_data_mem&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::volume_column_data_mem&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Channel_Control::reserved&apos; is not initialized in the constructor." verbose="Member variable &apos;Channel_Control::reserved&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/cp_player_data.h" line="389"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_current_tempo&apos; can be const." verbose="The member function &apos;CPPlayer::get_current_tempo&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="504"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_current_speed&apos; can be const." verbose="The member function &apos;CPPlayer::get_current_speed&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="505"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_voices_used&apos; can be const." verbose="The member function &apos;CPPlayer::get_voices_used&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="507"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_voice_amount_limit&apos; can be const." verbose="The member function &apos;CPPlayer::get_voice_amount_limit&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="509"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_virtual_channels&apos; can be const." verbose="The member function &apos;CPPlayer::get_virtual_channels&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="525"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::is_playing&apos; can be const." verbose="The member function &apos;CPPlayer::is_playing&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="529"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_play_mode&apos; can be const." verbose="The member function &apos;CPPlayer::get_play_mode&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="530"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_current_order&apos; can be const." verbose="The member function &apos;CPPlayer::get_current_order&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="531"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_current_row&apos; can be const." verbose="The member function &apos;CPPlayer::get_current_row&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="532"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_current_pattern&apos; can be const." verbose="The member function &apos;CPPlayer::get_current_pattern&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="533"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::reached_end_of_song&apos; can be const." verbose="The member function &apos;CPPlayer::reached_end_of_song&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="562"/>
            <location file="drivers/chibi/cp_player_data.cpp" line="139"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::are_filters_enabled&apos; can be const." verbose="The member function &apos;CPPlayer::are_filters_enabled&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="568"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_channel_voice&apos; can be const." verbose="The member function &apos;CPPlayer::get_channel_voice&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="515"/>
            <location file="drivers/chibi/cp_player_data_control.cpp" line="228"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_voice_volume&apos; can be const." verbose="The member function &apos;CPPlayer::get_voice_volume&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="520"/>
            <location file="drivers/chibi/cp_player_data_control.cpp" line="132"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::get_voice_sample_index&apos; can be const." verbose="The member function &apos;CPPlayer::get_voice_sample_index&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="522"/>
            <location file="drivers/chibi/cp_player_data_control.cpp" line="321"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." inconclusive="true">
            <location file="drivers/chibi/cp_player_data_effects.cpp" line="615"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CPPlayer::Voice_Control::start_envelope&apos; can be static." verbose="The member function &apos;CPPlayer::Voice_Control::start_envelope&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="180"/>
            <location file="drivers/chibi/cp_player_data_envelopes.cpp" line="33"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::Voice_Control::process_envelope&apos; can be const." verbose="The member function &apos;CPPlayer::Voice_Control::process_envelope&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="181"/>
            <location file="drivers/chibi/cp_player_data_envelopes.cpp" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;voice_index&apos; can be reduced." verbose="The scope of the variable &apos;voice_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_player_data_events.cpp" line="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aux_pitch_diff&apos; can be reduced." verbose="The scope of the variable &apos;aux_pitch_diff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_player_data_events.cpp" line="441"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_player_data_events.cpp" line="597"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cv&apos; is assigned a value that is never used." verbose="Variable &apos;cv&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_player_data_events.cpp" line="329"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;preshift&apos; is assigned a value that is never used." verbose="Variable &apos;preshift&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_player_data_events.cpp" line="341"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPPlayer::Filter_Control::set_filter_parameters&apos; can be const." verbose="The member function &apos;CPPlayer::Filter_Control::set_filter_parameters&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_player_data.h" line="75"/>
            <location file="drivers/chibi/cp_player_data_filter.cpp" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_player_data_nna.cpp" line="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dest_sample_index&apos; can be reduced." verbose="The scope of the variable &apos;dest_sample_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_player_data_notes.cpp" line="100"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_instrument&apos; can be reduced." verbose="The scope of the variable &apos;new_instrument&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/chibi/cp_player_data_notes.cpp" line="101"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;new_instrument&apos; is assigned a value that is never used." verbose="Variable &apos;new_instrument&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/cp_player_data_notes.cpp" line="137"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_name&apos; can be const." verbose="The member function &apos;CPSong::get_name&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="143"/>
            <location file="drivers/chibi/cp_song.cpp" line="51"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_message&apos; can be const." verbose="The member function &apos;CPSong::get_message&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="146"/>
            <location file="drivers/chibi/cp_song.cpp" line="76"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_row_highlight_minor&apos; can be const." verbose="The member function &apos;CPSong::get_row_highlight_minor&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="150"/>
            <location file="drivers/chibi/cp_song.cpp" line="86"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_row_highlight_major&apos; can be const." verbose="The member function &apos;CPSong::get_row_highlight_major&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="153"/>
            <location file="drivers/chibi/cp_song.cpp" line="97"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_mixing_volume&apos; can be const." verbose="The member function &apos;CPSong::get_mixing_volume&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="156"/>
            <location file="drivers/chibi/cp_song.cpp" line="109"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_global_volume&apos; can be const." verbose="The member function &apos;CPSong::get_global_volume&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="159"/>
            <location file="drivers/chibi/cp_song.cpp" line="121"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_stereo_separation&apos; can be const." verbose="The member function &apos;CPSong::get_stereo_separation&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="162"/>
            <location file="drivers/chibi/cp_song.cpp" line="132"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::is_stereo&apos; can be const." verbose="The member function &apos;CPSong::is_stereo&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="165"/>
            <location file="drivers/chibi/cp_song.cpp" line="142"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::has_instruments&apos; can be const." verbose="The member function &apos;CPSong::has_instruments&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="168"/>
            <location file="drivers/chibi/cp_song.cpp" line="153"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::has_linear_slides&apos; can be const." verbose="The member function &apos;CPSong::has_linear_slides&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="171"/>
            <location file="drivers/chibi/cp_song.cpp" line="166"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::has_old_effects&apos; can be const." verbose="The member function &apos;CPSong::has_old_effects&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="174"/>
            <location file="drivers/chibi/cp_song.cpp" line="179"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::has_compatible_gxx&apos; can be const." verbose="The member function &apos;CPSong::has_compatible_gxx&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="177"/>
            <location file="drivers/chibi/cp_song.cpp" line="189"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_speed&apos; can be const." verbose="The member function &apos;CPSong::get_speed&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="180"/>
            <location file="drivers/chibi/cp_song.cpp" line="203"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_tempo&apos; can be const." verbose="The member function &apos;CPSong::get_tempo&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="183"/>
            <location file="drivers/chibi/cp_song.cpp" line="217"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_channel_pan&apos; can be const." verbose="The member function &apos;CPSong::get_channel_pan&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="186"/>
            <location file="drivers/chibi/cp_song.cpp" line="232"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_channel_volume&apos; can be const." verbose="The member function &apos;CPSong::get_channel_volume&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="189"/>
            <location file="drivers/chibi/cp_song.cpp" line="251"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::is_channel_surround&apos; can be const." verbose="The member function &apos;CPSong::is_channel_surround&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="192"/>
            <location file="drivers/chibi/cp_song.cpp" line="305"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::is_channel_mute&apos; can be const." verbose="The member function &apos;CPSong::is_channel_mute&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="195"/>
            <location file="drivers/chibi/cp_song.cpp" line="321"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_channel_chorus&apos; can be const." verbose="The member function &apos;CPSong::get_channel_chorus&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="198"/>
            <location file="drivers/chibi/cp_song.cpp" line="271"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_channel_reverb&apos; can be const." verbose="The member function &apos;CPSong::get_channel_reverb&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="201"/>
            <location file="drivers/chibi/cp_song.cpp" line="291"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_order&apos; can be const." verbose="The member function &apos;CPSong::get_order&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="209"/>
            <location file="drivers/chibi/cp_song.cpp" line="355"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_reverb_mode&apos; can be const." verbose="The member function &apos;CPSong::get_reverb_mode&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="215"/>
            <location file="drivers/chibi/cp_song.cpp" line="520"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_chorus_delay_ms&apos; can be const." verbose="The member function &apos;CPSong::get_chorus_delay_ms&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="223"/>
            <location file="drivers/chibi/cp_song.cpp" line="549"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_chorus_separation_ms&apos; can be const." verbose="The member function &apos;CPSong::get_chorus_separation_ms&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="224"/>
            <location file="drivers/chibi/cp_song.cpp" line="554"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_chorus_depth_ms10&apos; can be const." verbose="The member function &apos;CPSong::get_chorus_depth_ms10&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="225"/>
            <location file="drivers/chibi/cp_song.cpp" line="558"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CPSong::get_chorus_speed_hz10&apos; can be const." verbose="The member function &apos;CPSong::get_chorus_speed_hz10&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/chibi/cp_song.h" line="226"/>
            <location file="drivers/chibi/cp_song.cpp" line="563"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;b2ConvexDecomp::b2Triangle::IsInside&apos; can be const." verbose="The member function &apos;b2ConvexDecomp::b2Triangle::IsInside&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/convex_decomp/b2Triangle.h" line="35"/>
            <location file="drivers/convex_decomp/b2Triangle.cpp" line="59"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class b2Triangle&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class b2Triangle&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="drivers/convex_decomp/b2Triangle.h" line="28"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;b2Polygon&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;b2Polygon&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/convex_decomp/b2Polygon.h" line="64"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;b2PolyNode&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;b2PolyNode&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/convex_decomp/b2Polygon.h" line="117"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sd&apos; is assigned a value that is never used." verbose="Variable &apos;sd&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/event_stream_chibi.cpp" line="90"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sd&apos; is assigned a value that is never used." verbose="Variable &apos;sd&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/event_stream_chibi.cpp" line="142"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sd&apos; is assigned a value that is never used." verbose="Variable &apos;sd&apos; is assigned a value that is never used.">
            <location file="drivers/chibi/event_stream_chibi.cpp" line="309"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;b2Polygon::areaIsSet&apos; is not initialized in the constructor." verbose="Member variable &apos;b2Polygon::areaIsSet&apos; is not initialized in the constructor.">
            <location file="drivers/convex_decomp/b2Polygon.cpp" line="207"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;b2PolyNode::connected&apos; is not initialized in the constructor." verbose="Member variable &apos;b2PolyNode::connected&apos; is not initialized in the constructor.">
            <location file="drivers/convex_decomp/b2Polygon.cpp" line="1477"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;b2PolyNode::connected&apos; is not initialized in the constructor." verbose="Member variable &apos;b2PolyNode::connected&apos; is not initialized in the constructor.">
            <location file="drivers/convex_decomp/b2Polygon.cpp" line="1473"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;position&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;position&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="drivers/convex_decomp/b2Polygon.cpp" line="1478"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;b2ConvexDecomp::b2Polygon::IsConvex&apos; can be const." verbose="The member function &apos;b2ConvexDecomp::b2Polygon::IsConvex&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/convex_decomp/b2Polygon.h" line="66"/>
            <location file="drivers/convex_decomp/b2Polygon.cpp" line="236"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;b2ConvexDecomp::b2PolyNode::IsConnectedTo&apos; can be const." verbose="The member function &apos;b2ConvexDecomp::b2PolyNode::IsConnectedTo&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/convex_decomp/b2Polygon.h" line="122"/>
            <location file="drivers/convex_decomp/b2Polygon.cpp" line="1517"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::channel&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::channel&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/event_stream_chibi.h" line="117"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::freq_mult&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::freq_mult&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/event_stream_chibi.h" line="117"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EventStreamPlaybackChibi::total_usec&apos; is not initialized in the constructor." verbose="Member variable &apos;EventStreamPlaybackChibi::total_usec&apos; is not initialized in the constructor.">
            <location file="drivers/chibi/event_stream_chibi.cpp" line="732"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;depth&apos; is assigned a value that is never used." verbose="Variable &apos;depth&apos; is assigned a value that is never used.">
            <location file="drivers/dds/texture_loader_dds.cpp" line="90"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;format_size&apos; is assigned a value that is never used." verbose="Variable &apos;format_size&apos; is assigned a value that is never used.">
            <location file="drivers/dds/texture_loader_dds.cpp" line="106"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;caps_1&apos; is assigned a value that is never used." verbose="Variable &apos;caps_1&apos; is assigned a value that is never used.">
            <location file="drivers/dds/texture_loader_dds.cpp" line="115"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;caps_2&apos; is assigned a value that is never used." verbose="Variable &apos;caps_2&apos; is assigned a value that is never used.">
            <location file="drivers/dds/texture_loader_dds.cpp" line="116"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;caps_ddsx&apos; is assigned a value that is never used." verbose="Variable &apos;caps_ddsx&apos; is assigned a value that is never used.">
            <location file="drivers/dds/texture_loader_dds.cpp" line="117"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CPMixerImpl&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CPMixerImpl&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/chibi/event_stream_chibi.h" line="174"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EventStreamPlaybackChibi&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EventStreamPlaybackChibi&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/chibi/event_stream_chibi.h" line="271"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned variable &apos;key_ofs&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned variable &apos;key_ofs&apos; can&apos;t be negative so it is unnecessary to test it.">
            <location file="drivers/etc1/rg_etc1.cpp" line="755"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;best_selectors&apos; is not assigned a value." verbose="Variable &apos;best_selectors&apos; is not assigned a value.">
            <location file="drivers/etc1/rg_etc1.cpp" line="2229"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;selectors&apos; is not assigned a value." verbose="Variable &apos;selectors&apos; is not assigned a value.">
            <location file="drivers/etc1/rg_etc1.cpp" line="2237"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;vec3F::m_s&apos; is not initialized in the constructor." verbose="Member variable &apos;vec3F::m_s&apos; is not initialized in the constructor." inconclusive="true">
            <location file="drivers/etc1/rg_etc1.cpp" line="303"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;etc1_optimizer::m_limit&apos; is not initialized in the constructor." verbose="Member variable &apos;etc1_optimizer::m_limit&apos; is not initialized in the constructor.">
            <location file="drivers/etc1/rg_etc1.cpp" line="1358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;etc1_optimizer::m_br&apos; is not initialized in the constructor." verbose="Member variable &apos;etc1_optimizer::m_br&apos; is not initialized in the constructor.">
            <location file="drivers/etc1/rg_etc1.cpp" line="1358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;etc1_optimizer::m_bg&apos; is not initialized in the constructor." verbose="Member variable &apos;etc1_optimizer::m_bg&apos; is not initialized in the constructor.">
            <location file="drivers/etc1/rg_etc1.cpp" line="1358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;etc1_optimizer::m_bb&apos; is not initialized in the constructor." verbose="Member variable &apos;etc1_optimizer::m_bb&apos; is not initialized in the constructor.">
            <location file="drivers/etc1/rg_etc1.cpp" line="1358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;etc1_optimizer::m_luma&apos; is not initialized in the constructor." verbose="Member variable &apos;etc1_optimizer::m_luma&apos; is not initialized in the constructor.">
            <location file="drivers/etc1/rg_etc1.cpp" line="1358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;etc1_optimizer::m_sorted_luma&apos; is not initialized in the constructor." verbose="Member variable &apos;etc1_optimizer::m_sorted_luma&apos; is not initialized in the constructor.">
            <location file="drivers/etc1/rg_etc1.cpp" line="1358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;etc1_optimizer::m_selectors&apos; is not initialized in the constructor." verbose="Member variable &apos;etc1_optimizer::m_selectors&apos; is not initialized in the constructor.">
            <location file="drivers/etc1/rg_etc1.cpp" line="1358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;etc1_optimizer::m_best_selectors&apos; is not initialized in the constructor." verbose="Member variable &apos;etc1_optimizer::m_best_selectors&apos; is not initialized in the constructor.">
            <location file="drivers/etc1/rg_etc1.cpp" line="1358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;etc1_optimizer::m_temp_selectors&apos; is not initialized in the constructor." verbose="Member variable &apos;etc1_optimizer::m_temp_selectors&apos; is not initialized in the constructor.">
            <location file="drivers/etc1/rg_etc1.cpp" line="1358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;potential_solution::m_selectors&apos; is not initialized in the constructor." verbose="Member variable &apos;potential_solution::m_selectors&apos; is not initialized in the constructor.">
            <location file="drivers/etc1/rg_etc1.cpp" line="1442"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;vec3F&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;vec3F&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/etc1/rg_etc1.cpp" line="304"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;params&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;params&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/etc1/rg_etc1.cpp" line="1378"/>
        </error>
        <error id="assignBoolToFloat" severity="style" msg="Boolean value assigned to floating point variable." verbose="Boolean value assigned to floating point variable.">
            <location file="servers/visual/rasterizer.h" line="695"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CanvasLight::radius_cache&apos; is not initialized in the constructor." verbose="Member variable &apos;CanvasLight::radius_cache&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer.h" line="611"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CanvasLight::shadows_next_ptr&apos; is not initialized in the constructor." verbose="Member variable &apos;CanvasLight::shadows_next_ptr&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer.h" line="611"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandLine::width&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandLine::width&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer.h" line="674"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandStyle::margin&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandStyle::margin&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer.h" line="695"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandPolygonPtr::indices&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandPolygonPtr::indices&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer.h" line="730"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandPolygonPtr::points&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandPolygonPtr::points&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer.h" line="730"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandPolygonPtr::uvs&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandPolygonPtr::uvs&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer.h" line="730"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandPolygonPtr::colors&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandPolygonPtr::colors&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer.h" line="730"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CommandCircle::radius&apos; is not initialized in the constructor." verbose="Member variable &apos;CommandCircle::radius&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer.h" line="738"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="628"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::program_node&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::program_node&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_light&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_light&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_texscreen&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_texscreen&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_texpos&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_texpos&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_alpha&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_alpha&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_discard&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_discard&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_time&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_time&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_screen_uv&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_screen_uv&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_normalmap&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_normalmap&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_normal&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_normal&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_texpixel_size&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_texpixel_size&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_worldvec&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_worldvec&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::vertex_code_writes_vertex&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::vertex_code_writes_vertex&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uses_shadow_color&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uses_shadow_color&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::sinh_used&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::sinh_used&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::tanh_used&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::tanh_used&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::cosh_used&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::cosh_used&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::flags&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::flags&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::uniforms&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::uniforms&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderCompilerGLES2::type&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderCompilerGLES2::type&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/shader_compiler_gles2.cpp" line="707"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="drivers/gles2/shader_gles2.cpp" line="213"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;_enums&apos; is assigned a value that is never used." verbose="Variable &apos;_enums&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/shaders/material.glsl.h" line="210"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;_enum_values&apos; is assigned a value that is never used." verbose="Variable &apos;_enum_values&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/shaders/material.glsl.h" line="211"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;_enums&apos; is assigned a value that is never used." verbose="Variable &apos;_enums&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/shaders/canvas.glsl.h" line="169"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;_enum_values&apos; is assigned a value that is never used." verbose="Variable &apos;_enum_values&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/shaders/canvas.glsl.h" line="170"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;_enums&apos; is assigned a value that is never used." verbose="Variable &apos;_enums&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/shaders/canvas_shadow.glsl.h" line="136"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;_enum_values&apos; is assigned a value that is never used." verbose="Variable &apos;_enum_values&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/shaders/canvas_shadow.glsl.h" line="137"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;_enums&apos; is assigned a value that is never used." verbose="Variable &apos;_enums&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/shaders/blur.glsl.h" line="133"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;_enum_values&apos; is assigned a value that is never used." verbose="Variable &apos;_enum_values&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/shaders/blur.glsl.h" line="134"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;_enums&apos; is assigned a value that is never used." verbose="Variable &apos;_enums&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/shaders/copy.glsl.h" line="180"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;_enum_values&apos; is assigned a value that is never used." verbose="Variable &apos;_enum_values&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/shaders/copy.glsl.h" line="181"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The typedef &apos;int64_t&apos; hides a typedef with the same name." verbose="The typedef &apos;int64_t&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/jpg/tinyjpeg-internal.h" line="58"/>
            <location file="drivers/jpg/tinyjpeg-internal.h" line="59"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/jpg/tinyjpeg.c" line="1682"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/jpg/tinyjpeg.c" line="1682"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/jpg/tinyjpeg.c" line="1682"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 4) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 4) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/jpg/tinyjpeg.c" line="1682"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;priv==0&apos; is redundant or there is possible null pointer dereference: priv." verbose="Either the condition &apos;priv==0&apos; is redundant or there is possible null pointer dereference: priv.">
            <location file="drivers/jpg/tinyjpeg.c" line="1918"/>
            <location file="drivers/jpg/tinyjpeg.c" line="1916"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;priv==0&apos; is redundant or there is possible null pointer dereference: priv." verbose="Either the condition &apos;priv==0&apos; is redundant or there is possible null pointer dereference: priv.">
            <location file="drivers/jpg/tinyjpeg.c" line="1918"/>
            <location file="drivers/jpg/tinyjpeg.c" line="1917"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;priv&apos; to itself." verbose="Redundant assignment of &apos;priv&apos; to itself.">
            <location file="drivers/jpg/tinyjpeg.c" line="2168"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;nbits&apos; can be reduced." verbose="The scope of the variable &apos;nbits&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="294"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;size_val&apos; can be reduced." verbose="The scope of the variable &apos;size_val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="338"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count_0&apos; can be reduced." verbose="The scope of the variable &apos;count_0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="338"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;code_size&apos; can be reduced." verbose="The scope of the variable &apos;code_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="401"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="401"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qi&apos; can be reduced." verbose="The scope of the variable &apos;qi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="1584"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;table&apos; can be reduced." verbose="The scope of the variable &apos;table&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="1585"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cid&apos; can be reduced." verbose="The scope of the variable &apos;cid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="1611"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sampling_factor&apos; can be reduced." verbose="The scope of the variable &apos;sampling_factor&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="1611"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;Q_table&apos; can be reduced." verbose="The scope of the variable &apos;Q_table&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="1612"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="1613"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cid&apos; can be reduced." verbose="The scope of the variable &apos;cid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="1661"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;table&apos; can be reduced." verbose="The scope of the variable &apos;table&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="1661"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="1695"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced." verbose="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="1697"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;marker&apos; can be reduced." verbose="The scope of the variable &apos;marker&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/jpg/tinyjpeg.c" line="1781"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;next_free_entry&apos; is assigned a value that is never used." verbose="Variable &apos;next_free_entry&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="443"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="707"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;offset_to_next_row&apos; is assigned a value that is never used." verbose="Variable &apos;offset_to_next_row&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="711"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="859"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="990"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p2&apos; is assigned a value that is never used." verbose="Variable &apos;p2&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="991"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="1145"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p2&apos; is assigned a value that is never used." verbose="Variable &apos;p2&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="1146"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;width&apos; is assigned a value that is never used." verbose="Variable &apos;width&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="1537"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;height&apos; is assigned a value that is never used." verbose="Variable &apos;height&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="1536"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nr_components&apos; is assigned a value that is never used." verbose="Variable &apos;nr_components&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="1538"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;precision&apos; is assigned a value that is never used." verbose="Variable &apos;precision&apos; is assigned a value that is never used.">
            <location file="drivers/jpg/tinyjpeg.c" line="1535"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ParticleData::random&apos; is not initialized in the constructor." verbose="Member variable &apos;ParticleData::random&apos; is not initialized in the constructor.">
            <location file="servers/visual/particle_system_sw.h" line="99"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Texture::alloc_width&apos; is not initialized in the constructor." verbose="Member variable &apos;Texture::alloc_width&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="144"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Texture::alloc_height&apos; is not initialized in the constructor." verbose="Member variable &apos;Texture::alloc_height&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="144"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Shader::mode&apos; is not initialized in the constructor." verbose="Member variable &apos;Shader::mode&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="207"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Shader::uses_texpixel_size&apos; is not initialized in the constructor." verbose="Member variable &apos;Shader::uses_texpixel_size&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="207"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Geometry::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Geometry::type&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="298"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Surface::mesh&apos; is not initialized in the constructor." verbose="Member variable &apos;Surface::mesh&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="371"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Surface::max_bone&apos; is not initialized in the constructor." verbose="Member variable &apos;Surface::max_bone&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="371"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Surface::configured_format&apos; is not initialized in the constructor." verbose="Member variable &apos;Surface::configured_format&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="371"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MultiMeshSurface::surface&apos; is not initialized in the constructor." verbose="Member variable &apos;MultiMeshSurface::surface&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="430"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Element::color&apos; is not initialized in the constructor." verbose="Member variable &apos;Element::color&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="439"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Immediate::mask&apos; is not initialized in the constructor." verbose="Member variable &apos;Immediate::mask&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="510"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::type&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="639"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightInstance::base&apos; is not initialized in the constructor." verbose="Member variable &apos;LightInstance::base&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="808"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightInstance::linear_att&apos; is not initialized in the constructor." verbose="Member variable &apos;LightInstance::linear_att&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="808"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightInstance::shadow_split&apos; is not initialized in the constructor." verbose="Member variable &apos;LightInstance::shadow_split&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="808"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RenderList::_elements&apos; is not initialized in the constructor." verbose="Member variable &apos;RenderList::_elements&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="1032"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RenderList::elements&apos; is not initialized in the constructor." verbose="Member variable &apos;RenderList::elements&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="1032"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RenderList::element_count&apos; is not initialized in the constructor." verbose="Member variable &apos;RenderList::element_count&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="1032"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FrameBuffer::width&apos; is not initialized in the constructor." verbose="Member variable &apos;FrameBuffer::width&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="1160"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FrameBuffer::height&apos; is not initialized in the constructor." verbose="Member variable &apos;FrameBuffer::height&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="1160"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FrameBuffer::scale&apos; is not initialized in the constructor." verbose="Member variable &apos;FrameBuffer::scale&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="1160"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FrameBuffer::active&apos; is not initialized in the constructor." verbose="Member variable &apos;FrameBuffer::active&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.h" line="1160"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="drivers/jpg/tinyjpeg.c" line="2181"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/jpg/tinyjpeg.c" line="450"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/jpg/tinyjpeg.c" line="1648"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/jpg/tinyjpeg.c" line="1648"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/jpg/tinyjpeg.c" line="1683"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="drivers/jpg/tinyjpeg.c" line="1719"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 5438." verbose="Expression is always false because &apos;else if&apos; condition matches previous condition at line 5438.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="5453"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 5478." verbose="Expression is always false because &apos;else if&apos; condition matches previous condition at line 5478.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="5478"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 5479." verbose="Expression is always false because &apos;else if&apos; condition matches previous condition at line 5479.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="5479"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 5480." verbose="Expression is always false because &apos;else if&apos; condition matches previous condition at line 5480.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="5480"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 5481." verbose="Expression is always false because &apos;else if&apos; condition matches previous condition at line 5481.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="5481"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="5162"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="5932"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="6173"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;r_gl_internal_format&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;r_gl_internal_format&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="685"/>
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="684"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;elem_count&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;elem_count&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="1946"/>
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="1941"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;elem_count&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;elem_count&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="1954"/>
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="1950"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;elem_count&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;elem_count&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="1966"/>
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="1962"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;elem_count&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;elem_count&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="1974"/>
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="1970"/>
        </error>
        <error id="duplicateBranch" severity="style" msg="Found duplicate branches for &apos;if&apos; and &apos;else&apos;." verbose="Finding the same code in an &apos;if&apos; and related &apos;else&apos; branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." inconclusive="true">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="10740"/>
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="10747"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;scale&apos; can be reduced." verbose="The scope of the variable &apos;scale&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="2147"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;scale&apos; can be reduced." verbose="The scope of the variable &apos;scale&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="2326"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev_overrides&apos; can be reduced." verbose="The scope of the variable &apos;prev_overrides&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="6310"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev_geometry_type&apos; can be reduced." verbose="The scope of the variable &apos;prev_geometry_type&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="6316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dp_direction&apos; can be reduced." verbose="The scope of the variable &apos;dp_direction&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="7439"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;vert_array&apos; is assigned a value that is never used." verbose="Variable &apos;vert_array&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="204"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;normal_array&apos; is assigned a value that is never used." verbose="Variable &apos;normal_array&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="223"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;color_array&apos; is assigned a value that is never used." verbose="Variable &apos;color_array&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="247"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tangent_array&apos; is assigned a value that is never used." verbose="Variable &apos;tangent_array&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="271"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;uv_array&apos; is assigned a value that is never used." verbose="Variable &apos;uv_array&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="294"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;src_stride&apos; is assigned a value that is never used." verbose="Variable &apos;src_stride&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="5843"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;restore_tex&apos; is assigned a value that is never used." verbose="Variable &apos;restore_tex&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="6162"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="6242"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tex_idx&apos; is assigned a value that is never used." verbose="Variable &apos;tex_idx&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="6243"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;prev_overrides&apos; is assigned a value that is never used." verbose="Variable &apos;prev_overrides&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="6372"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;prev_geometry_type&apos; is assigned a value that is never used." verbose="Variable &apos;prev_geometry_type&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="6375"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;z_near&apos; is assigned a value that is never used." verbose="Variable &apos;z_near&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="7571"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;z_far&apos; is assigned a value that is never used." verbose="Variable &apos;z_far&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="7572"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;vp_height&apos; is assigned a value that is never used." verbose="Variable &apos;vp_height&apos; is assigned a value that is never used.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="8738"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/mpc/audio_stream_mpc.cpp" line="112"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/mpc/audio_stream_mpc.cpp" line="118"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/mpc/audio_stream_mpc.cpp" line="124"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/mpc/audio_stream_mpc.cpp" line="130"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/mpc/audio_stream_mpc.cpp" line="137"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;YL&apos; can be reduced." verbose="The scope of the variable &apos;YL&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/mpc/mpc_decoder.c" line="196"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;YR&apos; can be reduced." verbose="The scope of the variable &apos;YR&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/mpc/mpc_decoder.c" line="197"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;L&apos; can be reduced." verbose="The scope of the variable &apos;L&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/mpc/mpc_decoder.c" line="198"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;R&apos; can be reduced." verbose="The scope of the variable &apos;R&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/mpc/mpc_decoder.c" line="199"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp&apos; can be reduced." verbose="The scope of the variable &apos;tmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/mpc/mpc_decoder.c" line="561"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;offset&apos; can be reduced." verbose="The scope of the variable &apos;offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/mpc/mpc_demux.c" line="78"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/mpc/mpc_demux.c" line="316"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;int&apos;." verbose="%u in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;int&apos;.">
            <location file="drivers/mpc/streaminfo.c" line="113"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 3) requires &apos;unsigned int&apos; but the argument type is &apos;int&apos;." verbose="%u in format string (no. 3) requires &apos;unsigned int&apos; but the argument type is &apos;int&apos;.">
            <location file="drivers/mpc/streaminfo.c" line="113"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%u in format string (no. 4) requires &apos;unsigned int&apos; but the argument type is &apos;int&apos;." verbose="%u in format string (no. 4) requires &apos;unsigned int&apos; but the argument type is &apos;int&apos;.">
            <location file="drivers/mpc/streaminfo.c" line="113"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;Estimatedpeak_title&apos; is assigned a value that is never used." verbose="Variable &apos;Estimatedpeak_title&apos; is assigned a value that is never used.">
            <location file="drivers/mpc/streaminfo.c" line="141"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::pvr_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::pvr_supported&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::pvr_srgb_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::pvr_srgb_supported&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::s3tc_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::s3tc_supported&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::s3tc_srgb_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::s3tc_srgb_supported&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::latc_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::latc_supported&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::etc_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::etc_supported&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::atitc_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::atitc_supported&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::npo2_textures_available&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::npo2_textures_available&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::full_float_fb_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::full_float_fb_supported&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::srgb_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::srgb_supported&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::float_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::float_supported&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::float_linear_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::float_linear_supported&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::use_shadow_esm&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::use_shadow_esm&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::use_shadow_pcf&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::use_shadow_pcf&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &apos;p_bytes&apos; is less than zero." verbose="The unsigned variable &apos;p_bytes&apos; will never be negative so it is either pointless or an error to check if it is.">
            <location file="drivers/nedmalloc/memory_pool_static_nedmalloc.cpp" line="61"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::use_hw_skeleton_xform&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::use_hw_skeleton_xform&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &apos;p_bytes&apos; is less than zero." verbose="The unsigned variable &apos;p_bytes&apos; will never be negative so it is either pointless or an error to check if it is.">
            <location file="drivers/nedmalloc/memory_pool_static_nedmalloc.cpp" line="64"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::use_depth24&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::use_depth24&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::use_texture_instancing&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::use_texture_instancing&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::use_attribute_instancing&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::use_attribute_instancing&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::use_rgba_shadowmaps&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::use_rgba_shadowmaps&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::use_anisotropic_filter&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::use_anisotropic_filter&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::anisotropic_level&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::anisotropic_level&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::use_half_float&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::use_half_float&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::particle_draw_info&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::particle_draw_info&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::light_instances&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::light_instances&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::directional_lights&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::directional_lights&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::light_instance_count&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::light_instance_count&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::directional_light_count&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::directional_light_count&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::last_light_id&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::last_light_id&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::current_depth_test&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::current_depth_test&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::current_depth_mask&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::current_depth_mask&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::current_blend_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::current_blend_mode&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::max_texture_size&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::max_texture_size&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::shadow_mat_ptr&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::shadow_mat_ptr&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::max_texture_units&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::max_texture_units&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::camera_z_near&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::camera_z_near&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::camera_z_far&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::camera_z_far&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::camera_ortho&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::camera_ortho&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::texscreen_copied&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::texscreen_copied&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::texscreen_used&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::texscreen_used&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::shadow&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::shadow&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::shadow_pass&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::shadow_pass&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::shadow_near_far_split_size_ratio&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::shadow_near_far_split_size_ratio&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::_rinfo&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::_rinfo&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::current_rt&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::current_rt&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::current_rt_transparent&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::current_rt_transparent&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::current_rt_vflip&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::current_rt_vflip&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::current_vd&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::current_vd&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::canvas_opacity&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::canvas_opacity&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::canvas_use_modulate&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::canvas_use_modulate&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::uses_texpixel_size&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::uses_texpixel_size&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::rebind_texpixel_size&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::rebind_texpixel_size&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::canvas_last_material&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::canvas_last_material&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::canvas_texscreen_used&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::canvas_texscreen_used&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::canvas_blend_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::canvas_blend_mode&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::_setup_geometry_vinfo&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::_setup_geometry_vinfo&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::cull_front&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::cull_front&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::lights_use_shadow&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::lights_use_shadow&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::using_canvas_bg&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::using_canvas_bg&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::last_time&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::last_time&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::time_delta&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::time_delta&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::scene_pass&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::scene_pass&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::current_env&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::current_env&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerGLES2::shader_time_rollback&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerGLES2::shader_time_rollback&apos; is not initialized in the constructor.">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="11129"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RasterizerGLES2::_get_gl_image_and_format&apos; can be const." verbose="The member function &apos;RasterizerGLES2::_get_gl_image_and_format&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/gles2/rasterizer_gles2.h" line="112"/>
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="369"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerGLES2::_surface_set_arrays&apos; can be static." verbose="The member function &apos;RasterizerGLES2::_surface_set_arrays&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/gles2/rasterizer_gles2.h" line="422"/>
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="2119"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerGLES2::_draw_primitive&apos; can be static." verbose="The member function &apos;RasterizerGLES2::_draw_primitive&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/gles2/rasterizer_gles2.h" line="1288"/>
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="164"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerGLES2::_test_depth_shadow_buffer&apos; can be static." verbose="The member function &apos;RasterizerGLES2::_test_depth_shadow_buffer&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/gles2/rasterizer_gles2.h" line="1296"/>
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="10535"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!use_fbo&apos; is always false" verbose="Condition &apos;!use_fbo&apos; is always false">
            <location file="drivers/gles2/rasterizer_gles2.cpp" line="10256"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;mspace&apos; hides a typedef with the same name." verbose="The variable &apos;mspace&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/nedmalloc/malloc.c.h" line="1141"/>
            <location file="drivers/nedmalloc/nedmalloc.cpp" line="177"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: sp" verbose="Possible null pointer dereference: sp">
            <location file="drivers/nedmalloc/malloc.c.h" line="4138"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: sp" verbose="Possible null pointer dereference: sp">
            <location file="drivers/nedmalloc/malloc.c.h" line="4151"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;br&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;br&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/nedmalloc/malloc.c.h" line="4094"/>
            <location file="drivers/nedmalloc/malloc.c.h" line="4091"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;end&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;end&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/nedmalloc/malloc.c.h" line="4095"/>
            <location file="drivers/nedmalloc/malloc.c.h" line="4092"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;msp&apos; to itself." verbose="Redundant assignment of &apos;msp&apos; to itself.">
            <location file="drivers/nedmalloc/malloc.c.h" line="5279"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.">
            <location file="drivers/nedmalloc/malloc.c.h" line="3917"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.">
            <location file="drivers/nedmalloc/malloc.c.h" line="3972"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.">
            <location file="drivers/nedmalloc/malloc.c.h" line="4216"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.">
            <location file="drivers/nedmalloc/malloc.c.h" line="4359"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="drivers/nedmalloc/malloc.c.h" line="4452"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.">
            <location file="drivers/nedmalloc/malloc.c.h" line="5285"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.">
            <location file="drivers/nedmalloc/malloc.c.h" line="5359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;magic&apos; can be reduced." verbose="The scope of the variable &apos;magic&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/nedmalloc/malloc.c.h" line="3058"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;array_chunk&apos; can be reduced." verbose="The scope of the variable &apos;array_chunk&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/nedmalloc/malloc.c.h" line="4592"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tc&apos; can be reduced." verbose="The scope of the variable &apos;tc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/nedmalloc/nedmalloc.cpp" line="686"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;extra&apos; is assigned a value that is never used." verbose="Variable &apos;extra&apos; is assigned a value that is never used.">
            <location file="drivers/nedmalloc/malloc.c.h" line="4259"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;threadstuff_t::cachesync1&apos; is never used." verbose="struct or union member &apos;threadstuff_t::cachesync1&apos; is never used.">
            <location file="drivers/nedmalloc/test.c" line="21"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;threadstuff_t::cachesync2&apos; is never used." verbose="struct or union member &apos;threadstuff_t::cachesync2&apos; is never used.">
            <location file="drivers/nedmalloc/test.c" line="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;toallocptr&apos; is assigned a value that is never used." verbose="Variable &apos;toallocptr&apos; is assigned a value that is never used.">
            <location file="drivers/nedmalloc/test.c" line="109"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." verbose="Array index -1 is out of bounds.">
            <location file="drivers/nedmalloc/test.c" line="239"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." verbose="Array index -1 is out of bounds.">
            <location file="drivers/nedmalloc/test.c" line="240"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." verbose="Array index -1 is out of bounds.">
            <location file="drivers/nedmalloc/test.c" line="241"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;nrex_search::complete&apos; is not initialized in the constructor." verbose="Member variable &apos;nrex_search::complete&apos; is not initialized in the constructor.">
            <location file="drivers/nrex/nrex.cpp" line="157"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;nrex_search::at&apos; can be const." verbose="The member function &apos;nrex_search::at&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/nrex/nrex.cpp" line="152"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;nrex_node&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;nrex_node&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/nrex/nrex.cpp" line="172"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;nrex_node_group&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;nrex_node_group&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/nrex/nrex.cpp" line="218"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;nrex_node_char&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;nrex_node_char&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/nrex/nrex.cpp" line="323"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;nrex_node_shorthand&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;nrex_node_shorthand&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/nrex/nrex.cpp" line="399"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;nrex_node_anchor&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;nrex_node_anchor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/nrex/nrex.cpp" line="551"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;nrex_node_backreference&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;nrex_node_backreference&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/nrex/nrex.cpp" line="575"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;end&apos; is used before limits check." verbose="Defensive programming: The variable &apos;end&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="drivers/nedmalloc/nedmalloc.cpp" line="959"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;nrex_compile_error&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;nrex_compile_error&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/nrex/nrex.hpp" line="132"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/ogg/bitwise.c" line="708"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;." verbose="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;unsigned long&apos;.">
            <location file="drivers/ogg/bitwise.c" line="794"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;acc&apos; can be reduced." verbose="The scope of the variable &apos;acc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/ogg/framing.c" line="377"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/openssl/stream_peer_openssl.cpp" line="125"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/openssl/stream_peer_openssl.cpp" line="173"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/openssl/stream_peer_openssl.cpp" line="207"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;common_name_loc&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;common_name_loc&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/openssl/stream_peer_openssl.cpp" line="24"/>
            <location file="drivers/openssl/stream_peer_openssl.cpp" line="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s&apos; is assigned a value that is never used." verbose="Variable &apos;s&apos; is assigned a value that is never used.">
            <location file="drivers/openssl/stream_peer_openssl.cpp" line="438"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;StreamPeerOpenSSL::validate_certs&apos; is not initialized in the constructor." verbose="Member variable &apos;StreamPeerOpenSSL::validate_certs&apos; is not initialized in the constructor.">
            <location file="drivers/openssl/stream_peer_openssl.cpp" line="482"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;StreamPeerOpenSSL::validate_hostname&apos; is not initialized in the constructor." verbose="Member variable &apos;StreamPeerOpenSSL::validate_hostname&apos; is not initialized in the constructor.">
            <location file="drivers/openssl/stream_peer_openssl.cpp" line="482"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The typedef &apos;png_error_ptr&apos; hides a typedef with the same name." verbose="The typedef &apos;png_error_ptr&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/png.h" line="853"/>
            <location file="drivers/png/image_loader_png.cpp" line="68"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/png/image_loader_png.cpp" line="265"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: t" verbose="Unused variable: t">
            <location file="drivers/png/image_loader_png.cpp" line="107"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pngb&apos; is assigned a value that is never used." verbose="Variable &apos;pngb&apos; is assigned a value that is never used.">
            <location file="drivers/png/image_loader_png.cpp" line="358"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;newsize&apos; is assigned a value that is never used." verbose="Variable &apos;newsize&apos; is assigned a value that is never used.">
            <location file="drivers/nedmalloc/malloc.c.h" line="4249"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/image_loader_png.cpp" line="1"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;png_ptr==0&apos; is redundant or there is possible null pointer dereference: p." verbose="Either the condition &apos;png_ptr==0&apos; is redundant or there is possible null pointer dereference: p.">
            <location file="drivers/png/png.c" line="80"/>
            <location file="drivers/png/png.c" line="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/png.c" line="472"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_uint_32&apos; hides a typedef with the same name." verbose="The variable &apos;png_uint_32&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="444"/>
            <location file="drivers/png/png.h" line="978"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_int_32&apos; hides a typedef with the same name." verbose="The variable &apos;png_int_32&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="445"/>
            <location file="drivers/png/png.h" line="2049"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_uint_16&apos; hides a typedef with the same name." verbose="The variable &apos;png_uint_16&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="447"/>
            <location file="drivers/png/png.h" line="2584"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_byte&apos; hides a typedef with the same name." verbose="The variable &apos;png_byte&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="449"/>
            <location file="drivers/png/png.h" line="1153"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_size_t&apos; hides a typedef with the same name." verbose="The variable &apos;png_size_t&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="454"/>
            <location file="drivers/png/png.h" line="1011"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_fixed_point&apos; hides a typedef with the same name." verbose="The variable &apos;png_fixed_point&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="521"/>
            <location file="drivers/png/png.h" line="2045"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_voidp&apos; hides a typedef with the same name." verbose="The variable &apos;png_voidp&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="524"/>
            <location file="drivers/png/png.h" line="1747"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_const_bytep&apos; hides a typedef with the same name." verbose="The variable &apos;png_const_bytep&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="527"/>
            <location file="drivers/png/png.h" line="2061"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_const_charp&apos; hides a typedef with the same name." verbose="The variable &apos;png_const_charp&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="537"/>
            <location file="drivers/png/png.h" line="1102"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_bytepp&apos; hides a typedef with the same name." verbose="The variable &apos;png_bytepp&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="553"/>
            <location file="drivers/png/png.h" line="1992"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_alloc_size_t&apos; hides a typedef with the same name." verbose="The variable &apos;png_alloc_size_t&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="591"/>
            <location file="drivers/png/png.h" line="2423"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_infop&apos; hides a typedef with the same name." verbose="The variable &apos;png_infop&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/png.h" line="715"/>
            <location file="drivers/png/png.h" line="1082"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_structp&apos; hides a typedef with the same name." verbose="The variable &apos;png_structp&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/png.h" line="843"/>
            <location file="drivers/png/png.h" line="1002"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg&apos; can be reduced." verbose="The scope of the variable &apos;msg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngerror.c" line="423"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;msg&apos; can be reduced." verbose="The scope of the variable &apos;msg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngerror.c" line="439"/>
        </error>
        <error id="sizeofCalculation" severity="warning" msg="Found calculation inside sizeof()." verbose="Found calculation inside sizeof().">
            <location file="drivers/png/pngerror.c" line="248"/>
        </error>
        <error id="charLiteralWithCharPtrCompare" severity="warning" msg="Char literal compared with pointer &apos;parm&apos;. Did you intend to dereference it?" verbose="Char literal compared with pointer &apos;parm&apos;. Did you intend to dereference it?">
            <location file="drivers/png/pngerror.c" line="322"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngerror.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/png.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;short_months&apos; can be reduced." verbose="The scope of the variable &apos;short_months&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/png.c" line="595"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_STRING_COPYRIGHT&apos; since the value of &apos;PNG_STRING_COPYRIGHT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_STRING_COPYRIGHT&apos; since the value of &apos;PNG_STRING_COPYRIGHT&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/png.c" line="1"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sub_table&apos; is assigned a value that is never used." verbose="Variable &apos;sub_table&apos; is assigned a value that is never used.">
            <location file="drivers/png/png.c" line="2589"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;table&apos; is assigned a value that is never used." verbose="Variable &apos;table&apos; is assigned a value that is never used.">
            <location file="drivers/png/png.c" line="2656"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;table&apos; is assigned a value that is never used." verbose="Variable &apos;table&apos; is assigned a value that is never used.">
            <location file="drivers/png/png.c" line="2676"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: XYZ" verbose="Uninitialized variable: XYZ">
            <location file="drivers/png/pngget.c" line="566"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: XYZ" verbose="Uninitialized variable: XYZ">
            <location file="drivers/png/pngget.c" line="568"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: XYZ" verbose="Uninitialized variable: XYZ">
            <location file="drivers/png/pngget.c" line="570"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: XYZ" verbose="Uninitialized variable: XYZ">
            <location file="drivers/png/pngget.c" line="572"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: XYZ" verbose="Uninitialized variable: XYZ">
            <location file="drivers/png/pngget.c" line="574"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: XYZ" verbose="Uninitialized variable: XYZ">
            <location file="drivers/png/pngget.c" line="576"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: XYZ" verbose="Uninitialized variable: XYZ">
            <location file="drivers/png/pngget.c" line="578"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: XYZ" verbose="Uninitialized variable: XYZ">
            <location file="drivers/png/pngget.c" line="580"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: XYZ" verbose="Uninitialized variable: XYZ">
            <location file="drivers/png/pngget.c" line="582"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;dummy_struct&apos; is not assigned a value." verbose="Variable &apos;dummy_struct&apos; is not assigned a value.">
            <location file="drivers/png/pngmem.c" line="407"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;dummy_struct&apos; is not assigned a value." verbose="Variable &apos;dummy_struct&apos; is not assigned a value.">
            <location file="drivers/png/pngmem.c" line="455"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngget.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngmem.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngpread.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_start&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngpread.c" line="1207"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_inc&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_inc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngpread.c" line="1210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_ystart&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_ystart&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngpread.c" line="1213"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_yinc&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_yinc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngpread.c" line="1216"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngread.c" line="381"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rp&apos; can be reduced." verbose="The scope of the variable &apos;rp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngread.c" line="738"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;row&apos; can be reduced." verbose="The scope of the variable &apos;row&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngread.c" line="1129"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngrio.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngread.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;save&apos; can be reduced." verbose="The scope of the variable &apos;save&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="2705"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;save&apos; can be reduced." verbose="The scope of the variable &apos;save&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="2751"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="3080"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sp&apos; can be reduced." verbose="The scope of the variable &apos;sp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="3489"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="3490"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;shift&apos; can be reduced." verbose="The scope of the variable &apos;shift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="3493"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4196"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;shift&apos; can be reduced." verbose="The scope of the variable &apos;shift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4459"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4459"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sp&apos; can be reduced." verbose="The scope of the variable &apos;sp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dp&apos; can be reduced." verbose="The scope of the variable &apos;dp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4461"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;shift&apos; can be reduced." verbose="The scope of the variable &apos;shift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4612"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4612"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sp&apos; can be reduced." verbose="The scope of the variable &apos;sp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4613"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dp&apos; can be reduced." verbose="The scope of the variable &apos;dp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4613"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4614"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sp&apos; can be reduced." verbose="The scope of the variable &apos;sp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4870"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dp&apos; can be reduced." verbose="The scope of the variable &apos;dp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4870"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4871"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;g&apos; can be reduced." verbose="The scope of the variable &apos;g&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b&apos; can be reduced." verbose="The scope of the variable &apos;b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4917"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;g&apos; can be reduced." verbose="The scope of the variable &apos;g&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4917"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b&apos; can be reduced." verbose="The scope of the variable &apos;b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4917"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrtran.c" line="4917"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;read&apos; can be reduced." verbose="The scope of the variable &apos;read&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrio.c" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrio.c" line="97"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_uint_32&apos; hides a typedef with the same name." verbose="The variable &apos;png_uint_32&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="444"/>
            <location file="drivers/png/pngrutil.c" line="69"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_int_32&apos; hides a typedef with the same name." verbose="The variable &apos;png_int_32&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="445"/>
            <location file="drivers/png/pngrutil.c" line="86"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The variable &apos;png_uint_16&apos; hides a typedef with the same name." verbose="The variable &apos;png_uint_16&apos; hides a typedef with the same name." inconclusive="true">
            <location file="drivers/png/pngconf.h" line="447"/>
            <location file="drivers/png/pngrutil.c" line="98"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;new_size&apos; can be reduced." verbose="The scope of the variable &apos;new_size&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="459"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pp&apos; can be reduced." verbose="The scope of the variable &apos;pp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="1377"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="3289"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="3824"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tmp_jmpbuf" verbose="Uninitialized variable: tmp_jmpbuf">
            <location file="drivers/png/pngread.c" line="87"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngrtran.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngset.c" line="1"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dp&apos; is assigned a value that is never used." verbose="Variable &apos;dp&apos; is assigned a value that is never used.">
            <location file="drivers/png/pngrtran.c" line="3099"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dp&apos; is assigned a value that is never used." verbose="Variable &apos;dp&apos; is assigned a value that is never used.">
            <location file="drivers/png/pngrtran.c" line="3115"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dp&apos; is assigned a value that is never used." verbose="Variable &apos;dp&apos; is assigned a value that is never used.">
            <location file="drivers/png/pngrtran.c" line="3132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dp&apos; is assigned a value that is never used." verbose="Variable &apos;dp&apos; is assigned a value that is never used.">
            <location file="drivers/png/pngrtran.c" line="3150"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dp&apos; is assigned a value that is never used." verbose="Variable &apos;dp&apos; is assigned a value that is never used.">
            <location file="drivers/png/pngrtran.c" line="3277"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dp&apos; is assigned a value that is never used." verbose="Variable &apos;dp&apos; is assigned a value that is never used.">
            <location file="drivers/png/pngrtran.c" line="3306"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dp&apos; is assigned a value that is never used." verbose="Variable &apos;dp&apos; is assigned a value that is never used.">
            <location file="drivers/png/pngrtran.c" line="3360"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dp&apos; is assigned a value that is never used." verbose="Variable &apos;dp&apos; is assigned a value that is never used.">
            <location file="drivers/png/pngrtran.c" line="3394"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngtrans.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngrutil.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngwio.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_start&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="3764"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_inc&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_inc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="3767"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_ystart&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_ystart&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="3770"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_yinc&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_yinc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="3773"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_start&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="3896"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_inc&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_inc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="3899"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_ystart&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_ystart&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="3902"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_yinc&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_yinc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngrutil.c" line="3905"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;written&apos; can be reduced." verbose="The scope of the variable &apos;written&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwio.c" line="94"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwio.c" line="94"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngwrite.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngwtran.c" line="1"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." inconclusive="true">
            <location file="drivers/png/pngwrite.c" line="508"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tmp_jmpbuf" verbose="Uninitialized variable: tmp_jmpbuf">
            <location file="drivers/png/pngwrite.c" line="497"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="1327"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sp&apos; can be reduced." verbose="The scope of the variable &apos;sp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2261"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2265"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sp&apos; can be reduced." verbose="The scope of the variable &apos;sp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2299"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2303"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sp&apos; can be reduced." verbose="The scope of the variable &apos;sp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2336"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;value&apos; can be reduced." verbose="The scope of the variable &apos;value&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2340"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sp&apos; can be reduced." verbose="The scope of the variable &apos;sp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2372"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2490"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;v&apos; can be reduced." verbose="The scope of the variable &apos;v&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2687"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file="core/vector.h" line="184"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file="core/vector.h" line="209"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pngb&apos; is assigned a value that is never used." verbose="Variable &apos;pngb&apos; is assigned a value that is never used.">
            <location file="drivers/png/resource_saver_png.cpp" line="136"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;float&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;float&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Point2&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Point2&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;RID&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;RID&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Color&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Color&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Piece&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Piece&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;PNG_EXPORT_LAST_ORDINAL&apos; since the value of &apos;PNG_EXPORT_LAST_ORDINAL&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/png/pngwutil.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_start&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2009"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_inc&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_inc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2012"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_ystart&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_ystart&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2015"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_yinc&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_yinc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2018"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_start&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_inc&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_inc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_ystart&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_ystart&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_yinc&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_yinc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;png_pass_inc&apos; can be reduced." verbose="The scope of the variable &apos;png_pass_inc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/png/pngwutil.c" line="2249"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="87"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverPulseAudio::samples_in&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverPulseAudio::samples_in&apos; is not initialized in the constructor.">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="183"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverPulseAudio::samples_out&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverPulseAudio::samples_out&apos; is not initialized in the constructor.">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="183"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverPulseAudio::mix_rate&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverPulseAudio::mix_rate&apos; is not initialized in the constructor.">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="183"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverPulseAudio::buffer_size&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverPulseAudio::buffer_size&apos; is not initialized in the constructor.">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="183"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverPulseAudio::channels&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverPulseAudio::channels&apos; is not initialized in the constructor.">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="183"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverPulseAudio::active&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverPulseAudio::active&apos; is not initialized in the constructor.">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="183"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverPulseAudio::thread_exited&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverPulseAudio::thread_exited&apos; is not initialized in the constructor.">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="183"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverPulseAudio::exit_thread&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverPulseAudio::exit_thread&apos; is not initialized in the constructor.">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="183"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverPulseAudio::pcm_open&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverPulseAudio::pcm_open&apos; is not initialized in the constructor.">
            <location file="drivers/pulseaudio/audio_driver_pulseaudio.cpp" line="183"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Javelin::ColorRgba::operator%&apos; can be const." verbose="The member function &apos;Javelin::ColorRgba::operator%&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/pvr/ColorRgba.h" line="120"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Javelin::ColorRgba::operator==&apos; can be const." verbose="The member function &apos;Javelin::ColorRgba::operator==&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/pvr/ColorRgba.h" line="127"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Javelin::ColorRgba::operator!=&apos; can be const." verbose="The member function &apos;Javelin::ColorRgba::operator!=&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="drivers/pvr/ColorRgba.h" line="132"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class Bitmap&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class Bitmap&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="drivers/pvr/Bitmap.h" line="7"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/pvr/texture_loader_pvr.cpp" line="660"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp1&apos; can be reduced." verbose="The scope of the variable &apos;tmp1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/pvr/texture_loader_pvr.cpp" line="350"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp2&apos; can be reduced." verbose="The scope of the variable &apos;tmp2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/pvr/texture_loader_pvr.cpp" line="350"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bpp&apos; is assigned a value that is never used." verbose="Variable &apos;bpp&apos; is assigned a value that is never used.">
            <location file="drivers/pvr/texture_loader_pvr.cpp" line="50"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rmask&apos; is assigned a value that is never used." verbose="Variable &apos;rmask&apos; is assigned a value that is never used.">
            <location file="drivers/pvr/texture_loader_pvr.cpp" line="51"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;gmask&apos; is assigned a value that is never used." verbose="Variable &apos;gmask&apos; is assigned a value that is never used.">
            <location file="drivers/pvr/texture_loader_pvr.cpp" line="52"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bmask&apos; is assigned a value that is never used." verbose="Variable &apos;bmask&apos; is assigned a value that is never used.">
            <location file="drivers/pvr/texture_loader_pvr.cpp" line="53"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;amask&apos; is assigned a value that is never used." verbose="Variable &apos;amask&apos; is assigned a value that is never used.">
            <location file="drivers/pvr/texture_loader_pvr.cpp" line="54"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;surfcount&apos; is assigned a value that is never used." verbose="Variable &apos;surfcount&apos; is assigned a value that is never used.">
            <location file="drivers/pvr/texture_loader_pvr.cpp" line="58"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9754"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9832"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9904"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9947"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9972"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="10038"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="10102"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and double* which have an incompatible binary data representation." verbose="Casting between integer* and double* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9725"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9780"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and double* which have an incompatible binary data representation." verbose="Casting between integer* and double* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9791"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9803"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9859"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and double* which have an incompatible binary data representation." verbose="Casting between integer* and double* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9869"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9926"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and double* which have an incompatible binary data representation." verbose="Casting between integer* and double* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9936"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="9993"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and double* which have an incompatible binary data representation." verbose="Casting between integer* and double* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="10003"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="10058"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and double* which have an incompatible binary data representation." verbose="Casting between integer* and double* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="10068"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and float* which have an incompatible binary data representation." verbose="Casting between integer* and float* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="10122"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between integer* and double* which have an incompatible binary data representation." verbose="Casting between integer* and double* which have an incompatible binary data representation.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="10132"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function abs() is not used." verbose="Return value of function abs() is not used.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="250"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function abs() is not used." verbose="Return value of function abs() is not used.">
            <location file="drivers/rtaudio/RtAudio.cpp" line="257"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CallbackInfo::thread&apos; is not initialized in the constructor." verbose="Member variable &apos;CallbackInfo::thread&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="642"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CallbackInfo::priority&apos; is not initialized in the constructor." verbose="Member variable &apos;CallbackInfo::priority&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="642"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;S24::c3&apos; is not initialized in the constructor." verbose="Member variable &apos;S24::c3&apos; is not initialized in the constructor." inconclusive="true">
            <location file="drivers/rtaudio/RtAudio.h" line="667"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::mode&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::mode&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::state&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::state&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::userBuffer&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::userBuffer&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::doConvertBuffer&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::doConvertBuffer&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::userInterleaved&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::userInterleaved&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::deviceInterleaved&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::deviceInterleaved&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::doByteSwap&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::doByteSwap&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::sampleRate&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::sampleRate&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::bufferSize&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::bufferSize&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::nBuffers&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::nBuffers&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::nUserChannels&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::nUserChannels&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::nDeviceChannels&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::nDeviceChannels&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::channelOffset&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::channelOffset&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::latency&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::latency&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::userFormat&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::userFormat&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::deviceFormat&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::deviceFormat&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::mutex&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::convertInfo&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::convertInfo&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RtApiStream::streamTime&apos; is not initialized in the constructor." verbose="Member variable &apos;RtApiStream::streamTime&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/RtAudio.h" line="786"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;RtApiDummy::probeDeviceOpen&apos;" verbose="Unused private function: &apos;RtApiDummy::probeDeviceOpen&apos;">
            <location file="drivers/rtaudio/RtAudio.h" line="1170"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RtApi::byteSwapBuffer&apos; can be static." verbose="The member function &apos;RtApi::byteSwapBuffer&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/rtaudio/RtAudio.h" line="836"/>
            <location file="drivers/rtaudio/RtAudio.cpp" line="10148"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RtApiDummy::probeDeviceOpen&apos; can be static." verbose="The member function &apos;RtApiDummy::probeDeviceOpen&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="drivers/rtaudio/RtAudio.h" line="1170"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RtAudio&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RtAudio&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/rtaudio/RtAudio.h" line="421"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;S24&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;S24&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/rtaudio/RtAudio.h" line="677"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;S24&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;S24&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/rtaudio/RtAudio.h" line="678"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;S24&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;S24&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/rtaudio/RtAudio.h" line="679"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;S24&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;S24&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/rtaudio/RtAudio.h" line="680"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/rtaudio/audio_driver_rtaudio.cpp" line="39"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverRtAudio::dac&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverRtAudio::dac&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/audio_driver_rtaudio.cpp" line="179"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverRtAudio::active&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverRtAudio::active&apos; is not initialized in the constructor.">
            <location file="drivers/rtaudio/audio_driver_rtaudio.cpp" line="179"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frame_offset&apos; can be reduced." verbose="The scope of the variable &apos;frame_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="130"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="48"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;frame_offset&apos; is assigned a value that is never used." verbose="Variable &apos;frame_offset&apos; is assigned a value that is never used.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="138"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: st" verbose="Unused variable: st">
            <location file="drivers/speex/audio_stream_speex.cpp" line="209"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;packet_no&apos; is assigned a value that is never used." verbose="Variable &apos;packet_no&apos; is assigned a value that is never used.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="345"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;read&apos; is assigned a value that is never used." verbose="Variable &apos;read&apos; is assigned a value that is never used.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="439"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::read_ofs&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::read_ofs&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::loop_count&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::loop_count&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::loops&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::loops&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::page_size&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::page_size&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::playing&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::playing&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::paused&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::paused&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::packets_available&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::packets_available&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::nframes&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::nframes&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::frame_size&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::frame_size&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::packet_no&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::packet_no&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::skip_samples&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::skip_samples&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamSpeex::page_nb_packets&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamSpeex::page_nb_packets&apos; is not initialized in the constructor.">
            <location file="drivers/speex/audio_stream_speex.cpp" line="522"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting by a negative value is undefined behaviour" verbose="Shifting by a negative value is undefined behaviour">
            <location file="drivers/speex/fixed_debug.h" line="111"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting by a negative value is undefined behaviour" verbose="Shifting by a negative value is undefined behaviour">
            <location file="drivers/speex/fixed_debug.h" line="125"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting by a negative value is undefined behaviour" verbose="Shifting by a negative value is undefined behaviour">
            <location file="drivers/speex/fixed_debug.h" line="139"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting by a negative value is undefined behaviour" verbose="Shifting by a negative value is undefined behaviour">
            <location file="drivers/speex/fixed_debug.h" line="154"/>
        </error>
        <error id="duplicateBranch" severity="style" msg="Found duplicate branches for &apos;if&apos; and &apos;else&apos;." verbose="Finding the same code in an &apos;if&apos; and related &apos;else&apos; branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." inconclusive="true">
            <location file="drivers/speex/buffer.c" line="167"/>
            <location file="drivers/speex/buffer.c" line="171"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 222." verbose="Expression is always false because &apos;else if&apos; condition matches previous condition at line 222.">
            <location file="drivers/speex/math_approx.h" line="231"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 222." verbose="Expression is always false because &apos;else if&apos; condition matches previous condition at line 222.">
            <location file="drivers/speex/math_approx.h" line="233"/>
        </error>
        <error id="multiCondition" severity="style" msg="Expression is always false because &apos;else if&apos; condition matches previous condition at line 231." verbose="Expression is always false because &apos;else if&apos; condition matches previous condition at line 231.">
            <location file="drivers/speex/math_approx.h" line="233"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;N&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;N&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/speex/cb_search.c" line="288"/>
            <location file="drivers/speex/cb_search.c" line="282"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;shape_cb_size&apos; is assigned a value that is never used." verbose="Variable &apos;shape_cb_size&apos; is assigned a value that is never used.">
            <location file="drivers/speex/cb_search.c" line="534"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;id1&apos; can be reduced." verbose="The scope of the variable &apos;id1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/filterbank.c" line="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;id2&apos; can be reduced." verbose="The scope of the variable &apos;id2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/filterbank.c" line="61"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="57"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="139"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="145"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="147"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="148"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="231"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="300"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="301"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="302"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="303"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="311"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="317"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="319"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="320"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="321"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="323"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="331"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="332"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="333"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="334"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="335"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="336"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="338"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="504"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="538"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="539"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/cb_search.c" line="590"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tmp&apos; is assigned a value that is never used." verbose="Variable &apos;tmp&apos; is assigned a value that is never used.">
            <location file="drivers/speex/cb_search.c" line="323"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;itmp&apos; is not assigned a value." verbose="Variable &apos;itmp&apos; is not assigned a value.">
            <location file="drivers/speex/cb_search.c" line="338"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/filters.c" line="383"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/filters.c" line="395"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/filters.c" line="412"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/filters.c" line="413"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/filters.c" line="448"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/filters.c" line="449"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/filters.c" line="489"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/filters.c" line="490"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/filters.c" line="707"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/jitter.c" line="370"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/jitter.c" line="468"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;incomplete&apos; can be reduced." verbose="The scope of the variable &apos;incomplete&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/jitter.c" line="469"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/jitter.c" line="682"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;incomplete&apos; is assigned a value that is never used." verbose="Variable &apos;incomplete&apos; is assigned a value that is never used.">
            <location file="drivers/speex/jitter.c" line="574"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;EventStreamPlayback&gt;::operator=&apos; should return &apos;Ref&lt;EventStreamPlayback&gt; &amp;&apos;." verbose="The Ref&lt;EventStreamPlayback&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;EventStreamPlayback&gt; &amp;Ref&lt;EventStreamPlayback&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Ref&lt;EventStreamChibi&gt;::operator=&apos; should return &apos;Ref&lt;EventStreamChibi&gt; &amp;&apos;." verbose="The Ref&lt;EventStreamChibi&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Ref&lt;EventStreamChibi&gt; &amp;Ref&lt;EventStreamChibi&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/reference.h" line="171"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;SampleData*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;SampleData*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;SampleData*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;SampleData*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;SampleData*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;SampleData*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;SampleData*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;SampleData*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;SampleData*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;SampleData*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;SampleData*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;EventStreamPlayback&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;EventStreamPlayback&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;EventStreamPlayback&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;EventStreamPlayback&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;EventStreamPlayback&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;EventStreamPlayback&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;EventStreamPlayback&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;EventStreamPlayback&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;EventStreamChibi&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;EventStreamChibi&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="227"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;EventStreamChibi&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;EventStreamChibi&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="241"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;EventStreamChibi&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;EventStreamChibi&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="249"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Ref&lt;EventStreamChibi&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Ref&lt;EventStreamChibi&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/reference.h" line="267"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/kiss_fft.c" line="286"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;best_cdbk&apos; can be reduced." verbose="The scope of the variable &apos;best_cdbk&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/ltp.c" line="379"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/lsp.c" line="247"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/lsp.c" line="248"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/lsp.c" line="304"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/lsp.c" line="305"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/lsp.c" line="442"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/lsp.c" line="443"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/lsp.c" line="445"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/lsp.c" line="446"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/lsp.c" line="455"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/ltp_bfin.h" line="159"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="188"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="189"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="190"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="203"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="204"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="381"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="382"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="397"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="576"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="613"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="614"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="615"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/ltp.c" line="780"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;advance&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;advance&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/speex/nb_celp.c" line="1136"/>
            <location file="drivers/speex/nb_celp.c" line="1134"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;advance&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;advance&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/speex/nb_celp.c" line="1152"/>
            <location file="drivers/speex/nb_celp.c" line="1150"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;roots&apos; can be reduced." verbose="The scope of the variable &apos;roots&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/nb_celp.c" line="255"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pitch&apos; can be reduced." verbose="The scope of the variable &apos;pitch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/nb_celp.c" line="652"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wideband&apos; can be reduced." verbose="The scope of the variable &apos;wideband&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/nb_celp.c" line="1094"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m&apos; can be reduced." verbose="The scope of the variable &apos;m&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/nb_celp.c" line="1095"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;exc&apos; is assigned a value that is never used." verbose="Variable &apos;exc&apos; is assigned a value that is never used.">
            <location file="drivers/speex/nb_celp.c" line="1511"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="284"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="285"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="286"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="287"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="288"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="289"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="290"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="291"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="292"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="304"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="305"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="638"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="639"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="640"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="641"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="642"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="643"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="644"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="859"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="1207"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="1227"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="1281"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="1282"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="1283"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="1410"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/nb_celp.c" line="1466"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sum&apos; can be reduced." verbose="The scope of the variable &apos;sum&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/resample.c" line="339"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sum&apos; can be reduced." verbose="The scope of the variable &apos;sum&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/resample.c" line="439"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/resample.c" line="844"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/resample.c" line="1010"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: j" verbose="Unused variable: j">
            <location file="drivers/speex/resample.c" line="340"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: j" verbose="Unused variable: j">
            <location file="drivers/speex/resample.c" line="438"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;wideband&apos; can be reduced." verbose="The scope of the variable &apos;wideband&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/sb_celp.c" line="877"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;wideband&apos; is assigned a value that is never used." verbose="Variable &apos;wideband&apos; is assigned a value that is never used.">
            <location file="drivers/speex/sb_celp.c" line="925"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;e_low&apos; is assigned a value that is never used." verbose="Variable &apos;e_low&apos; is assigned a value that is never used.">
            <location file="drivers/speex/sb_celp.c" line="321"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;e_high&apos; is assigned a value that is never used." verbose="Variable &apos;e_high&apos; is assigned a value that is never used.">
            <location file="drivers/speex/sb_celp.c" line="321"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="351"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="361"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="362"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="373"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="374"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="375"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="376"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="378"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="379"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="380"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="381"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="386"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="387"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="543"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="544"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="545"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="546"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="561"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="562"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="563"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="704"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="962"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="963"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="967"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="968"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="977"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="991"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/speex/sb_celp.c" line="1062"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;N&apos; is assigned a value that is never used." verbose="Variable &apos;N&apos; is assigned a value that is never used.">
            <location file="drivers/speex/scal.c" line="151"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t6&apos; can be reduced." verbose="The scope of the variable &apos;t6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/smallft.c" line="692"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t7&apos; can be reduced." verbose="The scope of the variable &apos;t7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/smallft.c" line="692"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t8&apos; can be reduced." verbose="The scope of the variable &apos;t8&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/smallft.c" line="692"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t9&apos; can be reduced." verbose="The scope of the variable &apos;t9&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/smallft.c" line="692"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t10&apos; can be reduced." verbose="The scope of the variable &apos;t10&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/speex/smallft.c" line="692"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;va&apos; is assigned a value that is never used." verbose="Variable &apos;va&apos; is assigned a value that is never used.">
            <location file="drivers/speex/vbr.c" line="174"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Vec3::m_x&apos; is not initialized in the constructor." verbose="Member variable &apos;Vec3::m_x&apos; is not initialized in the constructor." inconclusive="true">
            <location file="drivers/squish/maths.h" line="40"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Vec3::m_y&apos; is not initialized in the constructor." verbose="Member variable &apos;Vec3::m_y&apos; is not initialized in the constructor." inconclusive="true">
            <location file="drivers/squish/maths.h" line="40"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Vec3::m_z&apos; is not initialized in the constructor." verbose="Member variable &apos;Vec3::m_z&apos; is not initialized in the constructor." inconclusive="true">
            <location file="drivers/squish/maths.h" line="40"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Sym3x3::m_x&apos; is not initialized in the constructor." verbose="Member variable &apos;Sym3x3::m_x&apos; is not initialized in the constructor." inconclusive="true">
            <location file="drivers/squish/maths.h" line="204"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Vec4::m_x&apos; is not initialized in the constructor." verbose="Member variable &apos;Vec4::m_x&apos; is not initialized in the constructor." inconclusive="true">
            <location file="drivers/squish/simd_float.h" line="40"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Vec4::m_y&apos; is not initialized in the constructor." verbose="Member variable &apos;Vec4::m_y&apos; is not initialized in the constructor." inconclusive="true">
            <location file="drivers/squish/simd_float.h" line="40"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Vec4::m_z&apos; is not initialized in the constructor." verbose="Member variable &apos;Vec4::m_z&apos; is not initialized in the constructor." inconclusive="true">
            <location file="drivers/squish/simd_float.h" line="40"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Vec4::m_w&apos; is not initialized in the constructor." verbose="Member variable &apos;Vec4::m_w&apos; is not initialized in the constructor." inconclusive="true">
            <location file="drivers/squish/simd_float.h" line="40"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_besterror&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_besterror&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="drivers/squish/clusterfit.cpp" line="41"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Sym3x3&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Sym3x3&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/squish/maths.h" line="208"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SingleColourFit::m_error&apos; is not initialized in the constructor." verbose="Member variable &apos;SingleColourFit::m_error&apos; is not initialized in the constructor.">
            <location file="drivers/squish/singlecolourfit.cpp" line="61"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;eax&apos; is assigned a value that is never used." verbose="Variable &apos;eax&apos; is assigned a value that is never used.">
            <location file="drivers/theora/cpu.c" line="206"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ebx&apos; is assigned a value that is never used." verbose="Variable &apos;ebx&apos; is assigned a value that is never used.">
            <location file="drivers/theora/cpu.c" line="206"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;sb_full&apos; to itself." verbose="Redundant assignment of &apos;sb_full&apos; to itself.">
            <location file="drivers/theora/analyze.c" line="288"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;sb_full&apos; to itself." verbose="Redundant assignment of &apos;sb_full&apos; to itself.">
            <location file="drivers/theora/analyze.c" line="326"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb_full_count&apos; can be reduced." verbose="The scope of the variable &apos;sb_full_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="248"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bits&apos; can be reduced." verbose="The scope of the variable &apos;bits&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="286"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb_partial&apos; can be reduced." verbose="The scope of the variable &apos;sb_partial&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="287"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b_coded_count&apos; can be reduced." verbose="The scope of the variable &apos;b_coded_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="289"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;b_coded&apos; can be reduced." verbose="The scope of the variable &apos;b_coded&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="290"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sb_partial&apos; can be reduced." verbose="The scope of the variable &apos;sb_partial&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="325"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uncoded_ssd&apos; can be reduced." verbose="The scope of the variable &apos;uncoded_ssd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="651"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;coded_ssd&apos; can be reduced." verbose="The scope of the variable &apos;coded_ssd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="652"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;coded_dc&apos; can be reduced." verbose="The scope of the variable &apos;coded_dc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="653"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pi&apos; can be reduced." verbose="The scope of the variable &apos;pi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="663"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;d&apos; can be reduced." verbose="The scope of the variable &apos;d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="667"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mapi&apos; can be reduced." verbose="The scope of the variable &apos;mapi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1272"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bi&apos; can be reduced." verbose="The scope of the variable &apos;bi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1273"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fragi&apos; can be reduced." verbose="The scope of the variable &apos;fragi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1274"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;satd&apos; can be reduced." verbose="The scope of the variable &apos;satd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1348"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;best_rate&apos; can be reduced." verbose="The scope of the variable &apos;best_rate&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1350"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;best_overhead&apos; can be reduced." verbose="The scope of the variable &apos;best_overhead&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1351"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;best_fri&apos; can be reduced." verbose="The scope of the variable &apos;best_fri&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1352"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;best_qii&apos; can be reduced." verbose="The scope of the variable &apos;best_qii&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1353"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mapi&apos; can be reduced." verbose="The scope of the variable &apos;mapi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1606"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pli&apos; can be reduced." verbose="The scope of the variable &apos;pli&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1608"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mapi&apos; can be reduced." verbose="The scope of the variable &apos;mapi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1766"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pli&apos; can be reduced." verbose="The scope of the variable &apos;pli&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1770"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sbi_end&apos; can be reduced." verbose="The scope of the variable &apos;sbi_end&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1881"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inter_mv_pref&apos; can be reduced." verbose="The scope of the variable &apos;inter_mv_pref&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="1928"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sb_flags&apos; is assigned a value that is never used." verbose="Variable &apos;sb_flags&apos; is assigned a value that is never used.">
            <location file="drivers/theora/analyze.c" line="1203"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;embs&apos; is assigned a value that is never used." verbose="Variable &apos;embs&apos; is assigned a value that is never used.">
            <location file="drivers/theora/analyze.c" line="1256"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;qi&apos; is assigned a value that is never used." verbose="Variable &apos;qi&apos; is assigned a value that is never used.">
            <location file="drivers/theora/analyze.c" line="1897"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;vdec&apos; is assigned a value that is never used." verbose="Variable &apos;vdec&apos; is assigned a value that is never used.">
            <location file="drivers/theora/analyze.c" line="1912"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;run_count&apos; can be reduced." verbose="The scope of the variable &apos;run_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;run_count&apos; can be reduced." verbose="The scope of the variable &apos;run_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="566"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="602"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="666"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fragi&apos; can be reduced." verbose="The scope of the variable &apos;fragi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="886"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;skip&apos; can be reduced." verbose="The scope of the variable &apos;skip&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="1005"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;token&apos; can be reduced." verbose="The scope of the variable &apos;token&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="1539"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sum0&apos; can be reduced." verbose="The scope of the variable &apos;sum0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="1610"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sum1&apos; can be reduced." verbose="The scope of the variable &apos;sum1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="1611"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rdst&apos; can be reduced." verbose="The scope of the variable &apos;rdst&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="1658"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rsrc&apos; can be reduced." verbose="The scope of the variable &apos;rsrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="1659"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sum0&apos; can be reduced." verbose="The scope of the variable &apos;sum0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="1662"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;sum1&apos; can be reduced." verbose="The scope of the variable &apos;sum1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="1663"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="2072"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stripe_buf" verbose="Uninitialized variable: stripe_buf">
            <location file="drivers/theora/decode.c" line="2164"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: sb_full" verbose="Uninitialized variable: sb_full">
            <location file="drivers/theora/analyze.c" line="288"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: sb_full" verbose="Uninitialized variable: sb_full">
            <location file="drivers/theora/analyze.c" line="326"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses." verbose="Suspicious condition. Comparison operators have higher precedence than bitwise operators. Please clarify the condition with parentheses.">
            <location file="drivers/theora/decode.c" line="2688"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses." verbose="Suspicious condition. Comparison operators have higher precedence than bitwise operators. Please clarify the condition with parentheses.">
            <location file="drivers/theora/decode.c" line="2689"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qiv&apos; can be reduced." verbose="The scope of the variable &apos;qiv&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/decode.c" line="2639"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;huffi&apos; can be reduced." verbose="The scope of the variable &apos;huffi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="2549"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;skip&apos; can be reduced." verbose="The scope of the variable &apos;skip&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/analyze.c" line="2550"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qti&apos; can be reduced." verbose="The scope of the variable &apos;qti&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/dequant.c" line="33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pli&apos; can be reduced." verbose="The scope of the variable &apos;pli&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/dequant.c" line="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t0&apos; can be reduced." verbose="The scope of the variable &apos;t0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encfrag.c" line="274"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t1&apos; can be reduced." verbose="The scope of the variable &apos;t1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encfrag.c" line="275"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t2&apos; can be reduced." verbose="The scope of the variable &apos;t2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encfrag.c" line="276"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t3&apos; can be reduced." verbose="The scope of the variable &apos;t3&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encfrag.c" line="277"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t4&apos; can be reduced." verbose="The scope of the variable &apos;t4&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encfrag.c" line="278"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t5&apos; can be reduced." verbose="The scope of the variable &apos;t5&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encfrag.c" line="279"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t6&apos; can be reduced." verbose="The scope of the variable &apos;t6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encfrag.c" line="280"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t7&apos; can be reduced." verbose="The scope of the variable &apos;t7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encfrag.c" line="281"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r&apos; can be reduced." verbose="The scope of the variable &apos;r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encfrag.c" line="282"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;run_count&apos; can be reduced." verbose="The scope of the variable &apos;run_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encode.c" line="549"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flag&apos; can be reduced." verbose="The scope of the variable &apos;flag&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encode.c" line="550"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pli&apos; can be reduced." verbose="The scope of the variable &apos;pli&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encode.c" line="551"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;quadi&apos; can be reduced." verbose="The scope of the variable &apos;quadi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encode.c" line="569"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bi&apos; can be reduced." verbose="The scope of the variable &apos;bi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encode.c" line="570"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fragi&apos; can be reduced." verbose="The scope of the variable &apos;fragi&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encode.c" line="571"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mb_mode&apos; can be reduced." verbose="The scope of the variable &apos;mb_mode&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/encode.c" line="603"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: img" verbose="Uninitialized variable: img">
            <location file="drivers/theora/encode.c" line="1513"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;inext&apos; can be reduced." verbose="The scope of the variable &apos;inext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/huffdec.c" line="324"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bits&apos; can be reduced." verbose="The scope of the variable &apos;bits&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/huffdec.c" line="482"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;.">
            <location file="drivers/theora/internal.c" line="261"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;best_site&apos; can be reduced." verbose="The scope of the variable &apos;best_site&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/mcenc.c" line="367"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;err&apos; can be reduced." verbose="The scope of the variable &apos;err&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/mcenc.c" line="599"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nmbi&apos; is assigned a value that is never used." verbose="Variable &apos;nmbi&apos; is assigned a value that is never used.">
            <location file="drivers/theora/mcenc.c" line="147"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qi1&apos; can be reduced." verbose="The scope of the variable &apos;qi1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/rate.c" line="155"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fplane&apos; can be reduced." verbose="The scope of the variable &apos;fplane&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/state.c" line="269"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;crop_x0&apos; can be reduced." verbose="The scope of the variable &apos;crop_x0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/state.c" line="270"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;crop_y0&apos; can be reduced." verbose="The scope of the variable &apos;crop_y0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/state.c" line="271"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;crop_xf&apos; can be reduced." verbose="The scope of the variable &apos;crop_xf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/state.c" line="272"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;crop_yf&apos; can be reduced." verbose="The scope of the variable &apos;crop_yf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/state.c" line="273"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/state.c" line="275"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/state.c" line="1079"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;best_bits&apos; to itself." verbose="Redundant assignment of &apos;best_bits&apos; to itself.">
            <location file="drivers/theora/tokenize.c" line="247"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;best_next&apos; to itself." verbose="Redundant assignment of &apos;best_next&apos; to itself.">
            <location file="drivers/theora/tokenize.c" line="248"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;best_token&apos; to itself." verbose="Redundant assignment of &apos;best_token&apos; to itself.">
            <location file="drivers/theora/tokenize.c" line="249"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;best_eb&apos; to itself." verbose="Redundant assignment of &apos;best_eb&apos; to itself.">
            <location file="drivers/theora/tokenize.c" line="250"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;best_qc&apos; to itself." verbose="Redundant assignment of &apos;best_qc&apos; to itself.">
            <location file="drivers/theora/tokenize.c" line="251"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;token1&apos; to itself." verbose="Redundant assignment of &apos;token1&apos; to itself.">
            <location file="drivers/theora/tokenize.c" line="795"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;eb1&apos; to itself." verbose="Redundant assignment of &apos;eb1&apos; to itself.">
            <location file="drivers/theora/tokenize.c" line="796"/>
        </error>
        <error id="selfAssignment" severity="warning" msg="Redundant assignment of &apos;ti&apos; to itself." verbose="Redundant assignment of &apos;ti&apos; to itself.">
            <location file="drivers/theora/tokenize.c" line="1035"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/tokenize.c" line="301"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val_s&apos; can be reduced." verbose="The scope of the variable &apos;val_s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theora/tokenize.c" line="302"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: best_bits" verbose="Uninitialized variable: best_bits">
            <location file="drivers/theora/tokenize.c" line="247"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: best_next" verbose="Uninitialized variable: best_next">
            <location file="drivers/theora/tokenize.c" line="248"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: best_token" verbose="Uninitialized variable: best_token">
            <location file="drivers/theora/tokenize.c" line="249"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: best_eb" verbose="Uninitialized variable: best_eb">
            <location file="drivers/theora/tokenize.c" line="250"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: best_qc" verbose="Uninitialized variable: best_qc">
            <location file="drivers/theora/tokenize.c" line="251"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: token1" verbose="Uninitialized variable: token1">
            <location file="drivers/theora/tokenize.c" line="795"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: eb1" verbose="Uninitialized variable: eb1">
            <location file="drivers/theora/tokenize.c" line="796"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ti" verbose="Uninitialized variable: ti">
            <location file="drivers/theora/tokenize.c" line="1035"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;symbol&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;symbol&apos; is reassigned a value before the old one has been used.">
            <location file="drivers/gl_context/glew.c" line="107"/>
            <location file="drivers/gl_context/glew.c" line="104"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM&apos;." verbose="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM&apos;.">
            <location file="drivers/theora/x86_vc/mmxencfrag.c" line="558"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM&apos;." verbose="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM&apos;.">
            <location file="drivers/theora/x86_vc/mmxfdct.c" line="593"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;src&apos; is assigned a value that is never used." verbose="Variable &apos;src&apos; is assigned a value that is never used.">
            <location file="drivers/theora/x86_vc/mmxfrag.c" line="37"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dst&apos; is assigned a value that is never used." verbose="Variable &apos;dst&apos; is assigned a value that is never used.">
            <location file="drivers/theora/x86_vc/mmxfrag.c" line="37"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;_MSC_VER&apos;." verbose="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;_MSC_VER&apos;.">
            <location file="drivers/theora/x86_vc/mmxencfrag.c" line="558"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;_MSC_VER&apos;." verbose="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;_MSC_VER&apos;.">
            <location file="drivers/theora/x86_vc/mmxfdct.c" line="593"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;__GNUC__&apos;." verbose="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;__GNUC__&apos;.">
            <location file="drivers/theora/x86_vc/mmxencfrag.c" line="558"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;__GNUC__&apos;." verbose="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;__GNUC__&apos;.">
            <location file="drivers/theora/x86_vc/mmxfdct.c" line="593"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM&apos;." verbose="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM&apos;.">
            <location file="drivers/theora/x86_vc/mmxstate.c" line="204"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;_MSC_VER&apos;." verbose="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;_MSC_VER&apos;.">
            <location file="drivers/theora/x86_vc/mmxstate.c" line="204"/>
        </error>
        <error id="syntaxError" severity="error" msg="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;__GNUC__&apos;." verbose="Invalid number of character &apos;{&apos; when these macros are defined: &apos;OC_X86_ASM;__GNUC__&apos;.">
            <location file="drivers/theora/x86_vc/mmxstate.c" line="204"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TheoraVideoClip_FFmpeg::mLoaded&apos; is not initialized in the constructor." verbose="Member variable &apos;TheoraVideoClip_FFmpeg::mLoaded&apos; is not initialized in the constructor.">
            <location file="drivers/theoraplayer/src/FFmpeg/TheoraVideoClip_FFmpeg.cpp" line="213"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TheoraVideoClip_FFmpeg::mAvioContext&apos; is not initialized in the constructor." verbose="Member variable &apos;TheoraVideoClip_FFmpeg::mAvioContext&apos; is not initialized in the constructor.">
            <location file="drivers/theoraplayer/src/FFmpeg/TheoraVideoClip_FFmpeg.cpp" line="213"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TheoraVideoClip_FFmpeg::mInputBuffer&apos; is not initialized in the constructor." verbose="Member variable &apos;TheoraVideoClip_FFmpeg::mInputBuffer&apos; is not initialized in the constructor.">
            <location file="drivers/theoraplayer/src/FFmpeg/TheoraVideoClip_FFmpeg.cpp" line="213"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TheoraVideoClip_FFmpeg::mFrameNumber&apos; is not initialized in the constructor." verbose="Member variable &apos;TheoraVideoClip_FFmpeg::mFrameNumber&apos; is not initialized in the constructor.">
            <location file="drivers/theoraplayer/src/FFmpeg/TheoraVideoClip_FFmpeg.cpp" line="213"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;seekPos&apos; can be reduced." verbose="The scope of the variable &apos;seekPos&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/Theora/TheoraVideoClip_Theora.cpp" line="243"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/Theora/TheoraVideoClip_Theora.cpp" line="360"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/Theora/TheoraVideoClip_Theora.cpp" line="448"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/Theora/TheoraVideoClip_Theora.cpp" line="605"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/Theora/TheoraVideoClip_Theora.cpp" line="683"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/Theora/TheoraVideoClip_Theora.cpp" line="683"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/TheoraAsync.cpp" line="182"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/TheoraAsync.cpp" line="244"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;TheoraAsyncActionWrapper&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;TheoraAsyncActionWrapper&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/theoraplayer/src/TheoraAsync.cpp" line="104"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frame&apos; can be reduced." verbose="The scope of the variable &apos;frame&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/TheoraFrameQueue.cpp" line="51"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;timeToDisplay&apos; can be reduced." verbose="The scope of the variable &apos;timeToDisplay&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/TheoraVideoClip.cpp" line="234"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: clip" verbose="Possible null pointer dereference: clip" inconclusive="true">
            <location file="drivers/theoraplayer/src/TheoraVideoManager.cpp" line="234"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: clip" verbose="Possible null pointer dereference: clip" inconclusive="true">
            <location file="drivers/theoraplayer/src/TheoraVideoManager.cpp" line="235"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: clip" verbose="Possible null pointer dereference: clip" inconclusive="true">
            <location file="drivers/theoraplayer/src/TheoraVideoManager.cpp" line="236"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;diff&apos; can be reduced." verbose="The scope of the variable &apos;diff&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/TheoraVideoManager.cpp" line="292"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/TheoraVideoManager.cpp" line="368"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/TheoraVideoManager.cpp" line="421"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ySrcOdd&apos; can be reduced." verbose="The scope of the variable &apos;ySrcOdd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_yuv_c.c" line="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uSrc&apos; can be reduced." verbose="The scope of the variable &apos;uSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_yuv_c.c" line="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vSrc&apos; can be reduced." verbose="The scope of the variable &apos;vSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_yuv_c.c" line="14"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ySrcOdd&apos; can be reduced." verbose="The scope of the variable &apos;ySrcOdd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="144"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uSrc&apos; can be reduced." verbose="The scope of the variable &apos;uSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="144"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vSrc&apos; can be reduced." verbose="The scope of the variable &apos;vSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="144"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uSrc&apos; can be reduced." verbose="The scope of the variable &apos;uSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="149"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vSrc&apos; can be reduced." verbose="The scope of the variable &apos;vSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="149"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ySrcOdd&apos; can be reduced." verbose="The scope of the variable &apos;ySrcOdd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uSrc&apos; can be reduced." verbose="The scope of the variable &apos;uSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vSrc&apos; can be reduced." verbose="The scope of the variable &apos;vSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="157"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uSrc&apos; can be reduced." verbose="The scope of the variable &apos;uSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="162"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vSrc&apos; can be reduced." verbose="The scope of the variable &apos;vSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="162"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ySrcOdd&apos; can be reduced." verbose="The scope of the variable &apos;ySrcOdd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="170"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uSrc&apos; can be reduced." verbose="The scope of the variable &apos;uSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="170"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vSrc&apos; can be reduced." verbose="The scope of the variable &apos;vSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="170"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ySrcOdd&apos; can be reduced." verbose="The scope of the variable &apos;ySrcOdd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uSrc&apos; can be reduced." verbose="The scope of the variable &apos;uSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vSrc&apos; can be reduced." verbose="The scope of the variable &apos;vSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uSrc&apos; can be reduced." verbose="The scope of the variable &apos;uSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="180"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vSrc&apos; can be reduced." verbose="The scope of the variable &apos;vSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="180"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ySrcOdd&apos; can be reduced." verbose="The scope of the variable &apos;ySrcOdd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="188"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uSrc&apos; can be reduced." verbose="The scope of the variable &apos;uSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="188"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vSrc&apos; can be reduced." verbose="The scope of the variable &apos;vSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="188"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uSrc&apos; can be reduced." verbose="The scope of the variable &apos;uSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vSrc&apos; can be reduced." verbose="The scope of the variable &apos;vSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="193"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ySrcOdd&apos; can be reduced." verbose="The scope of the variable &apos;ySrcOdd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;uSrc&apos; can be reduced." verbose="The scope of the variable &apos;uSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vSrc&apos; can be reduced." verbose="The scope of the variable &apos;vSrc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp&apos; can be reduced." verbose="The scope of the variable &apos;temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/C/yuv420_rgb_c.c" line="214"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: clip" verbose="Possible null pointer dereference: clip" inconclusive="true">
            <location file="drivers/theoraplayer/src/TheoraVideoManager.cpp" line="59"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: clip" verbose="Possible null pointer dereference: clip" inconclusive="true">
            <location file="drivers/theoraplayer/src/TheoraVideoManager.cpp" line="61"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: clip" verbose="Possible null pointer dereference: clip" inconclusive="true">
            <location file="drivers/theoraplayer/src/TheoraVideoManager.cpp" line="64"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: clip" verbose="Possible null pointer dereference: clip" inconclusive="true">
            <location file="drivers/theoraplayer/src/TheoraVideoManager.cpp" line="66"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;percent&apos; can be reduced." verbose="The scope of the variable &apos;percent&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/TheoraVideoManager.cpp" line="383"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/convert_jpeg.cc" line="38"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/convert_jpeg.cc" line="56"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/convert_jpeg.cc" line="74"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/convert_jpeg.cc" line="92"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/convert_jpeg.cc" line="110"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/convert_jpeg.cc" line="236"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/convert_jpeg.cc" line="250"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/convert_jpeg.cc" line="264"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/convert_jpeg.cc" line="278"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/convert_jpeg.cc" line="292"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/mjpeg_decoder.cc" line="442"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/planar_functions.cc" line="1877"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;boxwidth&apos; can be reduced." verbose="The scope of the variable &apos;boxwidth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/scale.cc" line="335"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;boxwidth&apos; can be reduced." verbose="The scope of the variable &apos;boxwidth&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/scale.cc" line="361"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/scale.cc" line="394"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/scale.cc" line="571"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/scale_argb.cc" line="172"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/libyuv/src/scale_argb.cc" line="280"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;out&apos; can be reduced." verbose="The scope of the variable &apos;out&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/theoraplayer/src/YUV/yuv_util.c" line="21"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: addr_chr" verbose="Unused variable: addr_chr">
            <location file="drivers/unix/ip_unix.cpp" line="124"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned variable &apos;p_bytes&apos; is less than zero." verbose="The unsigned variable &apos;p_bytes&apos; will never be negative so it is either pointless or an error to check if it is.">
            <location file="drivers/unix/memory_pool_static_malloc.cpp" line="159"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MemoryPoolStaticMalloc::ringlist&apos; is not initialized in the constructor." verbose="Member variable &apos;MemoryPoolStaticMalloc::ringlist&apos; is not initialized in the constructor.">
            <location file="drivers/unix/memory_pool_static_malloc.cpp" line="358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MemoryPoolStaticMalloc::total_mem&apos; is not initialized in the constructor." verbose="Member variable &apos;MemoryPoolStaticMalloc::total_mem&apos; is not initialized in the constructor.">
            <location file="drivers/unix/memory_pool_static_malloc.cpp" line="358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MemoryPoolStaticMalloc::total_pointers&apos; is not initialized in the constructor." verbose="Member variable &apos;MemoryPoolStaticMalloc::total_pointers&apos; is not initialized in the constructor.">
            <location file="drivers/unix/memory_pool_static_malloc.cpp" line="358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MemoryPoolStaticMalloc::max_mem&apos; is not initialized in the constructor." verbose="Member variable &apos;MemoryPoolStaticMalloc::max_mem&apos; is not initialized in the constructor.">
            <location file="drivers/unix/memory_pool_static_malloc.cpp" line="358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MemoryPoolStaticMalloc::max_pointers&apos; is not initialized in the constructor." verbose="Member variable &apos;MemoryPoolStaticMalloc::max_pointers&apos; is not initialized in the constructor.">
            <location file="drivers/unix/memory_pool_static_malloc.cpp" line="358"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/unix/memory_pool_static_malloc.cpp" line="78"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/unix/memory_pool_static_malloc.cpp" line="168"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/unix/memory_pool_static_malloc.cpp" line="239"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="drivers/unix/memory_pool_static_malloc.cpp" line="400"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;OS_Unix&apos; does not have a constructor." verbose="The class &apos;OS_Unix&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="drivers/unix/os_unix.h" line="43"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MutexPosix&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MutexPosix&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/unix/mutex_posix.h" line="53"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used.">
            <location file="drivers/unix/packet_peer_udp_posix.cpp" line="66"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerUDPPosix::recv_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerUDPPosix::recv_buffer&apos; is not initialized in the constructor.">
            <location file="drivers/unix/packet_peer_udp_posix.cpp" line="182"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerUDPPosix::packet_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerUDPPosix::packet_buffer&apos; is not initialized in the constructor.">
            <location file="drivers/unix/packet_peer_udp_posix.cpp" line="182"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamOGGVorbis::frames_mixed&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamOGGVorbis::frames_mixed&apos; is not initialized in the constructor.">
            <location file="drivers/vorbis/audio_stream_ogg_vorbis.cpp" line="360"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;SEEK_SET&apos; since the value of &apos;SEEK_SET&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;SEEK_SET&apos; since the value of &apos;SEEK_SET&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="drivers/vorbis/audio_stream_ogg_vorbis.cpp" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rate&apos; can be reduced." verbose="The scope of the variable &apos;rate&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/barkmel.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;choice&apos; can be reduced." verbose="The scope of the variable &apos;choice&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/bitrate.c" line="234"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/block.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/block.c" line="160"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/block.c" line="316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/block.c" line="417"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/block.c" line="421"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/block.c" line="726"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/block.c" line="726"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/block.c" line="419"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/block.c" line="420"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/block.c" line="467"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/codebook.c" line="31"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;entry&apos; can be reduced." verbose="The scope of the variable &apos;entry&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/codebook.c" line="436"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/codebook.c" line="460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/codebook.c" line="460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;entry&apos; can be reduced." verbose="The scope of the variable &apos;entry&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/codebook.c" line="460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;chptr&apos; can be reduced." verbose="The scope of the variable &apos;chptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/codebook.c" line="461"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/codebook.c" line="373"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/codebook.c" line="374"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/envelope.c" line="105"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;size&apos; is assigned a value that is never used." verbose="Variable &apos;size&apos; is assigned a value that is never used.">
            <location file="drivers/theoraplayer/video_stream_theoraplayer.cpp" line="386"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/floor1.c" line="594"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/floor1.c" line="750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/floor1.c" line="772"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/floor1.c" line="772"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cval&apos; can be reduced." verbose="The scope of the variable &apos;cval&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/floor1.c" line="866"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;cshift&apos; can be reduced." verbose="The scope of the variable &apos;cshift&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/floor1.c" line="867"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;l&apos; can be reduced." verbose="The scope of the variable &apos;l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/floor1.c" line="868"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/floor1.c" line="1061"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;y2b&apos; is assigned a value that is never used." verbose="Variable &apos;y2b&apos; is assigned a value that is never used.">
            <location file="drivers/vorbis/floor1.c" line="502"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/info.c" line="135"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/info.c" line="162"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buffer&apos; can be reduced." verbose="The scope of the variable &apos;buffer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/info.c" line="352"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/info.c" line="78"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/info.c" line="101"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/info.c" line="121"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;o&apos; can be reduced." verbose="The scope of the variable &apos;o&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/lpc.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/lpc.c" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/lpc.c" line="141"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/lpc.c" line="62"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/lpc.c" line="63"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/lpc.c" line="142"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;lastdelta&apos; can be reduced." verbose="The scope of the variable &apos;lastdelta&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/lsp.c" line="312"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;delta&apos; can be reduced." verbose="The scope of the variable &apos;delta&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/lsp.c" line="317"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lastdelta&apos; is assigned a value that is never used." verbose="Variable &apos;lastdelta&apos; is assigned a value that is never used.">
            <location file="drivers/vorbis/lsp.c" line="349"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/lsp.c" line="313"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/lsp.c" line="369"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/lsp.c" line="408"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/lsp.c" line="409"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/lsp.c" line="410"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/lsp.c" line="411"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/mapping0.c" line="247"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/mapping0.c" line="253"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/mapping0.c" line="601"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/mapping0.c" line="602"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/mapping0.c" line="716"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/mapping0.c" line="717"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/mapping0.c" line="719"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/mapping0.c" line="720"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r0&apos; can be reduced." verbose="The scope of the variable &apos;r0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/mdct.c" line="223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r1&apos; can be reduced." verbose="The scope of the variable &apos;r1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/mdct.c" line="224"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r0&apos; can be reduced." verbose="The scope of the variable &apos;r0&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/mdct.c" line="271"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;r1&apos; can be reduced." verbose="The scope of the variable &apos;r1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/mdct.c" line="272"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/mdct.c" line="498"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/psy.c" line="362"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/psy.c" line="362"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;de&apos; is assigned a value that is never used." verbose="Variable &apos;de&apos; is assigned a value that is never used.">
            <location file="drivers/vorbis/psy.c" line="1023"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;data_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;data_name&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="drivers/theoraplayer/video_stream_theoraplayer.cpp" line="103"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RingBuffer&lt;float&gt;::inc&apos; can be const." verbose="The member function &apos;RingBuffer&lt;float&gt;::inc&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/ring_buffer.h" line="42"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RingBuffer&lt;float&gt;::size&apos; can be const." verbose="The member function &apos;RingBuffer&lt;float&gt;::size&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/ring_buffer.h" line="155"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TheoraFileDataSource&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TheoraFileDataSource&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/theoraplayer/include/theoraplayer/TheoraDataSource.h" line="54"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TheoraMemoryFileDataSource&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TheoraMemoryFileDataSource&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/theoraplayer/include/theoraplayer/TheoraDataSource.h" line="78"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TPDataFA&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TPDataFA&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="drivers/theoraplayer/video_stream_theoraplayer.cpp" line="94"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RingBuffer&lt;float&gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RingBuffer&lt;float&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="core/ring_buffer.h" line="177"/>
        </error>
        <error id="catchExceptionByValue" severity="style" msg="Exception should be caught by reference." verbose="The exception is caught by value. It could be caught as a (const) reference which is usually recommended in C++.">
            <location file="drivers/theoraplayer/video_stream_theoraplayer.cpp" line="493"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: newmax" verbose="Unused variable: newmax">
            <location file="drivers/vorbis/psytune.c" line="236"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ath&apos; is assigned a value that is never used." verbose="Variable &apos;ath&apos; is assigned a value that is never used.">
            <location file="drivers/vorbis/psytune.c" line="252"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;decayp&apos; is assigned a value that is never used." verbose="Variable &apos;decayp&apos; is assigned a value that is never used.">
            <location file="drivers/vorbis/psytune.c" line="253"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: amp" verbose="Unused variable: amp">
            <location file="drivers/vorbis/psytune.c" line="360"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: amp" verbose="Unused variable: amp">
            <location file="drivers/vorbis/psytune.c" line="465"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="92"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="452"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="453"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="550"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="551"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="552"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="553"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="554"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="704"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="755"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="937"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="1029"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="1032"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="1035"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="1038"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="1041"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="1044"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="1050"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="1051"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="1052"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/psy.c" line="1053"/>
        </error>
        <error id="unpreciseMathCall" severity="style" msg="Expression &apos;log(1 + x)&apos; can be replaced by &apos;log1p(x)&apos; to avoid loss of precision." verbose="Expression &apos;log(1 + x)&apos; can be replaced by &apos;log1p(x)&apos; to avoid loss of precision.">
            <location file="drivers/vorbis/psy.c" line="174"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/res0.c" line="78"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/res0.c" line="331"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/res0.c" line="676"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/sharedbook.c" line="197"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/sharedbook.c" line="197"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/sharedbook.c" line="197"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/sharedbook.c" line="341"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/sharedbook.c" line="352"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: of" verbose="Unused variable: of">
            <location file="drivers/vorbis/res0.c" line="496"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: buffer" verbose="Unused variable: buffer">
            <location file="drivers/vorbis/res0.c" line="497"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;of&apos; can be reduced." verbose="The scope of the variable &apos;of&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/res0.c" line="460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/sharedbook.c" line="538"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t6&apos; can be reduced." verbose="The scope of the variable &apos;t6&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/smallft.c" line="690"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t7&apos; can be reduced." verbose="The scope of the variable &apos;t7&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/smallft.c" line="690"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t8&apos; can be reduced." verbose="The scope of the variable &apos;t8&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/smallft.c" line="690"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t9&apos; can be reduced." verbose="The scope of the variable &apos;t9&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/smallft.c" line="690"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t10&apos; can be reduced." verbose="The scope of the variable &apos;t10&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/smallft.c" line="690"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/tone.c" line="22"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/tone.c" line="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/vorbisenc.c" line="194"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced." verbose="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/vorbisenc.c" line="194"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;link&apos; can be reduced." verbose="The scope of the variable &apos;link&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/vorbisfile.c" line="828"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/vorbisfile.c" line="1872"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/vorbisfile.c" line="1872"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hs&apos; can be reduced." verbose="The scope of the variable &apos;hs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/vorbis/vorbisfile.c" line="1874"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used.">
            <location file="drivers/vorbis/vorbisfile.c" line="778"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: fpu" verbose="Unused variable: fpu">
            <location file="drivers/vorbis/vorbisfile.c" line="1904"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lapcount&apos; is assigned a value that is never used." verbose="Variable &apos;lapcount&apos; is assigned a value that is never used.">
            <location file="drivers/vorbis/vorbisfile.c" line="2161"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/vorbisfile.c" line="2193"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/vorbisfile.c" line="2200"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/vorbisfile.c" line="2243"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/vorbisfile.c" line="2245"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/vorbisfile.c" line="2304"/>
        </error>
        <error id="obsoleteFunctionsalloca" severity="style" msg="Obsolete function &apos;alloca&apos; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &apos;alloca&apos; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &apos;alloca&apos; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="drivers/vorbis/vorbisfile.c" line="2306"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer.">
            <location file="drivers/webp/utils/huffman.h" line="45"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mem&apos; is assigned a value that is never used." verbose="Variable &apos;mem&apos; is assigned a value that is never used.">
            <location file="drivers/webp/dec/frame.c" line="498"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/webp/dec/vp8l.c" line="805"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;data!=0&apos; is redundant or there is possible null pointer dereference: data." verbose="Either the condition &apos;data!=0&apos; is redundant or there is possible null pointer dereference: data.">
            <location file="drivers/webp/dec/webp.c" line="226"/>
            <location file="drivers/webp/dec/webp.c" line="221"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;data!=0&apos; is redundant or there is possible null pointer dereference: data." verbose="Either the condition &apos;data!=0&apos; is redundant or there is possible null pointer dereference: data.">
            <location file="drivers/webp/dec/webp.c" line="226"/>
            <location file="drivers/webp/dec/webp.c" line="222"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/webp/dsp/enc.c" line="255"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced." verbose="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/webp/dsp/enc.c" line="277"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;enc!=0&apos; is redundant or there is possible null pointer dereference: enc." verbose="Either the condition &apos;enc!=0&apos; is redundant or there is possible null pointer dereference: enc.">
            <location file="drivers/webp/enc/alpha.c" line="176"/>
            <location file="drivers/webp/enc/alpha.c" line="164"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pic!=0&apos; is redundant or there is possible null pointer dereference: pic." verbose="Either the condition &apos;pic!=0&apos; is redundant or there is possible null pointer dereference: pic.">
            <location file="drivers/webp/enc/alpha.c" line="176"/>
            <location file="drivers/webp/enc/alpha.c" line="165"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;pic!=0&apos; is redundant or there is possible null pointer dereference: pic." verbose="Either the condition &apos;pic!=0&apos; is redundant or there is possible null pointer dereference: pic.">
            <location file="drivers/webp/enc/alpha.c" line="176"/>
            <location file="drivers/webp/enc/alpha.c" line="166"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/webp/enc/frame.c" line="764"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="drivers/webp/enc/frame.c" line="764"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tab&apos; is assigned a value that is never used." verbose="Variable &apos;tab&apos; is assigned a value that is never used.">
            <location file="drivers/webp/enc/frame.c" line="625"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mem&apos; is assigned a value that is never used." verbose="Variable &apos;mem&apos; is assigned a value that is never used.">
            <location file="drivers/webp/enc/webpenc.c" line="243"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%ld in format string (no. 2) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/webp/enc/webpenc.c" line="179"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 3) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%ld in format string (no. 3) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/webp/enc/webpenc.c" line="179"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 4) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%ld in format string (no. 4) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/webp/enc/webpenc.c" line="179"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 5) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%ld in format string (no. 5) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/webp/enc/webpenc.c" line="179"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 6) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%ld in format string (no. 6) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/webp/enc/webpenc.c" line="179"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%ld in format string (no. 7) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%ld in format string (no. 7) requires &apos;long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;.">
            <location file="drivers/webp/enc/webpenc.c" line="179"/>
        </error>
        <error id="truncLongCastAssignment" severity="style" msg="int result is assigned to long variable. If the variable is long to avoid loss of information, then you have loss of information." verbose="int result is assigned to long variable. If the variable is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example &apos;l = a * b;&apos; =&gt; &apos;l = (long)a * b;&apos;.">
            <location file="drivers/webp/enc/vp8l.c" line="787"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;frame_tile_chunk!=0&apos; is redundant or there is possible null pointer dereference: frame_tile_chunk." verbose="Either the condition &apos;frame_tile_chunk!=0&apos; is redundant or there is possible null pointer dereference: frame_tile_chunk.">
            <location file="drivers/webp/mux/muxedit.c" line="467"/>
            <location file="drivers/webp/mux/muxedit.c" line="462"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;image_chunk!=0&apos; is redundant or there is possible null pointer dereference: image_chunk." verbose="Either the condition &apos;image_chunk!=0&apos; is redundant or there is possible null pointer dereference: image_chunk.">
            <location file="drivers/webp/mux/muxedit.c" line="483"/>
            <location file="drivers/webp/mux/muxedit.c" line="479"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev_key_idx&apos; can be reduced." verbose="The scope of the variable &apos;prev_key_idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="modules/gdscript/gd_compiler.cpp" line="766"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;in_static&apos; is assigned a value that is never used." verbose="Variable &apos;in_static&apos; is assigned a value that is never used.">
            <location file="modules/gdscript/gd_compiler.cpp" line="463"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;prev_key_idx&apos; is assigned a value that is never used." verbose="Variable &apos;prev_key_idx&apos; is assigned a value that is never used.">
            <location file="modules/gdscript/gd_compiler.cpp" line="817"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used.">
            <location file="modules/gdscript/gd_compiler.cpp" line="1202"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;index_from&apos; is assigned a value that is never used." verbose="Variable &apos;index_from&apos; is assigned a value that is never used.">
            <location file="modules/gdscript/gd_compiler.cpp" line="1390"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDCompiler::parser&apos; is not initialized in the constructor." verbose="Member variable &apos;GDCompiler::parser&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_compiler.cpp" line="1723"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDCompiler::err_line&apos; is not initialized in the constructor." verbose="Member variable &apos;GDCompiler::err_line&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_compiler.cpp" line="1723"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDCompiler::err_column&apos; is not initialized in the constructor." verbose="Member variable &apos;GDCompiler::err_column&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_compiler.cpp" line="1723"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." inconclusive="true">
            <location file="modules/gdscript/gd_script.h" line="181"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;obj&apos; is assigned a value that is never used." verbose="Variable &apos;obj&apos; is assigned a value that is never used.">
            <location file="modules/gdscript/gd_functions.cpp" line="493"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;doc_base&apos; can be reduced." verbose="The scope of the variable &apos;doc_base&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="main/main.cpp" line="952"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;noquit&apos; can be reduced." verbose="The scope of the variable &apos;noquit&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="main/main.cpp" line="963"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;convert_old&apos; can be reduced." verbose="The scope of the variable &apos;convert_old&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="main/main.cpp" line="964"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;export_debug&apos; can be reduced." verbose="The scope of the variable &apos;export_debug&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="main/main.cpp" line="965"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;doc_base&apos; is assigned a value that is never used." verbose="Variable &apos;doc_base&apos; is assigned a value that is never used.">
            <location file="main/main.cpp" line="976"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;noquit&apos; is assigned a value that is never used." verbose="Variable &apos;noquit&apos; is assigned a value that is never used.">
            <location file="main/main.cpp" line="1012"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;convert_old&apos; is assigned a value that is never used." verbose="Variable &apos;convert_old&apos; is assigned a value that is never used.">
            <location file="main/main.cpp" line="1020"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;export_debug&apos; is assigned a value that is never used." verbose="Variable &apos;export_debug&apos; is assigned a value that is never used.">
            <location file="main/main.cpp" line="1001"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;op&apos; is assigned a value that is never used." verbose="Variable &apos;op&apos; is assigned a value that is never used.">
            <location file="modules/gdscript/gd_parser.cpp" line="481"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used.">
            <location file="modules/gdscript/gd_editor.cpp" line="427"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDParser::completion_static&apos; is not initialized in the constructor." verbose="Member variable &apos;GDParser::completion_static&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_parser.cpp" line="3044"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDParser::completion_line&apos; is not initialized in the constructor." verbose="Member variable &apos;GDParser::completion_line&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_parser.cpp" line="3044"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDParser::completion_argument&apos; is not initialized in the constructor." verbose="Member variable &apos;GDParser::completion_argument&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_parser.cpp" line="3044"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;GDParser::get_completion_type&apos; can be const." verbose="The member function &apos;GDParser::get_completion_type&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="modules/gdscript/gd_parser.h" line="456"/>
            <location file="modules/gdscript/gd_parser.cpp" line="2999"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;GDParser::get_completion_cursor&apos; can be const." verbose="The member function &apos;GDParser::get_completion_cursor&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="modules/gdscript/gd_parser.h" line="457"/>
            <location file="modules/gdscript/gd_parser.cpp" line="3004"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;GDParser::get_completion_line&apos; can be const." verbose="The member function &apos;GDParser::get_completion_line&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="modules/gdscript/gd_parser.h" line="458"/>
            <location file="modules/gdscript/gd_parser.cpp" line="3009"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;GDParser::get_completion_built_in_constant&apos; can be const." verbose="The member function &apos;GDParser::get_completion_built_in_constant&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="modules/gdscript/gd_parser.h" line="459"/>
            <location file="modules/gdscript/gd_parser.cpp" line="3014"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;GDParser::get_completion_argument_index&apos; can be const." verbose="The member function &apos;GDParser::get_completion_argument_index&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="modules/gdscript/gd_parser.h" line="464"/>
            <location file="modules/gdscript/gd_parser.cpp" line="3039"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="main/main.cpp" line="970"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="main/main.cpp" line="977"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="main/main.cpp" line="981"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="main/main.cpp" line="985"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="main/main.cpp" line="988"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="main/main.cpp" line="991"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="main/main.cpp" line="994"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="main/main.cpp" line="998"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="main/main.cpp" line="1003"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="main/main.cpp" line="1007"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;i&apos; is used before limits check." verbose="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="main/main.cpp" line="1013"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;test&apos; is assigned a value that is never used." verbose="Variable &apos;test&apos; is assigned a value that is never used.">
            <location file="modules/gdscript/gd_script.cpp" line="1056"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_constants_ptr&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_constants_ptr&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_constant_count&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_constant_count&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_global_names_ptr&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_global_names_ptr&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_global_names_count&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_global_names_count&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_default_arg_ptr&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_default_arg_ptr&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_default_arg_count&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_default_arg_count&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_code_ptr&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_code_ptr&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_code_size&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_code_size&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_argument_count&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_argument_count&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_initial_line&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_initial_line&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_static&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_static&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunction::_script&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunction::_script&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1299"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDFunctionState::state&apos; is not initialized in the constructor." verbose="Member variable &apos;GDFunctionState::state&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="1379"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GDScriptLanguage::_global_array&apos; is not initialized in the constructor." verbose="Member variable &apos;GDScriptLanguage::_global_array&apos; is not initialized in the constructor.">
            <location file="modules/gdscript/gd_script.cpp" line="2671"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;b&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;b&apos; is reassigned a value before the old one has been used.">
            <location file="modules/gdscript/gd_tokenizer.cpp" line="1070"/>
            <location file="modules/gdscript/gd_tokenizer.cpp" line="1068"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;col&apos; is assigned a value that is never used." verbose="Variable &apos;col&apos; is assigned a value that is never used.">
            <location file="modules/gdscript/gd_tokenizer.cpp" line="1158"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." inconclusive="true">
            <location file="modules/gdscript/gd_script.cpp" line="1795"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_dist&apos; can be reduced." verbose="The scope of the variable &apos;max_dist&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="modules/gridmap/grid_map.cpp" line="794"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;att&apos; is assigned a value that is never used." verbose="Variable &apos;att&apos; is assigned a value that is never used.">
            <location file="modules/gridmap/grid_map.cpp" line="778"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Area::portal_disable_distance&apos; is not initialized in the constructor." verbose="Member variable &apos;Area::portal_disable_distance&apos; is not initialized in the constructor.">
            <location file="modules/gridmap/grid_map.cpp" line="1415"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Area::exterior_portal&apos; is not initialized in the constructor." verbose="Member variable &apos;Area::exterior_portal&apos; is not initialized in the constructor.">
            <location file="modules/gridmap/grid_map.cpp" line="1415"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Shape&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Shape&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/resources/shape.h" line="44"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Light&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Light&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/3d/light.h" line="112"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/editor_node.h" line="461"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Track::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Track::type&apos; is not initialized in the constructor.">
            <location file="scene/resources/animation.h" line="68"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Key::time&apos; is not initialized in the constructor." verbose="Member variable &apos;Key::time&apos; is not initialized in the constructor.">
            <location file="scene/resources/animation.h" line="76"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TrackNodeCache::id&apos; is not initialized in the constructor." verbose="Member variable &apos;TrackNodeCache::id&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_player.h" line="98"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PropertyAnim::special&apos; is not initialized in the constructor." verbose="Member variable &apos;PropertyAnim::special&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_player.h" line="92"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BoxContainer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BoxContainer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/gui/box_container.h" line="50"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SplitContainer&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SplitContainer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/gui/split_container.h" line="76"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ScenesDock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ScenesDock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/scenes_dock.h" line="157"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ConnectionsDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ConnectionsDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/connections_dialog.h" line="125"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorPath&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorPath&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/editor_path.h" line="52"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ProjectSettings&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ProjectSettings&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/project_settings.h" line="149"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ProjectExportDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ProjectExportDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/project_export.h" line="199"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ProjectExport&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ProjectExport&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/project_export.h" line="219"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ResourcesDock&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ResourcesDock&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/resources_dock.h" line="106"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ImportSettingsDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ImportSettingsDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/import_settings.h" line="78"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;latency&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;latency&apos; is reassigned a value before the old one has been used.">
            <location file="platform/android/audio_driver_jandroid.cpp" line="84"/>
            <location file="platform/android/audio_driver_jandroid.cpp" line="83"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/android/audio_driver_opensl.cpp" line="109"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i">
            <location file="platform/android/audio_driver_opensl.cpp" line="239"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;required&apos; is assigned a value that is never used." verbose="Variable &apos;required&apos; is assigned a value that is never used.">
            <location file="platform/android/audio_driver_opensl.cpp" line="303"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;iidArray&apos; is assigned a value that is never used." verbose="Variable &apos;iidArray&apos; is assigned a value that is never used.">
            <location file="platform/android/audio_driver_opensl.cpp" line="304"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverOpenSL::active&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverOpenSL::active&apos; is not initialized in the constructor.">
            <location file="platform/android/audio_driver_opensl.cpp" line="410"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverOpenSL::buffer_size&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverOpenSL::buffer_size&apos; is not initialized in the constructor.">
            <location file="platform/android/audio_driver_opensl.cpp" line="410"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverOpenSL::buffers&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverOpenSL::buffers&apos; is not initialized in the constructor.">
            <location file="platform/android/audio_driver_opensl.cpp" line="410"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverOpenSL::mixdown_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverOpenSL::mixdown_buffer&apos; is not initialized in the constructor.">
            <location file="platform/android/audio_driver_opensl.cpp" line="410"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverOpenSL::last_free&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverOpenSL::last_free&apos; is not initialized in the constructor.">
            <location file="platform/android/audio_driver_opensl.cpp" line="410"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::undo_redo&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::undo_redo&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::input_action&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::input_action&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::panel&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::panel&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::options&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::options&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::floor&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::floor&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::edit_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::edit_mode&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::mode_thumbnail&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::mode_thumbnail&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::mode_list&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::mode_list&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::spatial_editor_hb&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::spatial_editor_hb&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::node&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::node&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::last_theme&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::last_theme&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::clip_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::clip_mode&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::lock_view&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::lock_view&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::edit_floor&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::edit_floor&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::updating&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::updating&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::selection&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::selection&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::cursor_visible&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::cursor_visible&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::display_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::display_mode&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::selected_pallete&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::selected_pallete&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::selected_area&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::selected_area&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::cursor_rot&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::cursor_rot&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::spatial_editor&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::spatial_editor&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::theme_pallete&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::theme_pallete&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::area_list&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::area_list&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::editor&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::editor&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GridMapEditor::theme_panel&apos; is not initialized in the constructor." verbose="Member variable &apos;GridMapEditor::theme_panel&apos; is not initialized in the constructor." inconclusive="true">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="230"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GridMapEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GridMapEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="231"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GridMapEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GridMapEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="modules/gridmap/grid_map_editor_plugin.h" line="251"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SpatialEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SpatialEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/spatial_editor_plugin.h" line="526"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SpatialEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SpatialEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/spatial_editor_plugin.h" line="554"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ret" verbose="Unused variable: ret">
            <location file="platform/android/cpu-features.c" line="130"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;features&apos; is assigned a value that is never used." verbose="Variable &apos;features&apos; is assigned a value that is never used.">
            <location file="platform/android/cpu-features.c" line="612"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;architecture&apos; is assigned a value that is never used." verbose="Variable &apos;architecture&apos; is assigned a value that is never used.">
            <location file="platform/android/cpu-features.c" line="613"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;env&apos; is assigned a value that is never used." verbose="Variable &apos;env&apos; is assigned a value that is never used.">
            <location file="platform/android/dir_access_jandroid.cpp" line="160"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/android/export/export.cpp" line="992"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/android/export/export.cpp" line="1364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;styles_count&apos; can be reduced." verbose="The scope of the variable &apos;styles_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/android/export/export.cpp" line="636"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;string_data_offset&apos; can be reduced." verbose="The scope of the variable &apos;string_data_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/android/export/export.cpp" line="638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;styles_offset&apos; can be reduced." verbose="The scope of the variable &apos;styles_offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/android/export/export.cpp" line="640"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;header&apos; is assigned a value that is never used." verbose="Variable &apos;header&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="495"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;filesize&apos; is assigned a value that is never used." verbose="Variable &apos;filesize&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="496"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;CHUNK_AXML_FILE&apos; is assigned a value that is never used." verbose="Variable &apos;CHUNK_AXML_FILE&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="614"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;CHUNK_RESOURCEIDS&apos; is assigned a value that is never used." verbose="Variable &apos;CHUNK_RESOURCEIDS&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="615"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;CHUNK_XML_END_NAMESPACE&apos; is assigned a value that is never used." verbose="Variable &apos;CHUNK_XML_END_NAMESPACE&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="617"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;CHUNK_XML_END_TAG&apos; is assigned a value that is never used." verbose="Variable &apos;CHUNK_XML_END_TAG&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="618"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;CHUNK_XML_START_NAMESPACE&apos; is assigned a value that is never used." verbose="Variable &apos;CHUNK_XML_START_NAMESPACE&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="619"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;CHUNK_XML_TEXT&apos; is assigned a value that is never used." verbose="Variable &apos;CHUNK_XML_TEXT&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="621"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;header&apos; is assigned a value that is never used." verbose="Variable &apos;header&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="629"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;filesize&apos; is assigned a value that is never used." verbose="Variable &apos;filesize&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="630"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;styles_count&apos; is assigned a value that is never used." verbose="Variable &apos;styles_count&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="659"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: string_flags" verbose="Unused variable: string_flags">
            <location file="platform/android/export/export.cpp" line="637"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;string_data_offset&apos; is assigned a value that is never used." verbose="Variable &apos;string_data_offset&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="661"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;styles_offset&apos; is assigned a value that is never used." verbose="Variable &apos;styles_offset&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="662"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;line&apos; is assigned a value that is never used." verbose="Variable &apos;line&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="718"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nspace&apos; is assigned a value that is never used." verbose="Variable &apos;nspace&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="719"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;check&apos; is assigned a value that is never used." verbose="Variable &apos;check&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="721"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used.">
            <location file="platform/android/export/export.cpp" line="1317"/>
        </error>
        <error id="invalidPointer" severity="error" msg="Invalid pointer &apos;chars&apos; after push_back()." verbose="Invalid pointer &apos;chars&apos; after push_back().">
            <location file="platform/android/export/export.cpp" line="928"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;show_logo&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;show_logo&apos; is reassigned a value before the old one has been used.">
            <location file="main/main.cpp" line="840"/>
            <location file="main/main.cpp" line="838"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FileAccessAndroid::len&apos; is not initialized in the constructor." verbose="Member variable &apos;FileAccessAndroid::len&apos; is not initialized in the constructor.">
            <location file="platform/android/file_access_android.cpp" line="177"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;FileAccessAndroid::pos&apos; is not initialized in the constructor." verbose="Member variable &apos;FileAccessAndroid::pos&apos; is not initialized in the constructor.">
            <location file="platform/android/file_access_android.cpp" line="177"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;.">
            <location file="platform/android/file_access_jandroid.cpp" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;last&apos; can be reduced." verbose="The scope of the variable &apos;last&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/android/ifaddrs_android.cpp" line="211"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;JavaClassWrapper&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;JavaClassWrapper&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="platform/android/java_class_wrapper.h" line="165"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The typedef &apos;GFXInitFunc&apos; hides a typedef with the same name." verbose="The typedef &apos;GFXInitFunc&apos; hides a typedef with the same name." inconclusive="true">
            <location file="platform/android/os_android.h" line="58"/>
            <location file="platform/android/java_glue.cpp" line="655"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.">
            <location file="platform/android/godot_android.cpp" line="842"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MotionShapeSW::shape&apos; is not initialized in the constructor." verbose="Member variable &apos;MotionShapeSW::shape&apos; is not initialized in the constructor.">
            <location file="servers/physics/shape_sw.h" line="449"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Shape::bpid&apos; is not initialized in the constructor." verbose="Member variable &apos;Shape::bpid&apos; is not initialized in the constructor.">
            <location file="servers/physics/collision_object_sw.h" line="66"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Shape::shape&apos; is not initialized in the constructor." verbose="Member variable &apos;Shape::shape&apos; is not initialized in the constructor.">
            <location file="servers/physics/collision_object_sw.h" line="66"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BodyKey::body_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;BodyKey::body_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="servers/physics/area_sw.h" line="85"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BodyKey::area_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;BodyKey::area_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="servers/physics/area_sw.h" line="85"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AreaCMP::area&apos; is not initialized in the constructor." verbose="Member variable &apos;AreaCMP::area&apos; is not initialized in the constructor." inconclusive="true">
            <location file="servers/physics/body_sw.h" line="96"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ConstraintSW::island_next&apos; is not initialized in the constructor." verbose="Member variable &apos;ConstraintSW::island_next&apos; is not initialized in the constructor.">
            <location file="servers/physics/constraint_sw.h" line="47"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ConstraintSW::island_list_next&apos; is not initialized in the constructor." verbose="Member variable &apos;ConstraintSW::island_list_next&apos; is not initialized in the constructor.">
            <location file="servers/physics/constraint_sw.h" line="47"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;StreamData::filter_state&apos; is not initialized in the constructor." verbose="Member variable &apos;StreamData::filter_state&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.h" line="124"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;StreamData::filter_state&apos; is not initialized in the constructor." verbose="Member variable &apos;StreamData::filter_state&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound_2d/spatial_sound_2d_server_sw.h" line="140"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;ConcavePolygonShape2DSW&apos; does not have a constructor." verbose="The class &apos;ConcavePolygonShape2DSW&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="servers/physics_2d/shape_2d_sw.h" line="537"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Shape::bpid&apos; is not initialized in the constructor." verbose="Member variable &apos;Shape::bpid&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_object_2d_sw.h" line="61"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Shape::shape&apos; is not initialized in the constructor." verbose="Member variable &apos;Shape::shape&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_object_2d_sw.h" line="61"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BodyKey::body_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;BodyKey::body_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="servers/physics_2d/area_2d_sw.h" line="86"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BodyKey::area_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;BodyKey::area_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="servers/physics_2d/area_2d_sw.h" line="86"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AreaCMP::area&apos; is not initialized in the constructor." verbose="Member variable &apos;AreaCMP::area&apos; is not initialized in the constructor." inconclusive="true">
            <location file="servers/physics_2d/body_2d_sw.h" line="97"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Constraint2DSW::island_next&apos; is not initialized in the constructor." verbose="Member variable &apos;Constraint2DSW::island_next&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/constraint_2d_sw.h" line="46"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Constraint2DSW::island_list_next&apos; is not initialized in the constructor." verbose="Member variable &apos;Constraint2DSW::island_list_next&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/constraint_2d_sw.h" line="46"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;JNISingleton::env&apos; is not initialized in the constructor." verbose="Member variable &apos;JNISingleton::env&apos; is not initialized in the constructor.">
            <location file="platform/android/godot_android.cpp" line="300"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CollisionObjectSW&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CollisionObjectSW&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="servers/physics/collision_object_sw.h" line="105"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="servers/physics/body_sw.h" line="97"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RayShape2DSW&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RayShape2DSW&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="servers/physics_2d/shape_2d_sw.h" line="240"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CollisionObject2DSW&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CollisionObject2DSW&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="servers/physics_2d/collision_object_2d_sw.h" line="87"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;AreaCMP&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="servers/physics_2d/body_2d_sw.h" line="98"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;status&apos; is assigned a value that is never used." verbose="Variable &apos;status&apos; is assigned a value that is never used.">
            <location file="platform/android/thread_jandroid.cpp" line="120"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="123"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: card" verbose="Unused variable: card">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="56"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: dev" verbose="Unused variable: dev">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="56"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::thread&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::thread&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::pcm_handle&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::pcm_handle&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::samples_in&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::samples_in&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::samples_out&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::samples_out&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::sample_buf_count&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::sample_buf_count&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::mix_rate&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::mix_rate&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::pcm_frag_size&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::pcm_frag_size&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::pcm_max_frags&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::pcm_max_frags&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::active&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::active&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::thread_exited&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::thread_exited&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::exit_thread&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::exit_thread&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverBB10::pcm_open&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverBB10::pcm_open&apos; is not initialized in the constructor.">
            <location file="platform/bb10/audio_driver_bb10.cpp" line="245"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/bb10/export/export.cpp" line="519"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;idx&apos; is assigned a value that is never used." verbose="Variable &apos;idx&apos; is assigned a value that is never used.">
            <location file="platform/bb10/export/export.cpp" line="679"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;update_next&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;update_next&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="servers/visual/visual_server_raster.h" line="300"/>
            <location file="servers/visual/visual_server_raster.h" line="294"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.">
            <location file="platform/bb10/os_bb10.cpp" line="494"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;flip&apos; is assigned a value that is never used." verbose="Variable &apos;flip&apos; is assigned a value that is never used.">
            <location file="platform/bb10/os_bb10.cpp" line="559"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::rasterizer&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::rasterizer&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::visual_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::visual_server&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::audio_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::audio_server&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::sample_manager&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::sample_manager&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::spatial_sound_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::spatial_sound_server&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::spatial_sound_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::spatial_sound_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::physics_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::physics_server&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::physics_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::physics_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::audio_driver&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::audio_driver&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::last_touch_x&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::last_touch_x&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::last_touch_y&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::last_touch_y&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::accel_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::accel_supported&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::pitch&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::pitch&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::roll&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::roll&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSBB10::input&apos; is not initialized in the constructor." verbose="Member variable &apos;OSBB10::input&apos; is not initialized in the constructor.">
            <location file="platform/bb10/os_bb10.cpp" line="608"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Instance::scenario&apos; is not initialized in the constructor." verbose="Member variable &apos;Instance::scenario&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.h" line="292"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Instance::update_aabb&apos; is not initialized in the constructor." verbose="Member variable &apos;Instance::update_aabb&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.h" line="292"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RoomInfo::room&apos; is not initialized in the constructor." verbose="Member variable &apos;RoomInfo::room&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.h" line="215"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PortalInfo::portal&apos; is not initialized in the constructor." verbose="Member variable &apos;PortalInfo::portal&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.h" line="230"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightInfo::last_version&apos; is not initialized in the constructor." verbose="Member variable &apos;LightInfo::last_version&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.h" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightInfo::dtc&apos; is not initialized in the constructor." verbose="Member variable &apos;LightInfo::dtc&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.h" line="245"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Viewport::hide_scenario&apos; is not initialized in the constructor." verbose="Member variable &apos;Viewport::hide_scenario&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.h" line="520"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Viewport::hide_canvas&apos; is not initialized in the constructor." verbose="Member variable &apos;Viewport::hide_canvas&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.h" line="520"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;VisualServerRaster::CullRange::add_aabb&apos; can be static." verbose="The member function &apos;VisualServerRaster::CullRange::add_aabb&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/visual/visual_server_raster.h" line="533"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VisualServerRaster&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VisualServerRaster&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="servers/visual/visual_server_raster.h" line="1259"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;DirAccessFlash::get_modified_time&apos; can be static." verbose="The member function &apos;DirAccessFlash::get_modified_time&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/dir_access_flash.h" line="52"/>
            <location file="platform/flash/dir_access_flash.cpp" line="129"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;OSFlash&apos; does not have a constructor." verbose="The class &apos;OSFlash&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="platform/flash/os_flash.h" line="15"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;api&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;api&apos; is reassigned a value before the old one has been used.">
            <location file="platform/bb10/os_bb10.cpp" line="95"/>
            <location file="platform/bb10/os_bb10.cpp" line="93"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;&lt;&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="platform/flash/rasterizer_flash.h" line="580"/>
            <location file="platform/flash/rasterizer_flash.h" line="580"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Texture::alloc_width&apos; is not initialized in the constructor." verbose="Member variable &apos;Texture::alloc_width&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="71"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Texture::alloc_height&apos; is not initialized in the constructor." verbose="Member variable &apos;Texture::alloc_height&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="71"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Texture::mipmaps&apos; is not initialized in the constructor." verbose="Member variable &apos;Texture::mipmaps&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="71"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Shader::mode&apos; is not initialized in the constructor." verbose="Member variable &apos;Shader::mode&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="112"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Geometry::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Geometry::type&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Surface::mesh&apos; is not initialized in the constructor." verbose="Member variable &apos;Surface::mesh&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="261"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Surface::max_bone&apos; is not initialized in the constructor." verbose="Member variable &apos;Surface::max_bone&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="261"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Surface::configured_format&apos; is not initialized in the constructor." verbose="Member variable &apos;Surface::configured_format&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="261"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MultiMeshSurface::surface&apos; is not initialized in the constructor." verbose="Member variable &apos;MultiMeshSurface::surface&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="315"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::type&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="389"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightInstance::base&apos; is not initialized in the constructor." verbose="Member variable &apos;LightInstance::base&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="496"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightInstance::linear_att&apos; is not initialized in the constructor." verbose="Member variable &apos;LightInstance::linear_att&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="496"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RenderList::_elements&apos; is not initialized in the constructor." verbose="Member variable &apos;RenderList::_elements&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="650"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShadowBuffer::fbo&apos; is not initialized in the constructor." verbose="Member variable &apos;ShadowBuffer::fbo&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.h" line="743"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::skinned_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::skinned_buffer&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::skinned_buffer_size&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::skinned_buffer_size&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::pvr_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::pvr_supported&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::s3tc_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::s3tc_supported&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::etc_supported&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::etc_supported&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::npo2_textures_available&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::npo2_textures_available&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::particle_draw_info&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::particle_draw_info&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::light_instances&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::light_instances&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::directional_lights&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::directional_lights&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::light_instance_count&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::light_instance_count&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::directional_light_count&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::directional_light_count&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::last_light_id&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::last_light_id&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::current_depth_test&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::current_depth_test&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::current_depth_mask&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::current_depth_mask&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::scene_fx&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::scene_fx&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::camera_z_near&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::camera_z_near&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::camera_z_far&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::camera_z_far&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::shadow&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::shadow&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::shadow_pass&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::shadow_pass&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::shadow_near_far_split_size_ratio&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::shadow_near_far_split_size_ratio&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::framebuffer&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::framebuffer&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::_rinfo&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::_rinfo&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::white_tex&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::white_tex&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::canvas_opacity&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::canvas_opacity&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::canvas_blend_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::canvas_blend_mode&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::_setup_geometry_vinfo&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::_setup_geometry_vinfo&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::cull_front&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::cull_front&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::last_time&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::last_time&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::time_delta&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::time_delta&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerFlash::scene_pass&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerFlash::scene_pass&apos; is not initialized in the constructor.">
            <location file="platform/flash/rasterizer_flash.cpp" line="2587"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_update_shader&apos; can be static." verbose="The member function &apos;RasterizerFlash::_update_shader&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="128"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="1521"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_update_material_shader_params&apos; can be static." verbose="The member function &apos;RasterizerFlash::_update_material_shader_params&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="176"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="1763"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_surface_set_arrays&apos; can be static." verbose="The member function &apos;RasterizerFlash::_surface_set_arrays&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="307"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="460"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_render_list_forward&apos; can be static." verbose="The member function &apos;RasterizerFlash::_render_list_forward&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="720"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="1828"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_setup_lights&apos; can be static." verbose="The member function &apos;RasterizerFlash::_setup_lights&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="723"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="1812"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_setup_material&apos; can be static." verbose="The member function &apos;RasterizerFlash::_setup_material&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="726"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="1806"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_setup_geometry&apos; can be static." verbose="The member function &apos;RasterizerFlash::_setup_geometry&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="728"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="1817"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_render&apos; can be static." verbose="The member function &apos;RasterizerFlash::_render&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="729"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="1823"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_update_framebuffer&apos; can be static." verbose="The member function &apos;RasterizerFlash::_update_framebuffer&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="778"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="2531"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_set_cull&apos; can be static." verbose="The member function &apos;RasterizerFlash::_set_cull&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="806"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="1758"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_draw_primitive&apos; can be static." verbose="The member function &apos;RasterizerFlash::_draw_primitive&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="815"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="66"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_draw_gui_primitive&apos; can be static." verbose="The member function &apos;RasterizerFlash::_draw_gui_primitive&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="816"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="1888"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::_draw_textured_quad&apos; can be static." verbose="The member function &apos;RasterizerFlash::_draw_textured_quad&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="817"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="1892"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;RasterizerFlash::ShadowBuffer::init&apos; can be static." verbose="The member function &apos;RasterizerFlash::ShadowBuffer::init&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="platform/flash/rasterizer_flash.h" line="742"/>
            <location file="platform/flash/rasterizer_flash.cpp" line="2503"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/iphone/audio_driver_iphone.cpp" line="100"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;result&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;result&apos; is reassigned a value before the old one has been used.">
            <location file="platform/iphone/audio_driver_iphone.cpp" line="62"/>
            <location file="platform/iphone/audio_driver_iphone.cpp" line="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frames_left&apos; can be reduced." verbose="The scope of the variable &apos;frames_left&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/iphone/audio_driver_iphone.cpp" line="119"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverIphone::active&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverIphone::active&apos; is not initialized in the constructor.">
            <location file="platform/iphone/audio_driver_iphone.cpp" line="179"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverIphone::channels&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverIphone::channels&apos; is not initialized in the constructor.">
            <location file="platform/iphone/audio_driver_iphone.cpp" line="179"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverIphone::samples_in&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverIphone::samples_in&apos; is not initialized in the constructor.">
            <location file="platform/iphone/audio_driver_iphone.cpp" line="179"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverIphone::buffer_frames&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverIphone::buffer_frames&apos; is not initialized in the constructor.">
            <location file="platform/iphone/audio_driver_iphone.cpp" line="179"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/iphone/os_iphone.cpp" line="60"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSIPhone::supported_orientations&apos; is not initialized in the constructor." verbose="Member variable &apos;OSIPhone::supported_orientations&apos; is not initialized in the constructor.">
            <location file="platform/iphone/os_iphone.cpp" line="539"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSIPhone::physics_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSIPhone::physics_server&apos; is not initialized in the constructor.">
            <location file="platform/iphone/os_iphone.cpp" line="539"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSIPhone::physics_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSIPhone::physics_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/iphone/os_iphone.cpp" line="539"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSIPhone::audio_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSIPhone::audio_server&apos; is not initialized in the constructor.">
            <location file="platform/iphone/os_iphone.cpp" line="539"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSIPhone::sample_manager&apos; is not initialized in the constructor." verbose="Member variable &apos;OSIPhone::sample_manager&apos; is not initialized in the constructor.">
            <location file="platform/iphone/os_iphone.cpp" line="539"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSIPhone::spatial_sound_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSIPhone::spatial_sound_server&apos; is not initialized in the constructor.">
            <location file="platform/iphone/os_iphone.cpp" line="539"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSIPhone::spatial_sound_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSIPhone::spatial_sound_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/iphone/os_iphone.cpp" line="539"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSIPhone::audio_driver&apos; is not initialized in the constructor." verbose="Member variable &apos;OSIPhone::audio_driver&apos; is not initialized in the constructor.">
            <location file="platform/iphone/os_iphone.cpp" line="539"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSIPhone::input&apos; is not initialized in the constructor." verbose="Member variable &apos;OSIPhone::input&apos; is not initialized in the constructor.">
            <location file="platform/iphone/os_iphone.cpp" line="539"/>
        </error>
        <error id="variableHidingEnum" severity="style" msg="Variable &apos;MAX_LIGHTS&apos; hides enumerator with same name" verbose="Variable &apos;MAX_LIGHTS&apos; hides enumerator with same name">
            <location file="platform/iphone/rasterizer_iphone.h" line="52"/>
            <location file="platform/iphone/rasterizer_iphone.h" line="325"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/iphone/rasterizer_iphone.cpp" line="2114"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/iphone/rasterizer_iphone.cpp" line="2212"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerIPhone::skinned_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerIPhone::skinned_buffer&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.cpp" line="2752"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerIPhone::light_instances&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerIPhone::light_instances&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.cpp" line="2752"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerIPhone::light_instance_count&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerIPhone::light_instance_count&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.cpp" line="2752"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerIPhone::scene_fx&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerIPhone::scene_fx&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.cpp" line="2752"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerIPhone::camera_z_near&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerIPhone::camera_z_near&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.cpp" line="2752"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerIPhone::camera_z_far&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerIPhone::camera_z_far&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.cpp" line="2752"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerIPhone::last_time&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerIPhone::last_time&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.cpp" line="2752"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerIPhone::time_delta&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerIPhone::time_delta&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.cpp" line="2752"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Geometry::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Geometry::type&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.h" line="149"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Surface::has_alpha_cache&apos; is not initialized in the constructor." verbose="Member variable &apos;Surface::has_alpha_cache&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.h" line="197"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ArrayData::components&apos; is not initialized in the constructor." verbose="Member variable &apos;ArrayData::components&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.h" line="166"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::type&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.h" line="273"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RenderList::_elements&apos; is not initialized in the constructor." verbose="Member variable &apos;RenderList::_elements&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.h" line="483"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RenderList::element_count&apos; is not initialized in the constructor." verbose="Member variable &apos;RenderList::element_count&apos; is not initialized in the constructor.">
            <location file="platform/iphone/rasterizer_iphone.h" line="483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flags&apos; can be reduced." verbose="The scope of the variable &apos;flags&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/iphone/sem_iphone.cpp" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/iphone/sem_iphone.cpp" line="36"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EditorExportPlatformJavaScript::version_code&apos; is not initialized in the constructor." verbose="Member variable &apos;EditorExportPlatformJavaScript::version_code&apos; is not initialized in the constructor.">
            <location file="platform/javascript/export/export.cpp" line="315"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Android::visual_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Android::visual_server&apos; is not initialized in the constructor.">
            <location file="platform/android/os_android.cpp" line="720"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Android::audio_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Android::audio_server&apos; is not initialized in the constructor.">
            <location file="platform/android/os_android.cpp" line="720"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Android::sample_manager&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Android::sample_manager&apos; is not initialized in the constructor.">
            <location file="platform/android/os_android.cpp" line="720"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Android::spatial_sound_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Android::spatial_sound_server&apos; is not initialized in the constructor.">
            <location file="platform/android/os_android.cpp" line="720"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Android::spatial_sound_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Android::spatial_sound_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/android/os_android.cpp" line="720"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Android::physics_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Android::physics_server&apos; is not initialized in the constructor.">
            <location file="platform/android/os_android.cpp" line="720"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Android::physics_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Android::physics_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/android/os_android.cpp" line="720"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Android::input&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Android::input&apos; is not initialized in the constructor.">
            <location file="platform/android/os_android.cpp" line="720"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;ShapeSW,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;ShapeSW,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;SpaceSW,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;SpaceSW,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;AreaSW,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;AreaSW,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;BodySW,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;BodySW,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;JointSW,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;JointSW,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Space,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Space,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Room,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Room,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Source,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Source,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Listener,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Listener,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Sample,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Sample,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Voice,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Voice,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Stream,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Stream,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Shape2DSW,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Shape2DSW,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Space2DSW,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Space2DSW,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Area2DSW,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Area2DSW,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Body2DSW,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Body2DSW,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Joint2DSW,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Joint2DSW,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Rasterizer::CanvasItemMaterial,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Rasterizer::CanvasItemMaterial,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;CanvasLightOccluderPolygon,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;CanvasLightOccluderPolygon,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Rasterizer::CanvasLightOccluderInstance,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Rasterizer::CanvasLightOccluderInstance,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Rasterizer::CanvasLight,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Rasterizer::CanvasLight,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Portal,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Portal,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;BakedLight,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;BakedLight,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;BakedLightSampler,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;BakedLightSampler,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Camera,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Camera,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Viewport,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Viewport,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Scenario,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Scenario,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Instance,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Instance,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;Canvas,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;Canvas,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RID_Owner&lt;CanvasItem,false&gt;::mutex&apos; is not initialized in the constructor." verbose="Member variable &apos;RID_Owner&lt;CanvasItem,false&gt;::mutex&apos; is not initialized in the constructor.">
            <location file="core/rid.h" line="196"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;ShapeOwnerSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;ShapeOwnerSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;ShapeOwnerSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;ShapeOwnerSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;ShapeOwnerSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;BodyKey,BodyState,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;BodyKey,BodyState,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;BodyKey,BodyState,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;BodyKey,BodyState,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;BodyKey,BodyState,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;ConstraintSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;ConstraintSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;ConstraintSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;ConstraintSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;ConstraintSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;ShapeOwner2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;ShapeOwner2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;ShapeOwner2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;ShapeOwner2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;ShapeOwner2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;Constraint2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;Constraint2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;Constraint2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;Constraint2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;Constraint2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;FixedMaterialShaderKey,FixedMaterialShader,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;FixedMaterialShaderKey,FixedMaterialShader,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;FixedMaterialShaderKey,FixedMaterialShader,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;FixedMaterialShaderKey,FixedMaterialShader,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;FixedMaterialShaderKey,FixedMaterialShader,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;RID,FixedMaterial*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;RID,FixedMaterial*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;RID,FixedMaterial*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;RID,FixedMaterial*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;RID,FixedMaterial*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;int,RID,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;int,RID,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;int,RID,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;int,RID,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;int,RID,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;RID,CanvasData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;RID,CanvasData,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;RID,CanvasData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;RID,CanvasData,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;RID,CanvasData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;RID,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;RID,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;RID,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;RID,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;RID,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;RID,Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;RID,Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;RID,Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;RID,Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;RID,Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;RID,Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;RID,Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;RID,Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;RID,Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;RID,Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;ConstraintSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;ConstraintSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;ConstraintSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;ConstraintSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;ConstraintSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;CollisionObjectSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;CollisionObjectSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;CollisionObjectSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;CollisionObjectSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;CollisionObjectSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;constSpaceSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;constSpaceSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;constSpaceSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;constSpaceSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;constSpaceSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Source*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Source*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Source*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Source*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Source*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;ActiveVoice,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;ActiveVoice,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;ActiveVoice,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;ActiveVoice,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;ActiveVoice,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Constraint2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Constraint2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Constraint2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Constraint2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Constraint2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;CollisionObject2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;CollisionObject2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;CollisionObject2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;CollisionObject2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;CollisionObject2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;constSpace2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;constSpace2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;constSpace2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;constSpace2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;constSpace2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;CanvasItem*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;CanvasItem*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;CanvasItem*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;CanvasItem*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;CanvasItem*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Instance*,Comparator&lt;Instance*&gt;,OctreeAllocator&gt;::operator=&apos; should return &apos;Set&lt;Instance*,Comparator&lt;Instance*&gt;,OctreeAllocator&gt; &amp;&apos;." verbose="The Set&lt;Instance*,Comparator&lt;Instance*&gt;,OctreeAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Instance*,Comparator&lt;Instance*&gt;,OctreeAllocator&gt; &amp;Set&lt;Instance*,Comparator&lt;Instance*&gt;,OctreeAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Rasterizer::CanvasLightOccluderInstance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Rasterizer::CanvasLightOccluderInstance*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Rasterizer::CanvasLightOccluderInstance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Rasterizer::CanvasLightOccluderInstance*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Rasterizer::CanvasLightOccluderInstance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Rasterizer::CanvasLight*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Rasterizer::CanvasLight*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Rasterizer::CanvasLight*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Rasterizer::CanvasLight*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Rasterizer::CanvasLight*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,ShapeSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,ShapeSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,ShapeSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,ShapeSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,ShapeSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,SpaceSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,SpaceSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,SpaceSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,SpaceSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,SpaceSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,AreaSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,AreaSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,AreaSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,AreaSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,AreaSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,BodySW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,BodySW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,BodySW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,BodySW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,BodySW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,JointSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,JointSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,JointSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,JointSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,JointSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Space*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Space*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Space*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Space*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Space*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Room*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Room*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Room*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Room*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Room*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Source*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Source*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Source*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Source*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Source*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Listener*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Listener*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Listener*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Listener*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Listener*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Sample*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Sample*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Sample*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Sample*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Sample*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Voice*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Voice*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Voice*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Voice*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Voice*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Stream*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Stream*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Stream*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Stream*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Stream*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Shape2DSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Shape2DSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Shape2DSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Shape2DSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Shape2DSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Space2DSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Space2DSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Space2DSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Space2DSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Space2DSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Area2DSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Area2DSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Area2DSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Area2DSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Area2DSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Body2DSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Body2DSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Body2DSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Body2DSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Body2DSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Joint2DSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Joint2DSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Joint2DSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Joint2DSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Joint2DSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Portal*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Portal*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Portal*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Portal*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Portal*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,BakedLight*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,BakedLight*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,BakedLight*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,BakedLight*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,BakedLight*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,BakedLightSampler*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,BakedLightSampler*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,BakedLightSampler*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,BakedLightSampler*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,BakedLightSampler*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Camera*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Camera*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Camera*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Camera*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Camera*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Viewport*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Viewport*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Viewport*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Viewport*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Viewport*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Scenario*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Scenario*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Scenario*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Scenario*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Scenario*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Instance*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Instance*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Instance*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Instance*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Instance*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,Canvas*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,Canvas*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,Canvas*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,Canvas*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,Canvas*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;unsignedint__int32,CanvasItem*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;unsignedint__int32,CanvasItem*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;unsignedint__int32,CanvasItem*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;unsignedint__int32,CanvasItem*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;unsignedint__int32,CanvasItem*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;Face&gt;::operator=&apos; should return &apos;DVector&lt;Face&gt; &amp;&apos;." verbose="The DVector&lt;Face&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;Face&gt; &amp;DVector&lt;Face&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;BVH&gt;::operator=&apos; should return &apos;DVector&lt;BVH&gt; &amp;&apos;." verbose="The DVector&lt;BVH&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;BVH&gt; &amp;DVector&lt;BVH&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DVector&lt;Point2&gt;::operator=&apos; should return &apos;DVector&lt;Point2&gt; &amp;&apos;." verbose="The DVector&lt;Point2&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DVector&lt;Point2&gt; &amp;DVector&lt;Point2&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/dvector.h" line="289"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Shape&gt;::operator=&apos; should return &apos;Vector&lt;Shape&gt; &amp;&apos;." verbose="The Vector&lt;Shape&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Shape&gt; &amp;Vector&lt;Shape&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;AreaCMP&gt;::operator=&apos; should return &apos;Vector&lt;AreaCMP&gt; &amp;&apos;." verbose="The Vector&lt;AreaCMP&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;AreaCMP&gt; &amp;Vector&lt;AreaCMP&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Contact&gt;::operator=&apos; should return &apos;Vector&lt;Contact&gt; &amp;&apos;." verbose="The Vector&lt;Contact&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Contact&gt; &amp;Vector&lt;Contact&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Voice&gt;::operator=&apos; should return &apos;Vector&lt;Voice&gt; &amp;&apos;." verbose="The Vector&lt;Voice&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Voice&gt; &amp;Vector&lt;Voice&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Segment&gt;::operator=&apos; should return &apos;Vector&lt;Segment&gt; &amp;&apos;." verbose="The Vector&lt;Segment&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Segment&gt; &amp;Vector&lt;Segment&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;BVH&gt;::operator=&apos; should return &apos;Vector&lt;BVH&gt; &amp;&apos;." verbose="The Vector&lt;BVH&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;BVH&gt; &amp;Vector&lt;BVH&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Command*&gt;::operator=&apos; should return &apos;Vector&lt;Command*&gt; &amp;&apos;." verbose="The Vector&lt;Command*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Command*&gt; &amp;Vector&lt;Command*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;TouchPos&gt;::operator=&apos; should return &apos;Vector&lt;TouchPos&gt; &amp;&apos;." verbose="The Vector&lt;TouchPos&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;TouchPos&gt; &amp;Vector&lt;TouchPos&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;CanvasItem*&gt;::operator=&apos; should return &apos;Vector&lt;CanvasItem*&gt; &amp;&apos;." verbose="The Vector&lt;CanvasItem*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;CanvasItem*&gt; &amp;Vector&lt;CanvasItem*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;ChildItem&gt;::operator=&apos; should return &apos;Vector&lt;ChildItem&gt; &amp;&apos;." verbose="The Vector&lt;ChildItem&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;ChildItem&gt; &amp;Vector&lt;ChildItem&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Stream*,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Stream*,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Stream*,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Stream*,DefaultAllocator&gt; &amp;List&lt;Stream*,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Instance*,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Instance*,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Instance*,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Instance*,DefaultAllocator&gt; &amp;List&lt;Instance*,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;color&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;color&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="servers/visual/rasterizer.h" line="613"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;disable_color&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;disable_color&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="servers/visual/visual_server_raster.h" line="89"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;modulate&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;modulate&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="servers/visual/visual_server_raster.h" line="461"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;canvas&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;canvas&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="servers/visual/visual_server_raster.h" line="504"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SpaceSW::get_static_global_body&apos; can be const." verbose="The member function &apos;SpaceSW::get_static_global_body&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/space_sw.h" line="171"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;VisualServerRaster::Canvas::find_item&apos; can be const." verbose="The member function &apos;VisualServerRaster::Canvas::find_item&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/visual/visual_server_raster.h" line="448"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ShapeOwnerSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;ShapeOwnerSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ShapeOwnerSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;ShapeOwnerSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ShapeOwnerSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;ShapeOwnerSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;BodyKey,BodyState,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;BodyKey,BodyState,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;BodyKey,BodyState,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;BodyKey,BodyState,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;BodyKey,BodyState,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;BodyKey,BodyState,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ConstraintSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;ConstraintSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ConstraintSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;ConstraintSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ConstraintSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;ConstraintSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ShapeOwner2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;ShapeOwner2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ShapeOwner2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;ShapeOwner2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ShapeOwner2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;ShapeOwner2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Constraint2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;Constraint2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Constraint2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;Constraint2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Constraint2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;Constraint2DSW*,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;FixedMaterialShaderKey,FixedMaterialShader,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;FixedMaterialShaderKey,FixedMaterialShader,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;FixedMaterialShaderKey,FixedMaterialShader,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;FixedMaterialShaderKey,FixedMaterialShader,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;FixedMaterialShaderKey,FixedMaterialShader,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;FixedMaterialShaderKey,FixedMaterialShader,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,FixedMaterial*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;RID,FixedMaterial*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,FixedMaterial*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;RID,FixedMaterial*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,FixedMaterial*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;RID,FixedMaterial*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,RID,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;int,RID,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,RID,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;int,RID,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,RID,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;int,RID,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,CanvasData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;RID,CanvasData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,CanvasData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;RID,CanvasData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,CanvasData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;RID,CanvasData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;RID,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;RID,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;RID,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;RID,Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;RID,Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;RID,Set&lt;RID,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;RID,Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;RID,Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;RID,Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;RID,Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;ConstraintSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;ConstraintSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;ConstraintSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;ConstraintSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;ConstraintSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;ConstraintSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;CollisionObjectSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;CollisionObjectSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;CollisionObjectSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;CollisionObjectSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;CollisionObjectSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;CollisionObjectSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;constSpaceSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;constSpaceSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;constSpaceSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;constSpaceSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;constSpaceSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;constSpaceSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Source*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Source*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Source*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Source*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Source*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Source*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;ActiveVoice,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;ActiveVoice,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;ActiveVoice,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;ActiveVoice,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;ActiveVoice,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;ActiveVoice,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Constraint2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Constraint2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Constraint2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Constraint2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Constraint2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Constraint2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;CollisionObject2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;CollisionObject2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;CollisionObject2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;CollisionObject2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;CollisionObject2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;CollisionObject2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;constSpace2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;constSpace2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;constSpace2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;constSpace2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;constSpace2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;constSpace2DSW*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;CanvasItem*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;CanvasItem*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;CanvasItem*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;CanvasItem*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;CanvasItem*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;CanvasItem*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Instance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Instance*,Comparator&lt;Instance*&gt;,OctreeAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Instance*,Comparator&lt;Instance*&gt;,OctreeAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Instance*,Comparator&lt;Instance*&gt;,OctreeAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Instance*,Comparator&lt;Instance*&gt;,OctreeAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Instance*,Comparator&lt;Instance*&gt;,OctreeAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Instance*,Comparator&lt;Instance*&gt;,OctreeAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Rasterizer::CanvasLightOccluderInstance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Rasterizer::CanvasLightOccluderInstance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Rasterizer::CanvasLightOccluderInstance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Rasterizer::CanvasLightOccluderInstance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Rasterizer::CanvasLightOccluderInstance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Rasterizer::CanvasLightOccluderInstance*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Rasterizer::CanvasLight*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Rasterizer::CanvasLight*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Rasterizer::CanvasLight*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Rasterizer::CanvasLight*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Rasterizer::CanvasLight*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Rasterizer::CanvasLight*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;ShapeSW,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;ShapeSW,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;SpaceSW,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;SpaceSW,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;AreaSW,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;AreaSW,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;BodySW,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;BodySW,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;JointSW,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;JointSW,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Space,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Space,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Room,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Room,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Source,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Source,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Listener,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Listener,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Sample,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Sample,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Voice,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Voice,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Stream,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Stream,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Shape2DSW,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Shape2DSW,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Space2DSW,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Space2DSW,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Area2DSW,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Area2DSW,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Body2DSW,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Body2DSW,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Joint2DSW,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Joint2DSW,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Rasterizer::CanvasItemMaterial,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Rasterizer::CanvasItemMaterial,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;CanvasLightOccluderPolygon,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;CanvasLightOccluderPolygon,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Rasterizer::CanvasLightOccluderInstance,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Rasterizer::CanvasLightOccluderInstance,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Rasterizer::CanvasLight,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Rasterizer::CanvasLight,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Portal,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Portal,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;BakedLight,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;BakedLight,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;BakedLightSampler,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;BakedLightSampler,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Camera,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Camera,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Viewport,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Viewport,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Scenario,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Scenario,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Instance,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Instance,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;Canvas,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;Canvas,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;RID_Owner&lt;CanvasItem,false&gt;::make_rid&apos; can be const." verbose="The member function &apos;RID_Owner&lt;CanvasItem,false&gt;::make_rid&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/rid.h" line="115"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,ShapeSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,ShapeSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,ShapeSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,ShapeSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,SpaceSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,SpaceSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,SpaceSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,SpaceSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,AreaSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,AreaSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,AreaSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,AreaSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,BodySW*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,BodySW*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,BodySW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,BodySW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,JointSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,JointSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,JointSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,JointSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Space*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Space*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Space*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Space*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Room*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Room*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Room*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Room*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Source*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Source*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Source*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Source*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Listener*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Listener*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Listener*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Listener*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Sample*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Sample*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Sample*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Sample*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Voice*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Voice*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Voice*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Voice*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Stream*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Stream*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Stream*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Stream*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Shape2DSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Shape2DSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Shape2DSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Shape2DSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Space2DSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Space2DSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Space2DSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Space2DSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Area2DSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Area2DSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Area2DSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Area2DSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Body2DSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Body2DSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Body2DSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Body2DSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Joint2DSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Joint2DSW*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Joint2DSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Joint2DSW*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Portal*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Portal*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Portal*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Portal*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,BakedLight*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,BakedLight*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,BakedLight*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,BakedLight*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,BakedLightSampler*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,BakedLightSampler*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,BakedLightSampler*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,BakedLightSampler*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Camera*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Camera*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Camera*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Camera*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Viewport*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Viewport*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Viewport*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Viewport*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Scenario*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Scenario*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Scenario*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Scenario*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Instance*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Instance*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Instance*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Instance*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Canvas*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Canvas*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,Canvas*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,Canvas*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,CanvasItem*,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,CanvasItem*,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;unsignedint__int32,CanvasItem*,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;unsignedint__int32,CanvasItem*,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;PhysicsDirectSpaceState::ShapeResult&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;PhysicsDirectSpaceState::ShapeResult&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Vector3&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Vector3&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Shape&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Shape&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Shape&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Shape&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Shape&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Shape&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;AreaCMP&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;AreaCMP&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;AreaCMP&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;AreaCMP&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;AreaCMP&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;AreaCMP&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Contact&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Contact&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Contact&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Contact&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Contact&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Contact&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Voice&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Voice&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Voice&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Voice&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Voice&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Voice&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Physics2DDirectSpaceState::ShapeResult&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Physics2DDirectSpaceState::ShapeResult&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Segment&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Segment&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Segment&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Segment&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Segment&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Segment&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;BVH&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;BVH&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;BVH&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;BVH&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;BVH&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;BVH&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Command*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Command*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Command*&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Command*&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Command*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Command*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TouchPos&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;TouchPos&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TouchPos&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;TouchPos&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TouchPos&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;TouchPos&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;CanvasItem*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;CanvasItem*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;CanvasItem*&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;CanvasItem*&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;CanvasItem*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;CanvasItem*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ChildItem&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;ChildItem&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ChildItem&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;ChildItem&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ChildItem&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;ChildItem&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Stream*,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Stream*,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Stream*,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Stream*,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Instance*,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Instance*,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Instance*,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Instance*,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Shape,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Shape,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;AreaCMP,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;AreaCMP,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Contact,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Contact,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Voice,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Voice,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Segment,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Segment,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;BVH,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;BVH,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Command*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Command*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;TouchPos,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;TouchPos,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;CanvasItem*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;CanvasItem*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;ChildItem,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;ChildItem,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_octree&apos; should be passed by reference." verbose="Parameter &apos;p_octree&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="servers/visual/visual_server_raster.h" line="931"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_light&apos; should be passed by reference." verbose="Parameter &apos;p_light&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="servers/visual/visual_server_raster.h" line="934"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_texture&apos; should be passed by reference." verbose="Parameter &apos;p_texture&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="servers/visual/visual_server_raster.h" line="943"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/nacl/audio_driver_nacl.cpp" line="42"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverNacl::samples_in&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverNacl::samples_in&apos; is not initialized in the constructor.">
            <location file="platform/nacl/audio_driver_nacl.cpp" line="98"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverNacl::sample_frame_count_&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverNacl::sample_frame_count_&apos; is not initialized in the constructor.">
            <location file="platform/nacl/audio_driver_nacl.cpp" line="98"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverNacl::sample_count&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverNacl::sample_count&apos; is not initialized in the constructor.">
            <location file="platform/nacl/audio_driver_nacl.cpp" line="98"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ContextGLNacl::device3d_&apos; is not initialized in the constructor." verbose="Member variable &apos;ContextGLNacl::device3d_&apos; is not initialized in the constructor.">
            <location file="platform/nacl/context_gl_nacl.cpp" line="59"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GetURLHandler::buffer_&apos; is not initialized in the constructor." verbose="Member variable &apos;GetURLHandler::buffer_&apos; is not initialized in the constructor.">
            <location file="platform/nacl/geturl_handler.cpp" line="134"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GetURLHandler::complete&apos; is not initialized in the constructor." verbose="Member variable &apos;GetURLHandler::complete&apos; is not initialized in the constructor.">
            <location file="platform/nacl/geturl_handler.cpp" line="134"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The typedef &apos;ID&apos; hides a typedef with the same name." verbose="The typedef &apos;ID&apos; hides a typedef with the same name." inconclusive="true">
            <location file="core/rid.h" line="45"/>
            <location file="servers/physics/broad_phase_sw.h" line="45"/>
        </error>
        <error id="variableHidingTypedef" severity="style" msg="The typedef &apos;ID&apos; hides a typedef with the same name." verbose="The typedef &apos;ID&apos; hides a typedef with the same name." inconclusive="true">
            <location file="core/rid.h" line="45"/>
            <location file="servers/physics_2d/broad_phase_2d_sw.h" line="45"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%i in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%i in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;.">
            <location file="platform/nacl/godot_module.cpp" line="115"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/nacl/godot_module.cpp" line="256"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/nacl/godot_module.cpp" line="290"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GodotInstance::width&apos; is not initialized in the constructor." verbose="Member variable &apos;GodotInstance::width&apos; is not initialized in the constructor.">
            <location file="platform/nacl/godot_module.cpp" line="87"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GodotInstance::height&apos; is not initialized in the constructor." verbose="Member variable &apos;GodotInstance::height&apos; is not initialized in the constructor.">
            <location file="platform/nacl/godot_module.cpp" line="87"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GodotInstance::init_argn&apos; is not initialized in the constructor." verbose="Member variable &apos;GodotInstance::init_argn&apos; is not initialized in the constructor.">
            <location file="platform/nacl/godot_module.cpp" line="87"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GodotInstance::init_argv&apos; is not initialized in the constructor." verbose="Member variable &apos;GodotInstance::init_argv&apos; is not initialized in the constructor.">
            <location file="platform/nacl/godot_module.cpp" line="87"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CollisionObjectSW::set_layer_mask&apos; can be static." verbose="The member function &apos;CollisionObjectSW::set_layer_mask&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics/collision_object_sw.h" line="136"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;BodySW::set_island_step&apos; can be static." verbose="The member function &apos;BodySW::set_island_step&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics/body_sw.h" line="160"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;ConstraintSW::set_island_step&apos; can be static." verbose="The member function &apos;ConstraintSW::set_island_step&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics/constraint_sw.h" line="54"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;LineShape2DSW::project_range&apos; can be static." verbose="The member function &apos;LineShape2DSW::project_range&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d/shape_2d_sw.h" line="183"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;LineShape2DSW::project_range_cast&apos; can be static." verbose="The member function &apos;LineShape2DSW::project_range_cast&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d/shape_2d_sw.h" line="193"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CollisionObject2DSW::set_collision_mask&apos; can be static." verbose="The member function &apos;CollisionObject2DSW::set_collision_mask&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d/collision_object_2d_sw.h" line="120"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CollisionObject2DSW::set_layer_mask&apos; can be static." verbose="The member function &apos;CollisionObject2DSW::set_layer_mask&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d/collision_object_2d_sw.h" line="123"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CollisionObject2DSW::test_collision_mask&apos; can be static." verbose="The member function &apos;CollisionObject2DSW::test_collision_mask&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d/collision_object_2d_sw.h" line="136"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Body2DSW::set_island_step&apos; can be static." verbose="The member function &apos;Body2DSW::set_island_step&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d/body_2d_sw.h" line="162"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Constraint2DSW::set_island_step&apos; can be static." verbose="The member function &apos;Constraint2DSW::set_island_step&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d/constraint_2d_sw.h" line="53"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GodotInstance::init_argc&apos; is not initialized in the constructor." verbose="Member variable &apos;GodotInstance::init_argc&apos; is not initialized in the constructor.">
            <location file="platform/nacl/godot_module.cpp" line="87"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,ShapeSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,ShapeSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,ShapeSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,ShapeSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,ShapeSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,SpaceSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,SpaceSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,SpaceSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,SpaceSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,SpaceSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,AreaSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,AreaSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,AreaSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,AreaSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,AreaSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,BodySW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,BodySW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,BodySW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,BodySW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,BodySW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,JointSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,JointSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,JointSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,JointSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,JointSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Space*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Space*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Space*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Space*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Space*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Room*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Room*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Room*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Room*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Room*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Source*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Source*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Source*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Source*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Source*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Listener*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Listener*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Listener*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Listener*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Listener*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Sample*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Sample*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Sample*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Sample*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Sample*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Voice*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Voice*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Voice*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Voice*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Voice*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Stream*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Stream*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Stream*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Stream*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Stream*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Shape2DSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Shape2DSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Shape2DSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Shape2DSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Shape2DSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Space2DSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Space2DSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Space2DSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Space2DSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Space2DSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Area2DSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Area2DSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Area2DSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Area2DSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Area2DSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Body2DSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Body2DSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Body2DSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Body2DSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Body2DSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Joint2DSW*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Joint2DSW*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Joint2DSW*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Joint2DSW*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Joint2DSW*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/nacl/opengl_context.cpp" line="117"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OpenGLContext::width&apos; is not initialized in the constructor." verbose="Member variable &apos;OpenGLContext::width&apos; is not initialized in the constructor.">
            <location file="platform/nacl/opengl_context.cpp" line="49"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OpenGLContext::height&apos; is not initialized in the constructor." verbose="Member variable &apos;OpenGLContext::height&apos; is not initialized in the constructor.">
            <location file="platform/nacl/opengl_context.cpp" line="49"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_JavaScript::use_gl2&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_JavaScript::use_gl2&apos; is not initialized in the constructor.">
            <location file="platform/javascript/os_javascript.cpp" line="574"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_JavaScript::visual_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_JavaScript::visual_server&apos; is not initialized in the constructor.">
            <location file="platform/javascript/os_javascript.cpp" line="574"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_JavaScript::audio_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_JavaScript::audio_server&apos; is not initialized in the constructor.">
            <location file="platform/javascript/os_javascript.cpp" line="574"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_JavaScript::sample_manager&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_JavaScript::sample_manager&apos; is not initialized in the constructor.">
            <location file="platform/javascript/os_javascript.cpp" line="574"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_JavaScript::spatial_sound_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_JavaScript::spatial_sound_server&apos; is not initialized in the constructor.">
            <location file="platform/javascript/os_javascript.cpp" line="574"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_JavaScript::spatial_sound_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_JavaScript::spatial_sound_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/javascript/os_javascript.cpp" line="574"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_JavaScript::physics_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_JavaScript::physics_server&apos; is not initialized in the constructor.">
            <location file="platform/javascript/os_javascript.cpp" line="574"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_JavaScript::physics_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_JavaScript::physics_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/javascript/os_javascript.cpp" line="574"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_JavaScript::input&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_JavaScript::input&apos; is not initialized in the constructor.">
            <location file="platform/javascript/os_javascript.cpp" line="574"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Rasterizer::CanvasItemMaterial*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,CanvasLightOccluderPolygon*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Rasterizer::CanvasLightOccluderInstance*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Rasterizer::CanvasLight*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Portal*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Portal*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Portal*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Portal*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Portal*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,BakedLight*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,BakedLight*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,BakedLight*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,BakedLight*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,BakedLight*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,BakedLightSampler*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,BakedLightSampler*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,BakedLightSampler*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,BakedLightSampler*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,BakedLightSampler*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Camera*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Camera*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Camera*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Camera*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Camera*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Viewport*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Viewport*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Viewport*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Viewport*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Viewport*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Scenario*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Scenario*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Scenario*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Scenario*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Scenario*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Instance*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Instance*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Instance*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Instance*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Instance*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,Canvas*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,Canvas*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,Canvas*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,Canvas*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,Canvas*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;uint32_t,CanvasItem*,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;uint32_t,CanvasItem*,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;uint32_t,CanvasItem*,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;uint32_t,CanvasItem*,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;uint32_t,CanvasItem*,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="noQuoteCharPair" severity="error" msg="No pair for character (&apos;). Can&apos;t process file. File is either invalid or unicode, which is currently not supported." verbose="No pair for character (&apos;). Can&apos;t process file. File is either invalid or unicode, which is currently not supported.">
            <location file="platform/nacl/pepper_main.cpp" line="37"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/osx/audio_driver_osx.cpp" line="102"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;result&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;result&apos; is reassigned a value before the old one has been used.">
            <location file="platform/osx/audio_driver_osx.cpp" line="64"/>
            <location file="platform/osx/audio_driver_osx.cpp" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;frames_left&apos; can be reduced." verbose="The scope of the variable &apos;frames_left&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/osx/audio_driver_osx.cpp" line="121"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverOSX::active&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverOSX::active&apos; is not initialized in the constructor.">
            <location file="platform/osx/audio_driver_osx.cpp" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverOSX::channels&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverOSX::channels&apos; is not initialized in the constructor.">
            <location file="platform/osx/audio_driver_osx.cpp" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverOSX::samples_in&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverOSX::samples_in&apos; is not initialized in the constructor.">
            <location file="platform/osx/audio_driver_osx.cpp" line="178"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverOSX::buffer_frames&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverOSX::buffer_frames&apos; is not initialized in the constructor.">
            <location file="platform/osx/audio_driver_osx.cpp" line="178"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used.">
            <location file="platform/osx/export/export.cpp" line="403"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EditorExportPlatformOSX::version_code&apos; is not initialized in the constructor." verbose="Member variable &apos;EditorExportPlatformOSX::version_code&apos; is not initialized in the constructor.">
            <location file="platform/osx/export/export.cpp" line="446"/>
        </error>
        <error id="invalidPrintfArgType_int" severity="warning" msg="%x in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;PackedData *&apos;." verbose="%x in format string (no. 2) requires &apos;unsigned int&apos; but the argument type is &apos;PackedData *&apos;.">
            <location file="platform/nacl/os_nacl.cpp" line="340"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flags&apos; can be reduced." verbose="The scope of the variable &apos;flags&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/osx/sem_osx.cpp" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/osx/sem_osx.cpp" line="36"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Geometry::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Geometry::type&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer_dummy.h" line="139"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Surface::alpha_sort&apos; is not initialized in the constructor." verbose="Member variable &apos;Surface::alpha_sort&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer_dummy.h" line="169"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MultiMeshSurface::surface&apos; is not initialized in the constructor." verbose="Member variable &apos;MultiMeshSurface::surface&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer_dummy.h" line="209"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::type&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::type&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer_dummy.h" line="291"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightInstance::base&apos; is not initialized in the constructor." verbose="Member variable &apos;LightInstance::base&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer_dummy.h" line="388"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::rasterizer&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::rasterizer&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::visual_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::visual_server&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::main_loop&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::main_loop&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::physics_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::physics_server&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::physics_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::physics_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::ip_unix&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::ip_unix&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::audio_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::audio_server&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::sample_manager&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::sample_manager&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::spatial_sound_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::spatial_sound_server&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::spatial_sound_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::spatial_sound_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::force_quit&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::force_quit&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Server::input&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Server::input&apos; is not initialized in the constructor.">
            <location file="platform/server/os_server.cpp" line="235"/>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The struct &apos;Surface&apos; defines member variable with name &apos;material&apos; also defined in its parent struct &apos;Geometry&apos;." verbose="The struct &apos;Surface&apos; defines member variable with name &apos;material&apos; also defined in its parent struct &apos;Geometry&apos;.">
            <location file="servers/visual/rasterizer_dummy.h" line="135"/>
            <location file="servers/visual/rasterizer_dummy.h" line="165"/>
        </error>
        <error id="duplInheritedMember" severity="warning" msg="The struct &apos;Surface&apos; defines member variable with name &apos;material_owned&apos; also defined in its parent struct &apos;Geometry&apos;." verbose="The struct &apos;Surface&apos; defines member variable with name &apos;material_owned&apos; also defined in its parent struct &apos;Geometry&apos;.">
            <location file="servers/visual/rasterizer_dummy.h" line="137"/>
            <location file="servers/visual/rasterizer_dummy.h" line="166"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSNacl::ticks_start&apos; is not initialized in the constructor." verbose="Member variable &apos;OSNacl::ticks_start&apos; is not initialized in the constructor.">
            <location file="platform/nacl/os_nacl.cpp" line="540"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSNacl::rasterizer&apos; is not initialized in the constructor." verbose="Member variable &apos;OSNacl::rasterizer&apos; is not initialized in the constructor.">
            <location file="platform/nacl/os_nacl.cpp" line="540"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSNacl::visual_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSNacl::visual_server&apos; is not initialized in the constructor.">
            <location file="platform/nacl/os_nacl.cpp" line="540"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSNacl::physics_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSNacl::physics_server&apos; is not initialized in the constructor.">
            <location file="platform/nacl/os_nacl.cpp" line="540"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSNacl::spatial_sound_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSNacl::spatial_sound_server&apos; is not initialized in the constructor.">
            <location file="platform/nacl/os_nacl.cpp" line="540"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSNacl::audio_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSNacl::audio_server&apos; is not initialized in the constructor.">
            <location file="platform/nacl/os_nacl.cpp" line="540"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSNacl::sample_manager&apos; is not initialized in the constructor." verbose="Member variable &apos;OSNacl::sample_manager&apos; is not initialized in the constructor.">
            <location file="platform/nacl/os_nacl.cpp" line="540"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSNacl::spatial_sound_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSNacl::spatial_sound_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/nacl/os_nacl.cpp" line="540"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSNacl::physics_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSNacl::physics_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/nacl/os_nacl.cpp" line="540"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSNacl::audio_driver&apos; is not initialized in the constructor." verbose="Member variable &apos;OSNacl::audio_driver&apos; is not initialized in the constructor.">
            <location file="platform/nacl/os_nacl.cpp" line="540"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSNacl::input&apos; is not initialized in the constructor." verbose="Member variable &apos;OSNacl::input&apos; is not initialized in the constructor.">
            <location file="platform/nacl/os_nacl.cpp" line="540"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;ObjectID,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;ObjectID,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;ObjectID,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;ObjectID,DefaultAllocator&gt; &amp;List&lt;ObjectID,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;PackSource*&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;PackSource*&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Node*&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Node*&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;ObjectID,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;ObjectID,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;ObjectID,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;ObjectID,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;OS_Windows&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;OS_Windows&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="platform/windows/os_windows.h" line="305"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: argv_utf8" verbose="Memory leak: argv_utf8">
            <location file="platform/windows/godot_win.cpp" line="141"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses." verbose="Suspicious condition. Comparison operators have higher precedence than bitwise operators. Please clarify the condition with parentheses.">
            <location file="platform/windows/os_windows.cpp" line="762"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="platform/windows/os_windows.cpp" line="1021"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;last_ticks&apos; is assigned a value that is never used." verbose="Variable &apos;last_ticks&apos; is assigned a value that is never used.">
            <location file="platform/windows/os_windows.cpp" line="2237"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;frames&apos; is assigned a value that is never used." verbose="Variable &apos;frames&apos; is assigned a value that is never used.">
            <location file="platform/windows/os_windows.cpp" line="2239"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;frame&apos; is assigned a value that is never used." verbose="Variable &apos;frame&apos; is assigned a value that is never used.">
            <location file="platform/windows/os_windows.cpp" line="2240"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::stdo&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::stdo&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::ticks_start&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::ticks_start&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::ticks_per_second&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::ticks_per_second&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::outside&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::outside&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::old_x&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::old_x&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::old_y&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::old_y&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::visual_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::visual_server&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::rasterizer&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::rasterizer&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::physics_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::physics_server&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::physics_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::physics_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::joystick_count&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::joystick_count&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::main_loop&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::main_loop&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::audio_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::audio_server&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::sample_manager&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::sample_manager&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::spatial_sound_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::spatial_sound_server&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::spatial_sound_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::spatial_sound_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::last_button_state&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::last_button_state&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::input&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::input&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::process_map&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::process_map&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::pre_fs_valid&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::pre_fs_valid&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::maximized&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::maximized&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;err&apos; is assigned a value that is never used." verbose="Variable &apos;err&apos; is assigned a value that is never used.">
            <location file="platform/windows/packet_peer_udp_winsock.cpp" line="47"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerUDPWinsock::recv_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerUDPWinsock::recv_buffer&apos; is not initialized in the constructor.">
            <location file="platform/windows/packet_peer_udp_winsock.cpp" line="191"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerUDPWinsock::packet_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerUDPWinsock::packet_buffer&apos; is not initialized in the constructor.">
            <location file="platform/windows/packet_peer_udp_winsock.cpp" line="191"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PacketPeerUDPWinsock::blocking&apos; is not initialized in the constructor." verbose="Member variable &apos;PacketPeerUDPWinsock::blocking&apos; is not initialized in the constructor.">
            <location file="platform/windows/packet_peer_udp_winsock.cpp" line="191"/>
        </error>
        <error id="class_X_Y" severity="information" msg="The code &apos;class App sealed :&apos; is not handled. You can use -I or --include to add handling of this code." verbose="The code &apos;class App sealed :&apos; is not handled. You can use -I or --include to add handling of this code.">
            <location file="platform/winrt/app.h" line="12"/>
        </error>
        <error id="class_X_Y" severity="information" msg="The code &apos;class HelloTriangleApplicationSource sealed :&apos; is not handled. You can use -I or --include to add handling of this code." verbose="The code &apos;class HelloTriangleApplicationSource sealed :&apos; is not handled. You can use -I or --include to add handling of this code.">
            <location file="platform/winrt/app.cpp" line="30"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ContextEGL&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ContextEGL&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="platform/winrt/gl_context_egl.h" line="39"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dpi" verbose="Uninitialized variable: dpi">
            <location file="platform/winrt/app.cpp" line="374"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;last_ticks&apos; is assigned a value that is never used." verbose="Variable &apos;last_ticks&apos; is assigned a value that is never used.">
            <location file="platform/winrt/os_winrt.cpp" line="630"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;frames&apos; is assigned a value that is never used." verbose="Variable &apos;frames&apos; is assigned a value that is never used.">
            <location file="platform/winrt/os_winrt.cpp" line="632"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;frame&apos; is assigned a value that is never used." verbose="Variable &apos;frame&apos; is assigned a value that is never used.">
            <location file="platform/winrt/os_winrt.cpp" line="633"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::stdo&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::stdo&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::ticks_start&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::ticks_start&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::ticks_per_second&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::ticks_per_second&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::outside&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::outside&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::old_x&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::old_x&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::old_y&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::old_y&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::visual_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::visual_server&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::rasterizer&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::rasterizer&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::physics_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::physics_server&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::physics_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::physics_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::joystick_count&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::joystick_count&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::main_loop&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::main_loop&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::audio_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::audio_server&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::sample_manager&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::sample_manager&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::spatial_sound_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::spatial_sound_server&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::spatial_sound_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::spatial_sound_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::last_button_state&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::last_button_state&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OSWinrt::input&apos; is not initialized in the constructor." verbose="Member variable &apos;OSWinrt::input&apos; is not initialized in the constructor.">
            <location file="platform/winrt/os_winrt.cpp" line="663"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_Windows::gl_context&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_Windows::gl_context&apos; is not initialized in the constructor.">
            <location file="platform/windows/os_windows.cpp" line="2321"/>
        </error>
        <error id="virtualDestructor" severity="warning" msg="Class &apos;ContextGL&apos; which has virtual members does not have a virtual destructor." verbose="Class &apos;ContextGL&apos; which has virtual members does not have a virtual destructor." inconclusive="true">
            <location file="drivers/gl_context/context_gl.h" line="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;middle&apos; can be reduced." verbose="The scope of the variable &apos;middle&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/x11/key_mapping_x11.cpp" line="1010"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;middle&apos; can be reduced." verbose="The scope of the variable &apos;middle&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/x11/key_mapping_x11.cpp" line="1799"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="platform/x11/os_x11.cpp" line="1507"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::rasterizer&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::rasterizer&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::visual_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::visual_server&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::main_loop&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::main_loop&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::x11_display&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::x11_display&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::xmbstring&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::xmbstring&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::xmblen&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::xmblen&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::last_timestamp&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::last_timestamp&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::last_mouse_pos_valid&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::last_mouse_pos_valid&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::last_click_ms&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::last_click_ms&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::event_id&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::event_id&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::last_button_state&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::last_button_state&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::physics_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::physics_server&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::physics_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::physics_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::ip_unix&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::ip_unix&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::audio_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::audio_server&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::sample_manager&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::sample_manager&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::spatial_sound_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::spatial_sound_server&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::spatial_sound_2d_server&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::spatial_sound_2d_server&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::force_quit&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::force_quit&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::dpad_last&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::dpad_last&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::do_mouse_warp&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::do_mouse_warp&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::cursor_theme&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::cursor_theme&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::cursor_size&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::cursor_size&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::input&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::input&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::joystick_count&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::joystick_count&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::audio_driver_index&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::audio_driver_index&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::capture_idle&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::capture_idle&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OS_X11::maximized&apos; is not initialized in the constructor." verbose="Member variable &apos;OS_X11::maximized&apos; is not initialized in the constructor.">
            <location file="platform/x11/os_x11.cpp" line="1932"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::body_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::body_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/2d/area_2d.h" line="78"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::area_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::area_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/2d/area_2d.h" line="78"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AreaShapePair::area_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;AreaShapePair::area_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/2d/area_2d.h" line="109"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AreaShapePair::self_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;AreaShapePair::self_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/2d/area_2d.h" line="109"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Shape2D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Shape2D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/resources/shape_2d.h" line="44"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;screen_size&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;screen_size&apos; is reassigned a value before the old one has been used.">
            <location file="scene/2d/camera_2d.cpp" line="75"/>
            <location file="scene/2d/camera_2d.cpp" line="74"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Camera2D::viewport&apos; is not initialized in the constructor." verbose="Member variable &apos;Camera2D::viewport&apos; is not initialized in the constructor.">
            <location file="scene/2d/camera_2d.cpp" line="519"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CollisionObject2D::area&apos; is not initialized in the constructor." verbose="Member variable &apos;CollisionObject2D::area&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/2d/collision_object_2d.cpp" line="360"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CollisionObject2D::pickable&apos; is not initialized in the constructor." verbose="Member variable &apos;CollisionObject2D::pickable&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/2d/collision_object_2d.cpp" line="360"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::body_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::body_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/2d/physics_body_2d.h" line="174"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::local_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::local_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/2d/physics_body_2d.h" line="174"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::tagged&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::tagged&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/2d/physics_body_2d.h" line="174"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::tagged&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::tagged&apos; is not initialized in the constructor.">
            <location file="scene/2d/physics_body_2d.h" line="175"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PhysicsBody2D&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PhysicsBody2D&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/2d/physics_body_2d.h" line="53"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;LightOccluder2D::enabled&apos; is not initialized in the constructor." verbose="Member variable &apos;LightOccluder2D::enabled&apos; is not initialized in the constructor.">
            <location file="scene/2d/light_occluder_2d.cpp" line="192"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="scene/2d/navigation2d.h" line="34"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="scene/2d/navigation2d.h" line="35"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/2d/node_2d.cpp" line="143"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/2d/node_2d.cpp" line="154"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/2d/node_2d.cpp" line="163"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/2d/node_2d.cpp" line="177"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/2d/node_2d.cpp" line="182"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/2d/node_2d.cpp" line="188"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/2d/physics_body_2d.cpp" line="437"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/2d/physics_body_2d.cpp" line="453"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/2d/physics_body_2d.cpp" line="455"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;KEY_TAB&apos; since the value of &apos;KEY_TAB&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;KEY_TAB&apos; since the value of &apos;KEY_TAB&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="platform/x11/os_x11.cpp" line="1"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;tex_size&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;tex_size&apos; is reassigned a value before the old one has been used.">
            <location file="scene/2d/polygon_2d.cpp" line="127"/>
            <location file="scene/2d/polygon_2d.cpp" line="125"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;Quadrant::dirty_list&apos; is not assigned a value in &apos;Quadrant::operator=&apos;." verbose="Member variable &apos;Quadrant::dirty_list&apos; is not assigned a value in &apos;Quadrant::operator=&apos;." inconclusive="true">
            <location file="scene/2d/tile_map.h" line="130"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Quadrant::operator=&apos; should return &apos;Quadrant &amp;&apos;." verbose="The Quadrant::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Quadrant &amp;Quadrant::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="scene/2d/tile_map.h" line="130"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;from&apos; is assigned a value that is never used." verbose="Variable &apos;from&apos; is assigned a value that is never used.">
            <location file="scene/2d/visibility_notifier_2d.cpp" line="262"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mode&apos; is assigned a value that is never used." verbose="Variable &apos;mode&apos; is assigned a value that is never used.">
            <location file="scene/2d/visibility_notifier_2d.cpp" line="286"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Variant&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Variant&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;StringName&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;StringName&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Connection&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Connection&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::body_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::body_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/3d/area.h" line="77"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::area_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::area_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/3d/area.h" line="77"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AreaShapePair::area_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;AreaShapePair::area_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/3d/area.h" line="107"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AreaShapePair::self_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;AreaShapePair::self_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/3d/area.h" line="107"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: p_resolution &lt; 4 &amp;&amp; p_resolution &gt; 32." verbose="Logical conjunction always evaluates to false: p_resolution &lt; 4 &amp;&amp; p_resolution &gt; 32. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?">
            <location file="scene/3d/baked_light_instance.cpp" line="84"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::body_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::body_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/3d/physics_body.h" line="159"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::local_shape&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::local_shape&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/3d/physics_body.h" line="159"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::tagged&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::tagged&apos; is not initialized in the constructor." inconclusive="true">
            <location file="scene/3d/physics_body.h" line="159"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShapePair::tagged&apos; is not initialized in the constructor." verbose="Member variable &apos;ShapePair::tagged&apos; is not initialized in the constructor.">
            <location file="scene/3d/physics_body.h" line="160"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PhysicsBody&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PhysicsBody&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/3d/physics_body.h" line="46"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CollisionObject::area&apos; is not initialized in the constructor." verbose="Member variable &apos;CollisionObject::area&apos; is not initialized in the constructor.">
            <location file="scene/3d/collision_object.cpp" line="358"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::vars&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::vars&apos; is not initialized in the constructor.">
            <location file="scene/3d/light.cpp" line="586"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::bake_mode&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::bake_mode&apos; is not initialized in the constructor.">
            <location file="scene/3d/light.cpp" line="586"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::shadows&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::shadows&apos; is not initialized in the constructor.">
            <location file="scene/3d/light.cpp" line="586"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::enabled&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::enabled&apos; is not initialized in the constructor.">
            <location file="scene/3d/light.cpp" line="586"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::editor_only&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::editor_only&apos; is not initialized in the constructor.">
            <location file="scene/3d/light.cpp" line="586"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Light::op&apos; is not initialized in the constructor." verbose="Member variable &apos;Light::op&apos; is not initialized in the constructor.">
            <location file="scene/3d/light.cpp" line="586"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;a&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;a&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="scene/3d/navigation.h" line="35"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;b&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;b&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="scene/3d/navigation.h" line="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/3d/physics_body.cpp" line="315"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/3d/physics_body.cpp" line="331"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/3d/physics_body.cpp" line="333"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;safe&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;safe&apos; is reassigned a value before the old one has been used.">
            <location file="scene/3d/physics_body.cpp" line="1017"/>
            <location file="scene/3d/physics_body.cpp" line="1016"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: rest_info" verbose="Unused variable: rest_info">
            <location file="scene/3d/physics_body.cpp" line="1039"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ProximityGroup::cell_size&apos; is not initialized in the constructor." verbose="Member variable &apos;ProximityGroup::cell_size&apos; is not initialized in the constructor.">
            <location file="scene/3d/proximity_group.cpp" line="187"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SpriteBase3D::alpha_cut&apos; is not initialized in the constructor." verbose="Member variable &apos;SpriteBase3D::alpha_cut&apos; is not initialized in the constructor.">
            <location file="scene/3d/sprite_3d.cpp" line="286"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;rel_vel&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;rel_vel&apos; is reassigned a value before the old one has been used.">
            <location file="scene/3d/vehicle_body.cpp" line="583"/>
            <location file="scene/3d/vehicle_body.cpp" line="574"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;btVehicleJacobianEntry::getRelativeVelocity&apos; can be const." verbose="The member function &apos;btVehicleJacobianEntry::getRelativeVelocity&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="scene/3d/vehicle_body.cpp" line="42"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;from&apos; is assigned a value that is never used." verbose="Variable &apos;from&apos; is assigned a value that is never used.">
            <location file="scene/3d/visibility_notifier.cpp" line="224"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;mode&apos; is assigned a value that is never used." verbose="Variable &apos;mode&apos; is assigned a value that is never used.">
            <location file="scene/3d/visibility_notifier.cpp" line="248"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationPlayer::cache_update&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationPlayer::cache_update&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_player.cpp" line="1266"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationPlayer::cache_update_prop&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationPlayer::cache_update_prop&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_player.cpp" line="1266"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;NodeBase::type&apos; is not initialized in the constructor." verbose="Member variable &apos;NodeBase::type&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_tree_player.h" line="132"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationNode::time&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationNode::time&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_tree_player.h" line="159"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationNode::step&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationNode::step&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_tree_player.h" line="159"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OneShotNode::autorestart_random_delay&apos; is not initialized in the constructor." verbose="Member variable &apos;OneShotNode::autorestart_random_delay&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_tree_player.h" line="182"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OneShotNode::time&apos; is not initialized in the constructor." verbose="Member variable &apos;OneShotNode::time&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_tree_player.h" line="182"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;OneShotNode::remaining&apos; is not initialized in the constructor." verbose="Member variable &apos;OneShotNode::remaining&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_tree_player.h" line="182"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MixNode::amount&apos; is not initialized in the constructor." verbose="Member variable &apos;MixNode::amount&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_tree_player.h" line="188"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TransitionNode::time&apos; is not initialized in the constructor." verbose="Member variable &apos;TransitionNode::time&apos; is not initialized in the constructor.">
            <location file="scene/animation/animation_tree_player.h" line="244"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::sample_mix_rate&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::sample_mix_rate&apos; is not initialized in the constructor.">
            <location file="scene/audio/sample_player.cpp" line="175"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::filter_gain&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::filter_gain&apos; is not initialized in the constructor.">
            <location file="scene/audio/sample_player.cpp" line="175"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,DataType,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,DataType,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,DataType,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,DataType,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,DataType,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,Uniform,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,Uniform,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,Uniform,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,Uniform,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,Uniform,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;int,bool,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;int,bool,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;int,bool,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;int,bool,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;int,bool,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Bone&gt;::operator=&apos; should return &apos;Vector&lt;Bone&gt; &amp;&apos;." verbose="The Vector&lt;Bone&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Bone&gt; &amp;Vector&lt;Bone&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Argument&gt;::operator=&apos; should return &apos;Vector&lt;Argument&gt; &amp;&apos;." verbose="The Vector&lt;Argument&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Argument&gt; &amp;Vector&lt;Argument&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Function&gt;::operator=&apos; should return &apos;Vector&lt;Function&gt; &amp;&apos;." verbose="The Vector&lt;Function&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Function&gt; &amp;Vector&lt;Function&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Token&gt;::operator=&apos; should return &apos;Vector&lt;Token&gt; &amp;&apos;." verbose="The Vector&lt;Token&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Token&gt; &amp;Vector&lt;Token&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Surface&gt;::operator=&apos; should return &apos;Vector&lt;Surface&gt; &amp;&apos;." verbose="The Vector&lt;Surface&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Surface&gt; &amp;Vector&lt;Surface&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Spatial*,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Spatial*,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Spatial*,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Spatial*,DefaultAllocator&gt; &amp;List&lt;Spatial*,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Vertex,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Vertex,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Vertex,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Vertex,DefaultAllocator&gt; &amp;List&lt;Vertex,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;int,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;int,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;int,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;int,DefaultAllocator&gt; &amp;List&lt;int,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;text&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;text&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="servers/visual/shader_language.h" line="312"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;tokens&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;tokens&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="servers/visual/shader_language.h" line="351"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;skeleton&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;skeleton&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="scene/3d/skeleton.cpp" line="554"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,DataType,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,DataType,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,DataType,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,DataType,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,DataType,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,DataType,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Uniform,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Uniform,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Uniform,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Uniform,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Uniform,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Uniform,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,bool,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;int,bool,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,bool,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;int,bool,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,bool,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;int,bool,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Bone&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Bone&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Bone&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Bone&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Bone&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Bone&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Argument&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Argument&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Argument&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Argument&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Argument&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Argument&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Function&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Function&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Function&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Function&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Function&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Function&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Token&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Token&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Token&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Token&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Token&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Token&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Surface&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Surface&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Surface&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Surface&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Surface&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Surface&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Spatial*,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Spatial*,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Spatial*,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Spatial*,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Vertex,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Vertex,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Vertex,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Vertex,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;int,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;int,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;int,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;int,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Bone,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Bone,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Argument,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Argument,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Function,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Function,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Token,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Token,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Surface,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Surface,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stretch_max&apos; is assigned a value that is never used." verbose="Variable &apos;stretch_max&apos; is assigned a value that is never used.">
            <location file="scene/gui/box_container.cpp" line="93"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_identifier&apos; should be passed by reference." verbose="Parameter &apos;p_identifier&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="servers/visual/shader_language.h" line="397"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ButtonArray::align&apos; is not initialized in the constructor." verbose="Member variable &apos;ButtonArray::align&apos; is not initialized in the constructor.">
            <location file="scene/gui/button_array.cpp" line="497"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ButtonArray&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ButtonArray&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/gui/button_array.h" line="105"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CheckBox&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CheckBox&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/gui/check_box.h" line="50"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." inconclusive="true">
            <location file="scene/gui/control.cpp" line="2202"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Window::key_event_accepted&apos; is not initialized in the constructor." verbose="Member variable &apos;Window::key_event_accepted&apos; is not initialized in the constructor.">
            <location file="scene/gui/control.cpp" line="61"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Window::drag_attempted&apos; is not initialized in the constructor." verbose="Member variable &apos;Window::drag_attempted&apos; is not initialized in the constructor.">
            <location file="scene/gui/control.cpp" line="61"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Window::drag_preview&apos; is not initialized in the constructor." verbose="Member variable &apos;Window::drag_preview&apos; is not initialized in the constructor.">
            <location file="scene/gui/control.cpp" line="61"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Window::tooltip_timer&apos; is not initialized in the constructor." verbose="Member variable &apos;Window::tooltip_timer&apos; is not initialized in the constructor.">
            <location file="scene/gui/control.cpp" line="61"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ishidden&apos; can be reduced." verbose="The scope of the variable &apos;ishidden&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="scene/gui/file_dialog.cpp" line="282"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;GraphEditFilter&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;GraphEditFilter&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/gui/graph_edit.h" line="20"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;c&apos; is assigned a value that is never used." verbose="Variable &apos;c&apos; is assigned a value that is never used.">
            <location file="scene/gui/label.cpp" line="139"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;aux&apos; can be reduced." verbose="The scope of the variable &apos;aux&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="scene/gui/line_edit.cpp" line="712"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;w&apos; is assigned a value that is never used." verbose="Variable &apos;w&apos; is assigned a value that is never used.">
            <location file="scene/gui/margin_container.cpp" line="80"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MenuButton::clicked&apos; is not initialized in the constructor." verbose="Member variable &apos;MenuButton::clicked&apos; is not initialized in the constructor.">
            <location file="scene/gui/menu_button.cpp" line="136"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;fh&apos; is assigned a value that is never used." verbose="Variable &apos;fh&apos; is assigned a value that is never used.">
            <location file="scene/gui/progress_bar.cpp" line="64"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/gui/rich_text_label.cpp" line="652"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/gui/rich_text_label.cpp" line="655"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ScrollBar::last_drag_slave_time&apos; is not initialized in the constructor." verbose="Member variable &apos;ScrollBar::last_drag_slave_time&apos; is not initialized in the constructor.">
            <location file="scene/gui/scroll_bar.cpp" line="818"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ScrollBar::time_since_motion&apos; is not initialized in the constructor." verbose="Member variable &apos;ScrollBar::time_since_motion&apos; is not initialized in the constructor.">
            <location file="scene/gui/scroll_bar.cpp" line="818"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ScrollBar::click_handled&apos; is not initialized in the constructor." verbose="Member variable &apos;ScrollBar::click_handled&apos; is not initialized in the constructor.">
            <location file="scene/gui/scroll_bar.cpp" line="818"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Slider::ticks_on_borders&apos; is not initialized in the constructor." verbose="Member variable &apos;Slider::ticks_on_borders&apos; is not initialized in the constructor.">
            <location file="scene/gui/slider.cpp" line="243"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;_MinSizeCache::min_size&apos; is never used." verbose="struct or union member &apos;_MinSizeCache::min_size&apos; is never used.">
            <location file="scene/gui/split_container.cpp" line="38"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;_MinSizeCache::will_stretch&apos; is never used." verbose="struct or union member &apos;_MinSizeCache::will_stretch&apos; is never used.">
            <location file="scene/gui/split_container.cpp" line="39"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;_MinSizeCache::final_size&apos; is never used." verbose="struct or union member &apos;_MinSizeCache::final_size&apos; is never used.">
            <location file="scene/gui/split_container.cpp" line="40"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SplitContainer::drag_from&apos; is not initialized in the constructor." verbose="Member variable &apos;SplitContainer::drag_from&apos; is not initialized in the constructor.">
            <location file="scene/gui/split_container.cpp" line="444"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SplitContainer::drag_ofs&apos; is not initialized in the constructor." verbose="Member variable &apos;SplitContainer::drag_ofs&apos; is not initialized in the constructor.">
            <location file="scene/gui/split_container.cpp" line="444"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;va&apos; is assigned a value that is never used." verbose="Variable &apos;va&apos; is assigned a value that is never used.">
            <location file="scene/gui/tab_container.cpp" line="335"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TabContainer::last_tab_cache&apos; is not initialized in the constructor." verbose="Member variable &apos;TabContainer::last_tab_cache&apos; is not initialized in the constructor.">
            <location file="scene/gui/tab_container.cpp" line="752"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ofs&apos; is assigned a value that is never used." verbose="Variable &apos;ofs&apos; is assigned a value that is never used.">
            <location file="scene/gui/tabs.cpp" line="125"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;size&apos; is assigned a value that is never used." verbose="Variable &apos;size&apos; is assigned a value that is never used.">
            <location file="scene/gui/tabs.cpp" line="126"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;va&apos; is assigned a value that is never used." verbose="Variable &apos;va&apos; is assigned a value that is never used.">
            <location file="scene/gui/tabs.cpp" line="225"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: cri" verbose="Possible null pointer dereference: cri">
            <location file="scene/gui/text_edit.cpp" line="205"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;line&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;line&apos; is reassigned a value before the old one has been used.">
            <location file="scene/gui/text_edit.cpp" line="2973"/>
            <location file="scene/gui/text_edit.cpp" line="2970"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;to&apos; is used before limits check." verbose="Defensive programming: The variable &apos;to&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="scene/gui/text_edit.cpp" line="709"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference">
            <location file="scene/gui/text_edit.cpp" line="205"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;loops&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;loops&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="scene/gui/video_player.cpp" line="259"/>
            <location file="scene/gui/video_player.cpp" line="255"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!ti&apos; is redundant or there is possible null pointer dereference: ti." verbose="Either the condition &apos;!ti&apos; is redundant or there is possible null pointer dereference: ti.">
            <location file="scene/gui/tree.cpp" line="2549"/>
            <location file="scene/gui/tree.cpp" line="2548"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;selected_item&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;selected_item&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="scene/gui/tree.cpp" line="1284"/>
            <location file="scene/gui/tree.cpp" line="1282"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;selected_item&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;selected_item&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="scene/gui/tree.cpp" line="2666"/>
            <location file="scene/gui/tree.cpp" line="2663"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." inconclusive="true">
            <location file="scene/gui/tree.cpp" line="2011"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bring_up_value_editor&apos; can be reduced." verbose="The scope of the variable &apos;bring_up_value_editor&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="scene/gui/tree.cpp" line="1503"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;already_selected&apos; is assigned a value that is never used." verbose="Variable &apos;already_selected&apos; is assigned a value that is never used.">
            <location file="scene/gui/tree.cpp" line="1426"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bring_up_value_editor&apos; is assigned a value that is never used." verbose="Variable &apos;bring_up_value_editor&apos; is assigned a value that is never used.">
            <location file="scene/gui/tree.cpp" line="1586"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;handled&apos; is assigned a value that is never used." verbose="Variable &apos;handled&apos; is assigned a value that is never used.">
            <location file="scene/gui/tree.cpp" line="2195"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ofs&apos; is assigned a value that is never used." verbose="Variable &apos;ofs&apos; is assigned a value that is never used.">
            <location file="scene/gui/tree.cpp" line="2506"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TreeItem&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TreeItem&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/gui/tree.h" line="130"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;total&apos; can be reduced." verbose="The scope of the variable &apos;total&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="scene/io/resource_format_image.cpp" line="100"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;filesize&apos; is assigned a value that is never used." verbose="Variable &apos;filesize&apos; is assigned a value that is never used.">
            <location file="scene/io/resource_format_wav.cpp" line="60"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.">
            <location file="scene/main/node.cpp" line="624"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="scene/main/scene_main_loop.cpp" line="830"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;total_tt&apos; is assigned a value that is never used." verbose="Variable &apos;total_tt&apos; is assigned a value that is never used.">
            <location file="scene/resources/animation.cpp" line="1958"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;frac&apos; is assigned a value that is never used." verbose="Variable &apos;frac&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="50"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0n&apos; is assigned a value that is never used." verbose="Variable &apos;v0n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="61"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0n&apos; is assigned a value that is never used." verbose="Variable &apos;v0n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="73"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1n&apos; is assigned a value that is never used." verbose="Variable &apos;v1n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="74"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0n&apos; is assigned a value that is never used." verbose="Variable &apos;v0n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="93"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1n&apos; is assigned a value that is never used." verbose="Variable &apos;v1n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="94"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v2n&apos; is assigned a value that is never used." verbose="Variable &apos;v2n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="95"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v3n&apos; is assigned a value that is never used." verbose="Variable &apos;v3n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="96"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v0n&apos; is assigned a value that is never used." verbose="Variable &apos;v0n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="123"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v1n&apos; is assigned a value that is never used." verbose="Variable &apos;v1n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="124"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v2n&apos; is assigned a value that is never used." verbose="Variable &apos;v2n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="125"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v3n&apos; is assigned a value that is never used." verbose="Variable &apos;v3n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="126"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v4n&apos; is assigned a value that is never used." verbose="Variable &apos;v4n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="127"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;v5n&apos; is assigned a value that is never used." verbose="Variable &apos;v5n&apos; is assigned a value that is never used.">
            <location file="scene/resources/audio_stream_resampled.cpp" line="128"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;vs&apos; is assigned a value that is never used." verbose="Variable &apos;vs&apos; is assigned a value that is never used.">
            <location file="scene/resources/font.cpp" line="467"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamGibberish::rand_idx&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamGibberish::rand_idx&apos; is not initialized in the constructor.">
            <location file="scene/resources/gibberish_stream.cpp" line="322"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioStreamGibberish::playback&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioStreamGibberish::playback&apos; is not initialized in the constructor.">
            <location file="scene/resources/gibberish_stream.cpp" line="322"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;vcount&apos; can be reduced." verbose="The scope of the variable &apos;vcount&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="scene/resources/mesh.cpp" line="757"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tc&apos; is assigned a value that is never used." verbose="Variable &apos;tc&apos; is assigned a value that is never used.">
            <location file="scene/resources/mesh.cpp" line="853"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bitang&apos; can be reduced." verbose="The scope of the variable &apos;bitang&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="scene/resources/mikktspace.c" line="406"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;t&apos; can be reduced." verbose="The scope of the variable &apos;t&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="scene/resources/mikktspace.c" line="1560"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;iUniqueTspaces&apos; is assigned a value that is never used." verbose="Variable &apos;iUniqueTspaces&apos; is assigned a value that is never used.">
            <location file="scene/resources/mikktspace.c" line="1348"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;motion_tested&apos; can be reduced." verbose="The scope of the variable &apos;motion_tested&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="scene/main/viewport.cpp" line="367"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: last_object" verbose="Unused variable: last_object">
            <location file="scene/main/viewport.cpp" line="362"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: result" verbose="Unused variable: result">
            <location file="scene/main/viewport.cpp" line="364"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;motion_tested&apos; is assigned a value that is never used." verbose="Variable &apos;motion_tested&apos; is assigned a value that is never used.">
            <location file="scene/main/viewport.cpp" line="379"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ShaderGraph&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ShaderGraph&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="scene/resources/shader_graph.h" line="385"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;newx&apos; can be reduced." verbose="The scope of the variable &apos;newx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="scene/resources/shader_graph.cpp" line="1830"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;newy&apos; can be reduced." verbose="The scope of the variable &apos;newy&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="scene/resources/shader_graph.cpp" line="1830"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderGraph::shader&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderGraph::shader&apos; is not initialized in the constructor.">
            <location file="scene/resources/shader_graph.cpp" line="1236"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: n.order" verbose="Uninitialized struct member: n.order">
            <location file="scene/resources/shader_graph.cpp" line="90"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: n.sort_order" verbose="Uninitialized struct member: n.sort_order">
            <location file="scene/resources/shader_graph.cpp" line="90"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;SceneStringNames::free&apos;" verbose="Unused private function: &apos;SceneStringNames::free&apos;">
            <location file="scene/scene_string_names.h" line="42"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/audio/audio_driver_dummy.cpp" line="62"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::samples_in&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::samples_in&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_driver_dummy.cpp" line="135"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::buffer_size&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::buffer_size&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_driver_dummy.cpp" line="135"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::mix_rate&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::mix_rate&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_driver_dummy.cpp" line="135"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::channels&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::channels&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_driver_dummy.cpp" line="135"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::active&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::active&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_driver_dummy.cpp" line="135"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::thread_exited&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::thread_exited&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_driver_dummy.cpp" line="135"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::exit_thread&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::exit_thread&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_driver_dummy.cpp" line="135"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AudioDriverDummy::pcm_open&apos; is not initialized in the constructor." verbose="Member variable &apos;AudioDriverDummy::pcm_open&apos; is not initialized in the constructor.">
            <location file="servers/audio/audio_driver_dummy.cpp" line="135"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;alpha&apos; is assigned a value that is never used." verbose="Variable &apos;alpha&apos; is assigned a value that is never used.">
            <location file="servers/audio/audio_filter_sw.cpp" line="177"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;AudioFilterSW::get_response&apos; can be const." verbose="The member function &apos;AudioFilterSW::get_response&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/audio/audio_filter_sw.h" line="87"/>
            <location file="servers/audio/audio_filter_sw.cpp" line="214"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/audio/audio_server_sw.cpp" line="61"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/audio/audio_server_sw.cpp" line="767"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: signed_nibble" verbose="Unused variable: signed_nibble">
            <location file="servers/audio/audio_mixer_sw.cpp" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;AudioMixer::audio_mixer_chunk_call&apos; can be static." verbose="The member function &apos;AudioMixer::audio_mixer_chunk_call&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/audio_server.h" line="38"/>
            <location file="servers/audio_server.cpp" line="32"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;AreaSW::_queue_monitor_update&apos;" verbose="Unused private function: &apos;AreaSW::_queue_monitor_update&apos;">
            <location file="servers/physics/area_sw.h" line="109"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/body_pair_sw.cpp" line="51"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: a" verbose="Unused variable: a">
            <location file="servers/physics/body_pair_sw.cpp" line="197"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;collided&apos; is assigned a value that is never used." verbose="Variable &apos;collided&apos; is assigned a value that is never used.">
            <location file="servers/physics/body_pair_sw.cpp" line="332"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;gather_A&apos; is assigned a value that is never used." verbose="Variable &apos;gather_A&apos; is assigned a value that is never used.">
            <location file="servers/physics/body_pair_sw.cpp" line="302"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;gather_B&apos; is assigned a value that is never used." verbose="Variable &apos;gather_B&apos; is assigned a value that is never used.">
            <location file="servers/physics/body_pair_sw.cpp" line="303"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: contact.depth" verbose="Uninitialized struct member: contact.depth">
            <location file="servers/physics/body_pair_sw.cpp" line="130"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: contact.depth" verbose="Uninitialized struct member: contact.depth">
            <location file="servers/physics/body_pair_sw.cpp" line="136"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: contact.local_shape" verbose="Uninitialized struct member: contact.local_shape">
            <location file="servers/physics/body_pair_sw.cpp" line="130"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: contact.local_shape" verbose="Uninitialized struct member: contact.local_shape">
            <location file="servers/physics/body_pair_sw.cpp" line="136"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: contact.collider_shape" verbose="Uninitialized struct member: contact.collider_shape">
            <location file="servers/physics/body_pair_sw.cpp" line="130"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: contact.collider_shape" verbose="Uninitialized struct member: contact.collider_shape">
            <location file="servers/physics/body_pair_sw.cpp" line="136"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: contact.active" verbose="Uninitialized struct member: contact.active">
            <location file="servers/physics/body_pair_sw.cpp" line="130"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: contact.active" verbose="Uninitialized struct member: contact.active">
            <location file="servers/physics/body_pair_sw.cpp" line="136"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/broad_phase_octree.cpp" line="83"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/broad_phase_octree.cpp" line="93"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;pair_callback&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;pair_callback&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="servers/physics/broad_phase_octree.cpp" line="129"/>
            <location file="servers/physics/broad_phase_octree.cpp" line="127"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;vertex_count&apos; is assigned a value that is never used." verbose="Variable &apos;vertex_count&apos; is assigned a value that is never used.">
            <location file="servers/physics/collision_solver_sat.cpp" line="1233"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/collision_solver_sw.cpp" line="127"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/collision_solver_sw.cpp" line="256"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;valid&apos; can be reduced." verbose="The scope of the variable &apos;valid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="servers/physics/gjk_epa.cpp" line="588"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GJK::m_simplices&apos; is not initialized in the constructor." verbose="Member variable &apos;GJK::m_simplices&apos; is not initialized in the constructor.">
            <location file="servers/physics/gjk_epa.cpp" line="119"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GJK::m_free&apos; is not initialized in the constructor." verbose="Member variable &apos;GJK::m_free&apos; is not initialized in the constructor.">
            <location file="servers/physics/gjk_epa.cpp" line="119"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GJK::m_simplex&apos; is not initialized in the constructor." verbose="Member variable &apos;GJK::m_simplex&apos; is not initialized in the constructor.">
            <location file="servers/physics/gjk_epa.cpp" line="119"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EPA::m_result&apos; is not initialized in the constructor." verbose="Member variable &apos;EPA::m_result&apos; is not initialized in the constructor.">
            <location file="servers/physics/gjk_epa.cpp" line="502"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EPA::m_fc_store&apos; is not initialized in the constructor." verbose="Member variable &apos;EPA::m_fc_store&apos; is not initialized in the constructor.">
            <location file="servers/physics/gjk_epa.cpp" line="502"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;.">
            <location file="servers/physics/gjk_epa.cpp" line="426"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;.">
            <location file="servers/physics/gjk_epa.cpp" line="427"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;.">
            <location file="servers/physics/gjk_epa.cpp" line="428"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;JacobianEntrySW::getRelativeVelocity&apos; can be const." verbose="The member function &apos;JacobianEntrySW::getRelativeVelocity&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/jacobian_entry_sw.h" line="122"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;ConeTwistJointSW::getSolveTwistLimit&apos; can be const." verbose="The member function &apos;ConeTwistJointSW::getSolveTwistLimit&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/cone_twist_joint_sw.h" line="102"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;ConeTwistJointSW::getSolveSwingLimit&apos; can be const." verbose="The member function &apos;ConeTwistJointSW::getSolveSwingLimit&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/cone_twist_joint_sw.h" line="107"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;ConeTwistJointSW::getTwistLimitSign&apos; can be const." verbose="The member function &apos;ConeTwistJointSW::getTwistLimitSign&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/cone_twist_joint_sw.h" line="112"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;G6DOFRotationalLimitMotorSW::m_maxLimitForce&apos; is not initialized in the constructor." verbose="Member variable &apos;G6DOFRotationalLimitMotorSW::m_maxLimitForce&apos; is not initialized in the constructor." inconclusive="true">
            <location file="servers/physics/joints/generic_6dof_joint_sw.h" line="76"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;G6DOFRotationalLimitMotorSW::m_damping&apos; is not initialized in the constructor." verbose="Member variable &apos;G6DOFRotationalLimitMotorSW::m_damping&apos; is not initialized in the constructor." inconclusive="true">
            <location file="servers/physics/joints/generic_6dof_joint_sw.h" line="76"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;G6DOFRotationalLimitMotorSW::m_enableLimit&apos; is not initialized in the constructor." verbose="Member variable &apos;G6DOFRotationalLimitMotorSW::m_enableLimit&apos; is not initialized in the constructor.">
            <location file="servers/physics/joints/generic_6dof_joint_sw.h" line="76"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;G6DOFRotationalLimitMotorSW::m_accumulatedImpulse&apos; is not initialized in the constructor." verbose="Member variable &apos;G6DOFRotationalLimitMotorSW::m_accumulatedImpulse&apos; is not initialized in the constructor." inconclusive="true">
            <location file="servers/physics/joints/generic_6dof_joint_sw.h" line="76"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;G6DOFTranslationalLimitMotorSW::enable_limit&apos; is not initialized in the constructor." verbose="Member variable &apos;G6DOFTranslationalLimitMotorSW::enable_limit&apos; is not initialized in the constructor.">
            <location file="servers/physics/joints/generic_6dof_joint_sw.h" line="149"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;G6DOFRotationalLimitMotorSW::isLimited&apos; can be const." verbose="The member function &apos;G6DOFRotationalLimitMotorSW::isLimited&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/generic_6dof_joint_sw.h" line="93"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;G6DOFRotationalLimitMotorSW::needApplyTorques&apos; can be const." verbose="The member function &apos;G6DOFRotationalLimitMotorSW::needApplyTorques&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/generic_6dof_joint_sw.h" line="100"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;G6DOFTranslationalLimitMotorSW::isLimited&apos; can be const." verbose="The member function &apos;G6DOFTranslationalLimitMotorSW::isLimited&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/generic_6dof_joint_sw.h" line="167"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Generic6DOFJointSW::updateRHS&apos; can be static." verbose="The member function &apos;Generic6DOFJointSW::updateRHS&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics/joints/generic_6dof_joint_sw.h" line="319"/>
            <location file="servers/physics/joints/generic_6dof_joint_sw.cpp" line="463"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PinJointSW::get_pos_A&apos; can be const." verbose="The member function &apos;PinJointSW::get_pos_A&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/pin_joint_sw.h" line="58"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PinJointSW::get_pos_B&apos; can be const." verbose="The member function &apos;PinJointSW::get_pos_B&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/pin_joint_sw.h" line="59"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getLowerLinLimit&apos; can be const." verbose="The member function &apos;SliderJointSW::getLowerLinLimit&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="135"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getUpperLinLimit&apos; can be const." verbose="The member function &apos;SliderJointSW::getUpperLinLimit&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="137"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getLowerAngLimit&apos; can be const." verbose="The member function &apos;SliderJointSW::getLowerAngLimit&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="139"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getUpperAngLimit&apos; can be const." verbose="The member function &apos;SliderJointSW::getUpperAngLimit&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="141"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getSoftnessDirLin&apos; can be const." verbose="The member function &apos;SliderJointSW::getSoftnessDirLin&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="144"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getRestitutionDirLin&apos; can be const." verbose="The member function &apos;SliderJointSW::getRestitutionDirLin&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="145"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getDampingDirLin&apos; can be const." verbose="The member function &apos;SliderJointSW::getDampingDirLin&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="146"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getSoftnessDirAng&apos; can be const." verbose="The member function &apos;SliderJointSW::getSoftnessDirAng&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="147"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getRestitutionDirAng&apos; can be const." verbose="The member function &apos;SliderJointSW::getRestitutionDirAng&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="148"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getDampingDirAng&apos; can be const." verbose="The member function &apos;SliderJointSW::getDampingDirAng&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="149"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getSoftnessLimLin&apos; can be const." verbose="The member function &apos;SliderJointSW::getSoftnessLimLin&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getRestitutionLimLin&apos; can be const." verbose="The member function &apos;SliderJointSW::getRestitutionLimLin&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="151"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getDampingLimLin&apos; can be const." verbose="The member function &apos;SliderJointSW::getDampingLimLin&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="152"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getSoftnessLimAng&apos; can be const." verbose="The member function &apos;SliderJointSW::getSoftnessLimAng&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="153"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getRestitutionLimAng&apos; can be const." verbose="The member function &apos;SliderJointSW::getRestitutionLimAng&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="154"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getDampingLimAng&apos; can be const." verbose="The member function &apos;SliderJointSW::getDampingLimAng&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getSoftnessOrthoLin&apos; can be const." verbose="The member function &apos;SliderJointSW::getSoftnessOrthoLin&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="156"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getRestitutionOrthoLin&apos; can be const." verbose="The member function &apos;SliderJointSW::getRestitutionOrthoLin&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="157"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getDampingOrthoLin&apos; can be const." verbose="The member function &apos;SliderJointSW::getDampingOrthoLin&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getSoftnessOrthoAng&apos; can be const." verbose="The member function &apos;SliderJointSW::getSoftnessOrthoAng&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="159"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getRestitutionOrthoAng&apos; can be const." verbose="The member function &apos;SliderJointSW::getRestitutionOrthoAng&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="160"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getDampingOrthoAng&apos; can be const." verbose="The member function &apos;SliderJointSW::getDampingOrthoAng&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="161"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getPoweredLinMotor&apos; can be const." verbose="The member function &apos;SliderJointSW::getPoweredLinMotor&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="181"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getTargetLinMotorVelocity&apos; can be const." verbose="The member function &apos;SliderJointSW::getTargetLinMotorVelocity&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="183"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getMaxLinMotorForce&apos; can be const." verbose="The member function &apos;SliderJointSW::getMaxLinMotorForce&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="185"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getPoweredAngMotor&apos; can be const." verbose="The member function &apos;SliderJointSW::getPoweredAngMotor&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="187"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getTargetAngMotorVelocity&apos; can be const." verbose="The member function &apos;SliderJointSW::getTargetAngMotorVelocity&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="189"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getMaxAngMotorForce&apos; can be const." verbose="The member function &apos;SliderJointSW::getMaxAngMotorForce&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="191"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getLinearPos&apos; can be const." verbose="The member function &apos;SliderJointSW::getLinearPos&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="192"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getSolveLinLimit&apos; can be const." verbose="The member function &apos;SliderJointSW::getSolveLinLimit&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="195"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getLinDepth&apos; can be const." verbose="The member function &apos;SliderJointSW::getLinDepth&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="196"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getSolveAngLimit&apos; can be const." verbose="The member function &apos;SliderJointSW::getSolveAngLimit&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="197"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getAngDepth&apos; can be const." verbose="The member function &apos;SliderJointSW::getAngDepth&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="198"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;SliderJointSW::getAncorInB&apos; can be const." verbose="The member function &apos;SliderJointSW::getAncorInB&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="servers/physics/joints/slider_joint_sw.h" line="205"/>
            <location file="servers/physics/joints/slider_joint_sw.cpp" line="368"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/physics_server_sw.cpp" line="1373"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/physics_server_sw.cpp" line="1435"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/physics_server_sw.cpp" line="1455"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/physics_server_sw.cpp" line="1495"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PhysicsServerSW::iterations&apos; is not initialized in the constructor." verbose="Member variable &apos;PhysicsServerSW::iterations&apos; is not initialized in the constructor.">
            <location file="servers/physics/physics_server_sw.cpp" line="1530"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PhysicsServerSW::doing_sync&apos; is not initialized in the constructor." verbose="Member variable &apos;PhysicsServerSW::doing_sync&apos; is not initialized in the constructor.">
            <location file="servers/physics/physics_server_sw.cpp" line="1530"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PhysicsServerSW::stepper&apos; is not initialized in the constructor." verbose="Member variable &apos;PhysicsServerSW::stepper&apos; is not initialized in the constructor.">
            <location file="servers/physics/physics_server_sw.cpp" line="1530"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PhysicsServerSW::direct_state&apos; is not initialized in the constructor." verbose="Member variable &apos;PhysicsServerSW::direct_state&apos; is not initialized in the constructor.">
            <location file="servers/physics/physics_server_sw.cpp" line="1530"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/shape_sw.cpp" line="42"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." inconclusive="true">
            <location file="servers/physics/shape_sw.cpp" line="472"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;min_d&apos; is assigned a value that is never used." verbose="Variable &apos;min_d&apos; is assigned a value that is never used.">
            <location file="servers/physics/shape_sw.cpp" line="572"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;vc&apos; is assigned a value that is never used." verbose="Variable &apos;vc&apos; is assigned a value that is never used.">
            <location file="servers/physics/shape_sw.cpp" line="769"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/space_sw.cpp" line="396"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/space_sw.cpp" line="500"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/space_sw.cpp" line="521"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/space_sw.cpp" line="533"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/space_sw.cpp" line="535"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;collided&apos; is assigned a value that is never used." verbose="Variable &apos;collided&apos; is assigned a value that is never used.">
            <location file="servers/physics/space_sw.cpp" line="153"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cc&apos; is assigned a value that is never used." verbose="Variable &apos;cc&apos; is assigned a value that is never used.">
            <location file="servers/physics/space_sw.cpp" line="338"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics/step_sw.cpp" line="40"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;process&apos; is assigned a value that is never used." verbose="Variable &apos;process&apos; is assigned a value that is never used.">
            <location file="servers/physics/step_sw.cpp" line="63"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;StepSW::_setup_island&apos; can be static." verbose="The member function &apos;StepSW::_setup_island&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics/step_sw.h" line="39"/>
            <location file="servers/physics/step_sw.cpp" line="59"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;StepSW::_solve_island&apos; can be static." verbose="The member function &apos;StepSW::_solve_island&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics/step_sw.h" line="40"/>
            <location file="servers/physics/step_sw.cpp" line="69"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;StepSW::_check_suspend&apos; can be static." verbose="The member function &apos;StepSW::_check_suspend&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics/step_sw.h" line="41"/>
            <location file="servers/physics/step_sw.cpp" line="108"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;Area2DSW::_queue_monitor_update&apos;" verbose="Unused private function: &apos;Area2DSW::_queue_monitor_update&apos;">
            <location file="servers/physics_2d/area_2d_sw.h" line="108"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/body_pair_2d_sw.cpp" line="39"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BroadPhase2DHashGrid::pair_userdata&apos; is not initialized in the constructor." verbose="Member variable &apos;BroadPhase2DHashGrid::pair_userdata&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/broad_phase_2d_hash_grid.cpp" line="577"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BroadPhase2DHashGrid::unpair_userdata&apos; is not initialized in the constructor." verbose="Member variable &apos;BroadPhase2DHashGrid::unpair_userdata&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/broad_phase_2d_hash_grid.cpp" line="577"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;BroadPhase2DHashGrid::_pair_attempt&apos; can be static." verbose="The member function &apos;BroadPhase2DHashGrid::_pair_attempt&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d/broad_phase_2d_hash_grid.h" line="160"/>
            <location file="servers/physics_2d/broad_phase_2d_hash_grid.cpp" line="32"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/collision_solver_2d_sw.cpp" line="169"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,SegmentShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,SegmentShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,SegmentShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,SegmentShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,CircleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,CircleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,CircleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,CircleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;SegmentShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,CircleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,CircleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,CircleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,CircleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CircleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,RectangleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;RectangleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CapsuleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CapsuleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CapsuleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CapsuleShape2DSW,CapsuleShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CapsuleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CapsuleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;CapsuleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;CapsuleShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;ConvexPolygonShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;ConvexPolygonShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_count&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SeparatorAxisTest2D&lt;ConvexPolygonShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor." verbose="Member variable &apos;SeparatorAxisTest2D&lt;ConvexPolygonShape2DSW,ConvexPolygonShape2DSW,castA,castB,withMargin&gt;::best_axis_index&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/collision_solver_2d_sat.cpp" line="546"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;_b&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;_b&apos; is reassigned a value before the old one has been used.">
            <location file="servers/physics_2d/joints_2d_sw.cpp" line="404"/>
            <location file="servers/physics_2d/joints_2d_sw.cpp" line="403"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/physics_2d_server_sw.cpp" line="136"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/physics_2d_server_sw.cpp" line="1168"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/physics_2d_server_sw.cpp" line="1222"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/physics_2d_server_sw.cpp" line="1242"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Physics2DServerWrapMT::exit&apos; is not initialized in the constructor." verbose="Member variable &apos;Physics2DServerWrapMT::exit&apos; is not initialized in the constructor.">
            <location file="servers/physics_2d/physics_2d_server_wrap_mt.cpp" line="133"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/shape_2d_sw.cpp" line="39"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d&apos; is assigned a value that is never used." verbose="Variable &apos;d&apos; is assigned a value that is never used.">
            <location file="servers/physics_2d/shape_2d_sw.cpp" line="535"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pos&apos; is assigned a value that is never used." verbose="Variable &apos;pos&apos; is assigned a value that is never used.">
            <location file="servers/physics_2d/shape_2d_sw.cpp" line="828"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pos&apos; is assigned a value that is never used." verbose="Variable &apos;pos&apos; is assigned a value that is never used.">
            <location file="servers/physics_2d/shape_2d_sw.cpp" line="1087"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/step_2d_sw.cpp" line="40"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;process&apos; is assigned a value that is never used." verbose="Variable &apos;process&apos; is assigned a value that is never used.">
            <location file="servers/physics_2d/step_2d_sw.cpp" line="63"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="445"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1092"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1114"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1125"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1127"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." inconclusive="true">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="1074"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Step2DSW::_setup_island&apos; can be static." verbose="The member function &apos;Step2DSW::_setup_island&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d/step_2d_sw.h" line="39"/>
            <location file="servers/physics_2d/step_2d_sw.cpp" line="59"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Step2DSW::_solve_island&apos; can be static." verbose="The member function &apos;Step2DSW::_solve_island&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d/step_2d_sw.h" line="40"/>
            <location file="servers/physics_2d/step_2d_sw.cpp" line="69"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Step2DSW::_check_suspend&apos; can be static." verbose="The member function &apos;Step2DSW::_check_suspend&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="servers/physics_2d/step_2d_sw.h" line="41"/>
            <location file="servers/physics_2d/step_2d_sw.cpp" line="82"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;collided&apos; is assigned a value that is never used." verbose="Variable &apos;collided&apos; is assigned a value that is never used.">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="203"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cc&apos; is assigned a value that is never used." verbose="Variable &apos;cc&apos; is assigned a value that is never used.">
            <location file="servers/physics_2d/space_2d_sw.cpp" line="380"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pscale&apos; can be reduced." verbose="The scope of the variable &apos;pscale&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="897"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;pscale&apos; is assigned a value that is never used." verbose="Variable &apos;pscale&apos; is assigned a value that is never used.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="939"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SpatialSoundServerSW::internal_audio_stream&apos; is not initialized in the constructor." verbose="Member variable &apos;SpatialSoundServerSW::internal_audio_stream&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="1052"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SpatialSoundServerSW::internal_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;SpatialSoundServerSW::internal_buffer&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="1052"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SpatialSoundServerSW::internal_buffer_channels&apos; is not initialized in the constructor." verbose="Member variable &apos;SpatialSoundServerSW::internal_buffer_channels&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="1052"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SpatialSoundServerSW::cull_rooms&apos; is not initialized in the constructor." verbose="Member variable &apos;SpatialSoundServerSW::cull_rooms&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="1052"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::sample_mix_rate&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::sample_mix_rate&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="87"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max_level&apos; is assigned a value that is never used." verbose="Variable &apos;max_level&apos; is assigned a value that is never used.">
            <location file="servers/spatial_sound_2d/spatial_sound_2d_server_sw.cpp" line="854"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::last_volume&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::last_volume&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="87"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::last_filter_gain&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::last_filter_gain&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="87"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::last_filter_cutoff&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::last_filter_cutoff&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="87"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::last_mix_rate&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::last_mix_rate&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="87"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::last_reverb_send&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::last_reverb_send&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound/spatial_sound_server_sw.cpp" line="87"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SpatialSound2DServerSW::internal_audio_stream&apos; is not initialized in the constructor." verbose="Member variable &apos;SpatialSound2DServerSW::internal_audio_stream&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound_2d/spatial_sound_2d_server_sw.cpp" line="1057"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SpatialSound2DServerSW::internal_buffer&apos; is not initialized in the constructor." verbose="Member variable &apos;SpatialSound2DServerSW::internal_buffer&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound_2d/spatial_sound_2d_server_sw.cpp" line="1057"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SpatialSound2DServerSW::internal_buffer_channels&apos; is not initialized in the constructor." verbose="Member variable &apos;SpatialSound2DServerSW::internal_buffer_channels&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound_2d/spatial_sound_2d_server_sw.cpp" line="1057"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::sample_mix_rate&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::sample_mix_rate&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound_2d/spatial_sound_2d_server_sw.cpp" line="101"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::last_volume&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::last_volume&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound_2d/spatial_sound_2d_server_sw.cpp" line="101"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::last_filter_gain&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::last_filter_gain&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound_2d/spatial_sound_2d_server_sw.cpp" line="101"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::last_filter_cutoff&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::last_filter_cutoff&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound_2d/spatial_sound_2d_server_sw.cpp" line="101"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::last_mix_rate&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::last_mix_rate&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound_2d/spatial_sound_2d_server_sw.cpp" line="101"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Voice::last_reverb_send&apos; is not initialized in the constructor." verbose="Member variable &apos;Voice::last_reverb_send&apos; is not initialized in the constructor.">
            <location file="servers/spatial_sound_2d/spatial_sound_2d_server_sw.cpp" line="101"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ParticleSystemSW::sort&apos; is not initialized in the constructor." verbose="Member variable &apos;ParticleSystemSW::sort&apos; is not initialized in the constructor.">
            <location file="servers/visual/particle_system_sw.cpp" line="33"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ParticleSystemSW::attractors&apos; is not initialized in the constructor." verbose="Member variable &apos;ParticleSystemSW::attractors&apos; is not initialized in the constructor.">
            <location file="servers/visual/particle_system_sw.cpp" line="33"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tf&apos; is assigned a value that is never used." verbose="Variable &apos;tf&apos; is assigned a value that is never used.">
            <location file="servers/visual/rasterizer.cpp" line="293"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/shader_language.cpp" line="605"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/shader_language.cpp" line="610"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/shader_language.cpp" line="627"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/shader_language.cpp" line="663"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/shader_language.cpp" line="757"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/shader_language.cpp" line="1343"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/shader_language.cpp" line="1350"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/shader_language.cpp" line="1671"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/shader_language.cpp" line="1682"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/shader_language.cpp" line="1698"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/shader_language.cpp" line="2381"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tf&apos; is assigned a value that is never used." verbose="Variable &apos;tf&apos; is assigned a value that is never used.">
            <location file="servers/visual/shader_language.cpp" line="2607"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tf&apos; is assigned a value that is never used." verbose="Variable &apos;tf&apos; is assigned a value that is never used.">
            <location file="servers/visual/shader_language.cpp" line="2633"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;RasterizerDummy::particle_draw_info&apos; is not initialized in the constructor." verbose="Member variable &apos;RasterizerDummy::particle_draw_info&apos; is not initialized in the constructor.">
            <location file="servers/visual/rasterizer_dummy.cpp" line="1952"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;s&apos; is assigned a value that is never used." verbose="Variable &apos;s&apos; is assigned a value that is never used.">
            <location file="servers/visual_server.cpp" line="755"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerWrapMT::exit&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerWrapMT::exit&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_wrap_mt.cpp" line="185"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical conjunction always evaluates to false: p_resolution &lt; 4 &amp;&amp; p_resolution &gt; 64." verbose="Logical conjunction always evaluates to false: p_resolution &lt; 4 &amp;&amp; p_resolution &gt; 64. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?">
            <location file="servers/visual/visual_server_raster.cpp" line="1370"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!occluder_poly&apos; is redundant or there is possible null pointer dereference: occluder_poly." verbose="Either the condition &apos;!occluder_poly&apos; is redundant or there is possible null pointer dereference: occluder_poly.">
            <location file="servers/visual/visual_server_raster.cpp" line="4142"/>
            <location file="servers/visual/visual_server_raster.cpp" line="4145"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!occluder_poly&apos; is redundant or there is possible null pointer dereference: occluder_poly." verbose="Either the condition &apos;!occluder_poly&apos; is redundant or there is possible null pointer dereference: occluder_poly.">
            <location file="servers/visual/visual_server_raster.cpp" line="4142"/>
            <location file="servers/visual/visual_server_raster.cpp" line="4146"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!occluder_poly&apos; is redundant or there is possible null pointer dereference: occluder_poly." verbose="Either the condition &apos;!occluder_poly&apos; is redundant or there is possible null pointer dereference: occluder_poly.">
            <location file="servers/visual/visual_server_raster.cpp" line="4142"/>
            <location file="servers/visual/visual_server_raster.cpp" line="4147"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!occluder_poly&apos; is redundant or there is possible null pointer dereference: occluder_poly." verbose="Either the condition &apos;!occluder_poly&apos; is redundant or there is possible null pointer dereference: occluder_poly.">
            <location file="servers/visual/visual_server_raster.cpp" line="4142"/>
            <location file="servers/visual/visual_server_raster.cpp" line="4148"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/visual_server_raster.cpp" line="1635"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/visual_server_raster.cpp" line="5732"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/visual_server_raster.cpp" line="5789"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/visual_server_raster.cpp" line="6751"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/visual_server_raster.cpp" line="6752"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/visual_server_raster.cpp" line="6841"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="servers/visual/visual_server_raster.cpp" line="6877"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;is16&apos; can be reduced." verbose="The scope of the variable &apos;is16&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="servers/visual/visual_server_raster.cpp" line="1124"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;morphs&apos; can be reduced." verbose="The scope of the variable &apos;morphs&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="servers/visual/visual_server_raster.cpp" line="4703"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;z_max_cam&apos; can be reduced." verbose="The scope of the variable &apos;z_max_cam&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="servers/visual/visual_server_raster.cpp" line="4901"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;is16&apos; is assigned a value that is never used." verbose="Variable &apos;is16&apos; is assigned a value that is never used.">
            <location file="servers/visual/visual_server_raster.cpp" line="1132"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ss&apos; is assigned a value that is never used." verbose="Variable &apos;ss&apos; is assigned a value that is never used.">
            <location file="servers/visual/visual_server_raster.cpp" line="2508"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;morphs&apos; is assigned a value that is never used." verbose="Variable &apos;morphs&apos; is assigned a value that is never used.">
            <location file="servers/visual/visual_server_raster.cpp" line="4705"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;z_max_cam&apos; is assigned a value that is never used." verbose="Variable &apos;z_max_cam&apos; is assigned a value that is never used.">
            <location file="servers/visual/visual_server_raster.cpp" line="4965"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;viewdot&apos; is assigned a value that is never used." verbose="Variable &apos;viewdot&apos; is assigned a value that is never used.">
            <location file="servers/visual/visual_server_raster.cpp" line="5087"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: max_d" verbose="Unused variable: max_d">
            <location file="servers/visual/visual_server_raster.cpp" line="5214"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: min_d" verbose="Unused variable: min_d">
            <location file="servers/visual/visual_server_raster.cpp" line="5214"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;t&apos; is assigned a value that is never used." verbose="Variable &apos;t&apos; is assigned a value that is never used.">
            <location file="servers/visual/visual_server_raster.cpp" line="6324"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;scenario_draw_canvas_bg&apos; is assigned a value that is never used." verbose="Variable &apos;scenario_draw_canvas_bg&apos; is assigned a value that is never used.">
            <location file="servers/visual/visual_server_raster.cpp" line="7180"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;channel&apos; is assigned a value that is never used." verbose="Variable &apos;channel&apos; is assigned a value that is never used.">
            <location file="tools/collada/collada.cpp" line="666"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;channel&apos; is assigned a value that is never used." verbose="Variable &apos;channel&apos; is assigned a value that is never used.">
            <location file="tools/collada/collada.cpp" line="741"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sk&apos; is assigned a value that is never used." verbose="Variable &apos;sk&apos; is assigned a value that is never used.">
            <location file="tools/collada/collada.cpp" line="2609"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SkinControllerData::weights&apos; is not initialized in the constructor." verbose="Member variable &apos;SkinControllerData::weights&apos; is not initialized in the constructor.">
            <location file="tools/collada/collada.h" line="272"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;NodeGeometry::controller&apos; is not initialized in the constructor." verbose="Member variable &apos;NodeGeometry::controller&apos; is not initialized in the constructor.">
            <location file="tools/collada/collada.h" line="452"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Key::time&apos; is not initialized in the constructor." verbose="Member variable &apos;Key::time&apos; is not initialized in the constructor.">
            <location file="tools/collada/collada.h" line="515"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;State::z_up&apos; is not initialized in the constructor." verbose="Member variable &apos;State::z_up&apos; is not initialized in the constructor.">
            <location file="tools/collada/collada.h" line="587"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Collada::get_root_transform&apos; can be static." verbose="The member function &apos;Collada::get_root_transform&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="tools/collada/collada.h" line="597"/>
            <location file="tools/collada/collada.cpp" line="55"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Collada::_read_transform&apos; can be static." verbose="The member function &apos;Collada::_read_transform&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="tools/collada/collada.h" line="637"/>
            <location file="tools/collada/collada.cpp" line="461"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Collada::Effect::get_texture_path&apos; can be static." verbose="The member function &apos;Collada::Effect::get_texture_path&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="tools/collada/collada.h" line="79"/>
            <location file="tools/collada/collada.cpp" line="48"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::instance_cull_result&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::instance_cull_result&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::instance_shadow_cull_result&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::instance_shadow_cull_result&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::light_cull_result&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::light_cull_result&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::light_cull_count&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::light_cull_count&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::exterior_portal_cull_result&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::exterior_portal_cull_result&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::exterior_portal_cull_count&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::exterior_portal_cull_count&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::exterior_visited&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::exterior_visited&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::light_sampler_cull_result&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::light_sampler_cull_result&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::light_samplers_culled&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::light_samplers_culled&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::room_cull_result&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::room_cull_result&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::room_cull_count&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::room_cull_count&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::room_cull_enabled&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::room_cull_enabled&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::light_discard_enabled&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::light_discard_enabled&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::shadows_enabled&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::shadows_enabled&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::black_margin&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::black_margin&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;VisualServerRaster::changes&apos; is not initialized in the constructor." verbose="Member variable &apos;VisualServerRaster::changes&apos; is not initialized in the constructor.">
            <location file="servers/visual/visual_server_raster.cpp" line="7547"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;w&apos; should be passed by reference." verbose="Parameter &apos;w&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="tools/collada/collada.h" line="309"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GotoLineDialog::line_label&apos; is not initialized in the constructor." verbose="Member variable &apos;GotoLineDialog::line_label&apos; is not initialized in the constructor.">
            <location file="tools/editor/code_editor.cpp" line="59"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;timecolor&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;timecolor&apos; is reassigned a value before the old one has been used.">
            <location file="tools/editor/animation_editor.cpp" line="1030"/>
            <location file="tools/editor/animation_editor.cpp" line="1029"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." inconclusive="true">
            <location file="tools/editor/animation_editor.cpp" line="445"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;max_draw&apos; is assigned a value that is never used." verbose="Variable &apos;max_draw&apos; is assigned a value that is never used.">
            <location file="tools/editor/animation_editor.cpp" line="86"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;empty&apos; is assigned a value that is never used." verbose="Variable &apos;empty&apos; is assigned a value that is never used.">
            <location file="tools/editor/animation_editor.cpp" line="2799"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;AnimationKeyEdit::undo_redo&apos; is not initialized in the constructor." verbose="Member variable &apos;AnimationKeyEdit::undo_redo&apos; is not initialized in the constructor.">
            <location file="tools/editor/animation_editor.cpp" line="625"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/console.cpp" line="72"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/console.cpp" line="91"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="tools/editor/console.cpp" line="72"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;margin&apos; is assigned a value that is never used." verbose="Variable &apos;margin&apos; is assigned a value that is never used.">
            <location file="tools/editor/connections_dialog.cpp" line="287"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;button_margin&apos; is assigned a value that is never used." verbose="Variable &apos;button_margin&apos; is assigned a value that is never used.">
            <location file="tools/editor/connections_dialog.cpp" line="288"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ss&apos; is assigned a value that is never used." verbose="Variable &apos;ss&apos; is assigned a value that is never used.">
            <location file="tools/editor/dependency_editor.cpp" line="55"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;root&apos; is assigned a value that is never used." verbose="Variable &apos;root&apos; is assigned a value that is never used.">
            <location file="tools/editor/dependency_editor.cpp" line="395"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;DependencyRemoveDialog::exist&apos; is not initialized in the constructor." verbose="Member variable &apos;DependencyRemoveDialog::exist&apos; is not initialized in the constructor.">
            <location file="tools/editor/dependency_editor.cpp" line="427"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;p&apos; is redundant or there is possible null pointer dereference: p." verbose="Either the condition &apos;p&apos; is redundant or there is possible null pointer dereference: p." inconclusive="true">
            <location file="tools/editor/editor_dir_dialog.cpp" line="132"/>
            <location file="tools/editor/editor_dir_dialog.cpp" line="140"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ishidden&apos; can be reduced." verbose="The scope of the variable &apos;ishidden&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/editor_dir_dialog.cpp" line="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ishidden&apos; can be reduced." verbose="The scope of the variable &apos;ishidden&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/editor_file_dialog.cpp" line="442"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/editor_file_system.cpp" line="512"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/editor_file_system.cpp" line="620"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dc&apos; can be reduced." verbose="The scope of the variable &apos;dc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/editor_file_system.cpp" line="365"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EditorFileSystem::total&apos; is not initialized in the constructor." verbose="Member variable &apos;EditorFileSystem::total&apos; is not initialized in the constructor.">
            <location file="tools/editor/editor_file_system.cpp" line="1123"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EditorFileSystem::abort_scan&apos; is not initialized in the constructor." verbose="Member variable &apos;EditorFileSystem::abort_scan&apos; is not initialized in the constructor.">
            <location file="tools/editor/editor_file_system.cpp" line="1123"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EditorFileSystem::md_count&apos; is not initialized in the constructor." verbose="Member variable &apos;EditorFileSystem::md_count&apos; is not initialized in the constructor.">
            <location file="tools/editor/editor_file_system.cpp" line="1123"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EditorFileSystem::scanning_sources_done&apos; is not initialized in the constructor." verbose="Member variable &apos;EditorFileSystem::scanning_sources_done&apos; is not initialized in the constructor.">
            <location file="tools/editor/editor_file_system.cpp" line="1123"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;EditorFileSystem::ss_amount&apos; is not initialized in the constructor." verbose="Member variable &apos;EditorFileSystem::ss_amount&apos; is not initialized in the constructor.">
            <location file="tools/editor/editor_file_system.cpp" line="1123"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/editor_import_export.cpp" line="965"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;rbs&apos; is assigned a value that is never used." verbose="Variable &apos;rbs&apos; is assigned a value that is never used.">
            <location file="tools/editor/editor_import_export.cpp" line="277"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ScriptEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ScriptEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/script_editor_plugin.h" line="255"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ScriptEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ScriptEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/script_editor_plugin.h" line="290"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorHelpSearch&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorHelpSearch&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/editor_help.h" line="73"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorHelp&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorHelp&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/editor_help.h" line="166"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorHelpPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorHelpPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/editor_help.h" line="197"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/editor_log.cpp" line="36"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/editor_log.cpp" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CanvasItemEditor::proj_vector2_x::get&apos; can be static." verbose="The member function &apos;CanvasItemEditor::proj_vector2_x::get&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="tools/editor/plugins/canvas_item_editor_plugin.h" line="358"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CanvasItemEditor::proj_vector2_x::set&apos; can be static." verbose="The member function &apos;CanvasItemEditor::proj_vector2_x::set&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="tools/editor/plugins/canvas_item_editor_plugin.h" line="359"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CanvasItemEditor::proj_vector2_y::get&apos; can be static." verbose="The member function &apos;CanvasItemEditor::proj_vector2_y::get&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="tools/editor/plugins/canvas_item_editor_plugin.h" line="363"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;CanvasItemEditor::proj_vector2_y::set&apos; can be static." verbose="The member function &apos;CanvasItemEditor::proj_vector2_y::set&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="tools/editor/plugins/canvas_item_editor_plugin.h" line="364"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CanvasItemEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CanvasItemEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/canvas_item_editor_plugin.h" line="392"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CanvasItemEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CanvasItemEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/canvas_item_editor_plugin.h" line="415"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/editor_node.cpp" line="3531"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used.">
            <location file="tools/editor/editor_node.cpp" line="1295"/>
            <location file="tools/editor/editor_node.cpp" line="1286"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used.">
            <location file="tools/editor/editor_node.cpp" line="1296"/>
            <location file="tools/editor/editor_node.cpp" line="1295"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;ret&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ret&apos; is reassigned a value before the old one has been used.">
            <location file="tools/editor/editor_node.cpp" line="1316"/>
            <location file="tools/editor/editor_node.cpp" line="1296"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;scene&apos; is assigned a value that is never used." verbose="Variable &apos;scene&apos; is assigned a value that is never used.">
            <location file="tools/editor/editor_node.cpp" line="1377"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;relpaths&apos; is assigned a value that is never used." verbose="Variable &apos;relpaths&apos; is assigned a value that is never used.">
            <location file="tools/editor/editor_node.cpp" line="1872"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;relpaths&apos; is assigned a value that is never used." verbose="Variable &apos;relpaths&apos; is assigned a value that is never used.">
            <location file="tools/editor/editor_node.cpp" line="1952"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;scene&apos; is assigned a value that is never used." verbose="Variable &apos;scene&apos; is assigned a value that is never used.">
            <location file="tools/editor/editor_node.cpp" line="2026"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;vs&apos; is assigned a value that is never used." verbose="Variable &apos;vs&apos; is assigned a value that is never used.">
            <location file="tools/editor/editor_node.cpp" line="4547"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;BakedLightBaker::get_rays_thrown&apos; can be const." verbose="The member function &apos;BakedLightBaker::get_rays_thrown&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="tools/editor/plugins/baked_light_baker.h" line="333"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;BakedLightBaker::get_baked_light&apos; can be const." verbose="The member function &apos;BakedLightBaker::get_baked_light&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="tools/editor/plugins/baked_light_baker.h" line="340"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorSceneImportPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorSceneImportPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/io_plugins/editor_scene_import_plugin.h" line="172"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorSceneAnimationImportPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorSceneAnimationImportPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/io_plugins/editor_scene_import_plugin.h" line="197"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SpriteFramesEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SpriteFramesEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/sprite_frames_editor_plugin.h" line="106"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SampleEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SampleEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/sample_editor_plugin.h" line="85"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SampleLibraryEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SampleLibraryEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/sample_library_editor_plugin.h" line="102"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SamplePlayerEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SamplePlayerEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/sample_player_editor_plugin.h" line="82"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CameraEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CameraEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/camera_editor_plugin.h" line="74"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StyleBoxEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StyleBoxEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/style_box_editor_plugin.h" line="77"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ResourcePreloaderEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ResourcePreloaderEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/resource_preloader_editor_plugin.h" line="97"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ItemListEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ItemListEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/item_list_editor_plugin.h" line="159"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;StreamEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;StreamEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/stream_editor_plugin.h" line="78"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MultiMeshEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MultiMeshEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/multimesh_editor_plugin.h" line="102"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MeshInstanceEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MeshInstanceEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/mesh_editor_plugin.h" line="69"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ThemeEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ThemeEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/theme_editor_plugin.h" line="114"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TileMapEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TileMapEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/tile_map_editor_plugin.h" line="130"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TileMapEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TileMapEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/tile_map_editor_plugin.h" line="151"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MeshLibraryEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MeshLibraryEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/cube_grid_theme_editor_plugin.h" line="70"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MeshLibraryEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MeshLibraryEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/cube_grid_theme_editor_plugin.h" line="90"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ShaderGraphView&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ShaderGraphView&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/shader_graph_editor_plugin.h" line="182"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ShaderGraphEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ShaderGraphEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/shader_graph_editor_plugin.h" line="202"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;LightSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;LightSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="139"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CameraSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CameraSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="158"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;MeshInstanceSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;MeshInstanceSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="173"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Position3DSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Position3DSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="186"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SkeletonSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SkeletonSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="199"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SpatialPlayerSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SpatialPlayerSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="213"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TestCubeSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TestCubeSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="225"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RoomSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RoomSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="250"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PortalSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PortalSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="264"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VisibilityNotifierGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VisibilityNotifierGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="284"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CollisionShapeSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CollisionShapeSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="302"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CollisionPolygonSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CollisionPolygonSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="316"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RayCastSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RayCastSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="330"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;VehicleWheelSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;VehicleWheelSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="345"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;NavigationMeshSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;NavigationMeshSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="370"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PinJointSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PinJointSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="384"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;HingeJointSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;HingeJointSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="398"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SliderJointSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SliderJointSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="411"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ConeTwistJointSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ConeTwistJointSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="424"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Generic6DOFJointSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Generic6DOFJointSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/spatial_editor_gizmos.h" line="438"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathSpatialGizmo&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathSpatialGizmo&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/path_editor_plugin.h" line="50"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PathEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PathEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/path_editor_plugin.h" line="93"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;RichTextEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;RichTextEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/rich_text_editor_plugin.h" line="86"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CollisionPolygonEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CollisionPolygonEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/collision_polygon_editor_plugin.h" line="95"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CollisionPolygonEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CollisionPolygonEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/collision_polygon_editor_plugin.h" line="116"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CollisionPolygon2DEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CollisionPolygon2DEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/collision_polygon_2d_editor_plugin.h" line="58"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CollisionPolygon2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CollisionPolygon2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/collision_polygon_2d_editor_plugin.h" line="78"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Path2DEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Path2DEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/path_2d_editor_plugin.h" line="99"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Path2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Path2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/path_2d_editor_plugin.h" line="119"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ParticlesEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ParticlesEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/particles_editor_plugin.h" line="110"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Particles2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Particles2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/particles_2d_editor_plugin.h" line="76"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AnimationTreeEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AnimationTreeEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/animation_tree_editor_plugin.h" line="188"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TileSetEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TileSetEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/tile_set_editor_plugin.h" line="71"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;TileSetEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;TileSetEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/tile_set_editor_plugin.h" line="93"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AnimationPlayerEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AnimationPlayerEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/animation_player_editor_plugin.h" line="162"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;AnimationPlayerEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;AnimationPlayerEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/animation_player_editor_plugin.h" line="183"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;BakedLightEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;BakedLightEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/baked_light_editor_plugin.h" line="85"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Polygon2DEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Polygon2DEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/polygon_2d_editor_plugin.h" line="97"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Polygon2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Polygon2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/polygon_2d_editor_plugin.h" line="117"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;NavigationPolygonEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;NavigationPolygonEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/navigation_polygon_editor_plugin.h" line="64"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;NavigationPolygonEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;NavigationPolygonEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/navigation_polygon_editor_plugin.h" line="84"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;LightOccluder2DEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;LightOccluder2DEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/light_occluder_2d_editor_plugin.h" line="62"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;LightOccluder2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;LightOccluder2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/light_occluder_2d_editor_plugin.h" line="82"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ColorRampEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ColorRampEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/color_ramp_editor_plugin.h" line="32"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CollisionShape2DEditor&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CollisionShape2DEditor&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/collision_shape_2d_editor_plugin.h" line="51"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;CollisionShape2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;CollisionShape2DEditorPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/plugins/collision_shape_2d_editor_plugin.h" line="69"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorFontImportPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorFontImportPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/io_plugins/editor_font_import_plugin.h" line="53"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorSampleImportPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorSampleImportPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/io_plugins/editor_sample_import_plugin.h" line="52"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorTranslationImportPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorTranslationImportPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/io_plugins/editor_translation_import_plugin.h" line="51"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorMeshImportPlugin&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorMeshImportPlugin&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/io_plugins/editor_mesh_import_plugin.h" line="26"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ScriptEditorDebugger&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ScriptEditorDebugger&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/script_editor_debugger.h" line="182"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/editor_resource_preview.cpp" line="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;hints&apos; is assigned a value that is never used." verbose="Variable &apos;hints&apos; is assigned a value that is never used.">
            <location file="tools/editor/editor_settings.cpp" line="570"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;file_type_map&apos; is assigned a value that is never used." verbose="Variable &apos;file_type_map&apos; is assigned a value that is never used.">
            <location file="tools/editor/file_type_cache.cpp" line="52"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/fileserver/editor_file_server.cpp" line="27"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/fileserver/editor_file_server.cpp" line="252"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ec&apos; is assigned a value that is never used." verbose="Variable &apos;ec&apos; is assigned a value that is never used.">
            <location file="tools/editor/import_settings.cpp" line="61"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;size&apos; is assigned a value that is never used." verbose="Variable &apos;size&apos; is assigned a value that is never used.">
            <location file="tools/editor/io_plugins/editor_font_import_plugin.cpp" line="879"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorFontImportDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorFontImportDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/io_plugins/editor_font_import_plugin.cpp" line="600"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;anim&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;anim&apos; is reassigned a value before the old one has been used.">
            <location file="tools/editor/io_plugins/editor_import_collada.cpp" line="2380"/>
            <location file="tools/editor/io_plugins/editor_import_collada.cpp" line="2379"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;final_format&apos; is assigned a value that is never used." verbose="Variable &apos;final_format&apos; is assigned a value that is never used.">
            <location file="tools/editor/io_plugins/editor_import_collada.cpp" line="1186"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sum&apos; is assigned a value that is never used." verbose="Variable &apos;sum&apos; is assigned a value that is never used.">
            <location file="tools/editor/io_plugins/editor_import_collada.cpp" line="1222"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cn&apos; is assigned a value that is never used." verbose="Variable &apos;cn&apos; is assigned a value that is never used.">
            <location file="tools/editor/io_plugins/editor_import_collada.cpp" line="2238"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ColladaImport::scene&apos; is not initialized in the constructor." verbose="Member variable &apos;ColladaImport::scene&apos; is not initialized in the constructor.">
            <location file="tools/editor/io_plugins/editor_import_collada.cpp" line="98"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;generate_tangents&apos; is assigned a value that is never used." verbose="Variable &apos;generate_tangents&apos; is assigned a value that is never used.">
            <location file="tools/editor/io_plugins/editor_mesh_import_plugin.cpp" line="392"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorMeshImportDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorMeshImportDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/io_plugins/editor_mesh_import_plugin.cpp" line="265"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: signed_nibble" verbose="Unused variable: signed_nibble">
            <location file="tools/editor/io_plugins/editor_sample_import_plugin.cpp" line="713"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: p" verbose="Unused variable: p">
            <location file="tools/editor/io_plugins/editor_sample_import_plugin.cpp" line="713"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorSampleImportDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorSampleImportDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/io_plugins/editor_sample_import_plugin.cpp" line="328"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;weight_ofs&apos; is assigned a value that is never used." verbose="Variable &apos;weight_ofs&apos; is assigned a value that is never used.">
            <location file="tools/editor/io_plugins/editor_scene_importer_fbxconv.cpp" line="600"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;first&apos; is assigned a value that is never used." verbose="Variable &apos;first&apos; is assigned a value that is never used.">
            <location file="tools/editor/io_plugins/editor_translation_import_plugin.cpp" line="408"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;EditorTranslationImportDialog&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;EditorTranslationImportDialog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="tools/editor/io_plugins/editor_translation_import_plugin.cpp" line="293"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2083"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ret&apos; can be reduced." verbose="The scope of the variable &apos;ret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="1156"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lz&apos; is assigned a value that is never used." verbose="Variable &apos;lz&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="621"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bvhptr&apos; is assigned a value that is never used." verbose="Variable &apos;bvhptr&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="992"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ret&apos; is assigned a value that is never used." verbose="Variable &apos;ret&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="1199"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;r2&apos; is assigned a value that is never used." verbose="Variable &apos;r2&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="1669"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lz&apos; is assigned a value that is never used." verbose="Variable &apos;lz&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="1970"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bvhptr&apos; is assigned a value that is never used." verbose="Variable &apos;bvhptr&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2237"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;normptr&apos; is assigned a value that is never used." verbose="Variable &apos;normptr&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2381"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;src_data&apos; is assigned a value that is never used." verbose="Variable &apos;src_data&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2514"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::bvh_depth&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::bvh_depth&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::cell_size&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::cell_size&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::octree_extra_margin&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::octree_extra_margin&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::use_diffuse&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::use_diffuse&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::use_specular&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::use_specular&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::use_translucency&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::use_translucency&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::baked_light_texture_w&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::baked_light_texture_w&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::baked_light_texture_h&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::baked_light_texture_h&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::edge_damp&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::edge_damp&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::normal_damp&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::normal_damp&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::tint&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::tint&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::ao_radius&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::ao_radius&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::ao_strength&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::ao_strength&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;BakedLightBaker::total_light_area&apos; is not initialized in the constructor." verbose="Member variable &apos;BakedLightBaker::total_light_area&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2672"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;BakedLightBaker::is_baking&apos; can be const." verbose="The member function &apos;BakedLightBaker::is_baking&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="tools/editor/plugins/baked_light_baker.h" line="330"/>
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2057"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;BakedLightBaker::is_paused&apos; can be const." verbose="The member function &apos;BakedLightBaker::is_paused&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="tools/editor/plugins/baked_light_baker.h" line="332"/>
            <location file="tools/editor/plugins/baked_light_baker.cpp" line="2075"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;max_lum&apos; can be reduced." verbose="The scope of the variable &apos;max_lum&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/plugins/baked_light_editor_plugin.cpp" line="60"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;n&apos; is redundant or there is possible null pointer dereference: n." verbose="Either the condition &apos;n&apos; is redundant or there is possible null pointer dereference: n." inconclusive="true">
            <location file="tools/editor/plugins/canvas_item_editor_plugin.cpp" line="1196"/>
            <location file="tools/editor/plugins/canvas_item_editor_plugin.cpp" line="1199"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/plugins/canvas_item_editor_plugin.cpp" line="754"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/plugins/canvas_item_editor_plugin.cpp" line="2277"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;single_item&apos; is assigned a value that is never used." verbose="Variable &apos;single_item&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/canvas_item_editor_plugin.cpp" line="1693"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: bone.last_pass" verbose="Uninitialized struct member: bone.last_pass">
            <location file="tools/editor/plugins/canvas_item_editor_plugin.cpp" line="2087"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/collision_polygon_2d_editor_plugin.cpp" line="324"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/collision_polygon_editor_plugin.cpp" line="380"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;CollisionShape2DEditor::shape_type&apos; is not initialized in the constructor." verbose="Member variable &apos;CollisionShape2DEditor::shape_type&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/collision_shape_2d_editor_plugin.cpp" line="494"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;count&apos; is assigned a value that is never used." verbose="Variable &apos;count&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/animation_tree_editor_plugin.cpp" line="519"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MeshLibraryEditorPlugin::editor&apos; is not initialized in the constructor." verbose="Member variable &apos;MeshLibraryEditorPlugin::editor&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/cube_grid_theme_editor_plugin.cpp" line="330"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;&amp;&amp;&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="tools/editor/plugins/editor_preview_plugins.cpp" line="28"/>
            <location file="tools/editor/plugins/editor_preview_plugins.cpp" line="28"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: signed_nibble" verbose="Unused variable: signed_nibble">
            <location file="tools/editor/plugins/editor_preview_plugins.cpp" line="489"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ofs&apos; is assigned a value that is never used." verbose="Variable &apos;ofs&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/editor_preview_plugins.cpp" line="632"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed.">
            <location file="tools/editor/plugins/item_list_editor_plugin.cpp" line="214"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/light_occluder_2d_editor_plugin.cpp" line="339"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/navigation_polygon_editor_plugin.cpp" line="402"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;ofs&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;ofs&apos; is reassigned a value before the old one has been used.">
            <location file="tools/editor/plugins/particles_editor_plugin.cpp" line="283"/>
            <location file="tools/editor/plugins/particles_editor_plugin.cpp" line="282"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;idx&apos; can be reduced." verbose="The scope of the variable &apos;idx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/plugins/path_editor_plugin.cpp" line="304"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;closest_d&apos; can be reduced." verbose="The scope of the variable &apos;closest_d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/plugins/path_editor_plugin.cpp" line="308"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/polygon_2d_editor_plugin.cpp" line="427"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,TreeItem*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,TreeItem*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,TreeItem*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,TreeItem*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,TreeItem*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,Vector&lt;CustomType&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,Vector&lt;CustomType&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,Vector&lt;CustomType&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,Vector&lt;CustomType&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,Vector&lt;CustomType&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;Node*,Object*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;Node*,Object*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;Node*,Object*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;Node*,Object*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;Node*,Object*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;int,ColorRegionInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;int,ColorRegionInfo,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;int,ColorRegionInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;int,ColorRegionInfo,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;int,ColorRegionInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;SelectedKey,KeyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;SelectedKey,KeyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;SelectedKey,KeyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;SelectedKey,KeyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;SelectedKey,KeyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,FileAction,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,FileAction,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,FileAction,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,FileAction,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,FileAction,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,Ref&lt;EditorExportPlatform&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,Ref&lt;EditorExportPlatform&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,Ref&lt;EditorExportPlatform&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,Ref&lt;EditorExportPlatform&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,Ref&lt;EditorExportPlatform&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,ImageGroup,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,ImageGroup,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,ImageGroup,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,ImageGroup,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,ImageGroup,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,PropertyAnim,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,PropertyAnim,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,PropertyAnim,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,PropertyAnim,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,PropertyAnim,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;TrackNodeCacheKey,TrackNodeCache,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;TrackNodeCacheKey,TrackNodeCache,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;TrackNodeCacheKey,TrackNodeCache,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;TrackNodeCacheKey,TrackNodeCache,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;TrackNodeCacheKey,TrackNodeCache,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;Ref&lt;Animation&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;Ref&lt;Animation&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;Ref&lt;Animation&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;Ref&lt;Animation&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;Ref&lt;Animation&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,AnimationData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,AnimationData,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,AnimationData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,AnimationData,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,AnimationData,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;BlendKey,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;BlendKey,float,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;BlendKey,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;BlendKey,float,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;BlendKey,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,MenuButton*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,MenuButton*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,MenuButton*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,MenuButton*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,MenuButton*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;int,FileAccess*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;int,FileAccess*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;int,FileAccess*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;int,FileAccess*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;int,FileAccess*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,Item,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,Item,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,Item,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,Item,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,Item,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,Task,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,Task,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,Task,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,Task,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,Task,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;String,Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;String,Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;String,Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;String,Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;String,Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;TrackKey,Track,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;TrackKey,Track,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;TrackKey,Track,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;TrackKey,Track,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;TrackKey,Track,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;StringName,NodeBase*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;StringName,NodeBase*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;StringName,NodeBase*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;StringName,NodeBase*,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;StringName,NodeBase*,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Map&lt;ObjectID,uint64_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Map&lt;ObjectID,uint64_t,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Map&lt;ObjectID,uint64_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Map&lt;ObjectID,uint64_t,Comparator&lt;K&gt;,DefaultAllocator&gt; &amp;Map&lt;ObjectID,uint64_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/map.h" line="686"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Range*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Range*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Range*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Range*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Range*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Thread*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Thread*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Thread*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Thread*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Thread*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;FileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;FileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;FileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;FileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;FileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;EditorFileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;EditorFileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;EditorFileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;EditorFileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;EditorFileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Set&lt;Camera*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=&apos; should return &apos;Set&lt;Camera*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;&apos;." verbose="The Set&lt;Camera*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Set&lt;Camera*,Comparator&lt;T&gt;,DefaultAllocator&gt; &amp;Set&lt;Camera*,Comparator&lt;T&gt;,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/set.h" line="645"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;CharType,Character,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;CharType,Character,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;CharType,Character,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;CharType,Character,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;CharType,Character,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;HashMap&lt;NodePath,bool,HashMapHahserDefault,3,8&gt;::operator=&apos; should return &apos;HashMap&lt;NodePath,bool,HashMapHahserDefault,3,8&gt; &amp;&apos;." verbose="The HashMap&lt;NodePath,bool,HashMapHahserDefault,3,8&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;HashMap&lt;NodePath,bool,HashMapHahserDefault,3,8&gt; &amp;HashMap&lt;NodePath,bool,HashMapHahserDefault,3,8&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/hash_map.h" line="588"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;CharType&gt;::operator=&apos; should return &apos;Vector&lt;CharType&gt; &amp;&apos;." verbose="The Vector&lt;CharType&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;CharType&gt; &amp;Vector&lt;CharType&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Item&gt;::operator=&apos; should return &apos;Vector&lt;Item&gt; &amp;&apos;." verbose="The Vector&lt;Item&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Item&gt; &amp;Vector&lt;Item&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Button&gt;::operator=&apos; should return &apos;Vector&lt;Button&gt; &amp;&apos;." verbose="The Vector&lt;Button&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Button&gt; &amp;Vector&lt;Button&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Cell&gt;::operator=&apos; should return &apos;Vector&lt;Cell&gt; &amp;&apos;." verbose="The Vector&lt;Cell&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Cell&gt; &amp;Vector&lt;Cell&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;ColumnInfo&gt;::operator=&apos; should return &apos;Vector&lt;ColumnInfo&gt; &amp;&apos;." verbose="The Vector&lt;ColumnInfo&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;ColumnInfo&gt; &amp;Vector&lt;ColumnInfo&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;EditorFileSystemDirectory*&gt;::operator=&apos; should return &apos;Vector&lt;EditorFileSystemDirectory*&gt; &amp;&apos;." verbose="The Vector&lt;EditorFileSystemDirectory*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;EditorFileSystemDirectory*&gt; &amp;Vector&lt;EditorFileSystemDirectory*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;FileInfo&gt;::operator=&apos; should return &apos;Vector&lt;FileInfo&gt; &amp;&apos;." verbose="The Vector&lt;FileInfo&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;FileInfo&gt; &amp;Vector&lt;FileInfo&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;DirItem*&gt;::operator=&apos; should return &apos;Vector&lt;DirItem*&gt; &amp;&apos;." verbose="The Vector&lt;DirItem*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;DirItem*&gt; &amp;Vector&lt;DirItem*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;SceneItem*&gt;::operator=&apos; should return &apos;Vector&lt;SceneItem*&gt; &amp;&apos;." verbose="The Vector&lt;SceneItem*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;SceneItem*&gt; &amp;Vector&lt;SceneItem*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Obj&gt;::operator=&apos; should return &apos;Vector&lt;Obj&gt; &amp;&apos;." verbose="The Vector&lt;Obj&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Obj&gt; &amp;Vector&lt;Obj&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;History&gt;::operator=&apos; should return &apos;Vector&lt;History&gt; &amp;&apos;." verbose="The Vector&lt;History&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;History&gt; &amp;Vector&lt;History&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;EditorPlugin*&gt;::operator=&apos; should return &apos;Vector&lt;EditorPlugin*&gt; &amp;&apos;." verbose="The Vector&lt;EditorPlugin*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;EditorPlugin*&gt; &amp;Vector&lt;EditorPlugin*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;EditorHistory::History&gt;::operator=&apos; should return &apos;Vector&lt;EditorHistory::History&gt; &amp;&apos;." verbose="The Vector&lt;EditorHistory::History&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;EditorHistory::History&gt; &amp;Vector&lt;EditorHistory::History&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;EditedScene&gt;::operator=&apos; should return &apos;Vector&lt;EditedScene&gt; &amp;&apos;." verbose="The Vector&lt;EditedScene&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;EditedScene&gt; &amp;Vector&lt;EditedScene&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;ColorRegion&gt;::operator=&apos; should return &apos;Vector&lt;ColorRegion&gt; &amp;&apos;." verbose="The Vector&lt;ColorRegion&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;ColorRegion&gt; &amp;Vector&lt;ColorRegion&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Line&gt;::operator=&apos; should return &apos;Vector&lt;Line&gt; &amp;&apos;." verbose="The Vector&lt;Line&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Line&gt; &amp;Vector&lt;Line&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;MethodInfo&gt;::operator=&apos; should return &apos;Vector&lt;MethodInfo&gt; &amp;&apos;." verbose="The Vector&lt;MethodInfo&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;MethodInfo&gt; &amp;Vector&lt;MethodInfo&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;TKey&lt;TransformKey&gt;&gt;::operator=&apos; should return &apos;Vector&lt;TKey&lt;TransformKey&gt;&gt; &amp;&apos;." verbose="The Vector&lt;TKey&lt;TransformKey&gt;&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;TKey&lt;TransformKey&gt;&gt; &amp;Vector&lt;TKey&lt;TransformKey&gt;&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;TKey&lt;Variant&gt;&gt;::operator=&apos; should return &apos;Vector&lt;TKey&lt;Variant&gt;&gt; &amp;&apos;." verbose="The Vector&lt;TKey&lt;Variant&gt;&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;TKey&lt;Variant&gt;&gt; &amp;Vector&lt;TKey&lt;Variant&gt;&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;MethodKey&gt;::operator=&apos; should return &apos;Vector&lt;MethodKey&gt; &amp;&apos;." verbose="The Vector&lt;MethodKey&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;MethodKey&gt; &amp;Vector&lt;MethodKey&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Track*&gt;::operator=&apos; should return &apos;Vector&lt;Track*&gt; &amp;&apos;." verbose="The Vector&lt;Track*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Track*&gt; &amp;Vector&lt;Track*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;K&gt;::operator=&apos; should return &apos;Vector&lt;K&gt; &amp;&apos;." verbose="The Vector&lt;K&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;K&gt; &amp;Vector&lt;K&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;TKey&lt;T&gt;&gt;::operator=&apos; should return &apos;Vector&lt;TKey&lt;T&gt;&gt; &amp;&apos;." verbose="The Vector&lt;TKey&lt;T&gt;&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;TKey&lt;T&gt;&gt; &amp;Vector&lt;TKey&lt;T&gt;&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Path&gt;::operator=&apos; should return &apos;Vector&lt;Path&gt; &amp;&apos;." verbose="The Vector&lt;Path&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Path&gt; &amp;Vector&lt;Path&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;TempData&gt;::operator=&apos; should return &apos;Vector&lt;TempData&gt; &amp;&apos;." verbose="The Vector&lt;TempData&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;TempData&gt; &amp;Vector&lt;TempData&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Ref&lt;EditorExportPlugin&gt;&gt;::operator=&apos; should return &apos;Vector&lt;Ref&lt;EditorExportPlugin&gt;&gt; &amp;&apos;." verbose="The Vector&lt;Ref&lt;EditorExportPlugin&gt;&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Ref&lt;EditorExportPlugin&gt;&gt; &amp;Vector&lt;Ref&lt;EditorExportPlugin&gt;&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Ref&lt;EditorImportPlugin&gt;&gt;::operator=&apos; should return &apos;Vector&lt;Ref&lt;EditorImportPlugin&gt;&gt; &amp;&apos;." verbose="The Vector&lt;Ref&lt;EditorImportPlugin&gt;&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Ref&lt;EditorImportPlugin&gt;&gt; &amp;Vector&lt;Ref&lt;EditorImportPlugin&gt;&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;TreeItem*&gt;::operator=&apos; should return &apos;Vector&lt;TreeItem*&gt; &amp;&apos;." verbose="The Vector&lt;TreeItem*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;TreeItem*&gt; &amp;Vector&lt;TreeItem*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;TrackNodeCache*&gt;::operator=&apos; should return &apos;Vector&lt;TrackNodeCache*&gt; &amp;&apos;." verbose="The Vector&lt;TrackNodeCache*&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;TrackNodeCache*&gt; &amp;Vector&lt;TrackNodeCache*&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Tab&gt;::operator=&apos; should return &apos;Vector&lt;Tab&gt; &amp;&apos;." verbose="The Vector&lt;Tab&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Tab&gt; &amp;Vector&lt;Tab&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Ref&lt;EditorResourcePreviewGenerator&gt;&gt;::operator=&apos; should return &apos;Vector&lt;Ref&lt;EditorResourcePreviewGenerator&gt;&gt; &amp;&apos;." verbose="The Vector&lt;Ref&lt;EditorResourcePreviewGenerator&gt;&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Ref&lt;EditorResourcePreviewGenerator&gt;&gt; &amp;Vector&lt;Ref&lt;EditorResourcePreviewGenerator&gt;&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;Input&gt;::operator=&apos; should return &apos;Vector&lt;Input&gt; &amp;&apos;." verbose="The Vector&lt;Input&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;Input&gt; &amp;Vector&lt;Input&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;InputData&gt;::operator=&apos; should return &apos;Vector&lt;InputData&gt; &amp;&apos;." verbose="The Vector&lt;InputData&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;InputData&gt; &amp;Vector&lt;InputData&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Rect2,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Rect2,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Rect2,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Rect2,DefaultAllocator&gt; &amp;List&lt;Rect2,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;PropertyData,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;PropertyData,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;PropertyData,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;PropertyData,DefaultAllocator&gt; &amp;List&lt;PropertyData,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;TextOperation,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;TextOperation,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;TextOperation,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;TextOperation,DefaultAllocator&gt; &amp;List&lt;TextOperation,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Item*,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Item*,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Item*,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Item*,DefaultAllocator&gt; &amp;List&lt;Item*,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;InsertData,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;InsertData,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;InsertData,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;InsertData,DefaultAllocator&gt; &amp;List&lt;InsertData,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;Blend,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;Blend,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;Blend,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;Blend,DefaultAllocator&gt; &amp;List&lt;Blend,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;QueueItem,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;QueueItem,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;QueueItem,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;QueueItem,DefaultAllocator&gt; &amp;List&lt;QueueItem,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;TrackRef,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;TrackRef,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;TrackRef,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;TrackRef,DefaultAllocator&gt; &amp;List&lt;TrackRef,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;AnimationTreePlayer::Connection,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;AnimationTreePlayer::Connection,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;AnimationTreePlayer::Connection,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;AnimationTreePlayer::Connection,DefaultAllocator&gt; &amp;List&lt;AnimationTreePlayer::Connection,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;CharType,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;CharType,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;CharType,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;CharType,DefaultAllocator&gt; &amp;List&lt;CharType,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;List&lt;NodePath,DefaultAllocator&gt;::operator=&apos; should return &apos;List&lt;NodePath,DefaultAllocator&gt; &amp;&apos;." verbose="The List&lt;NodePath,DefaultAllocator&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;List&lt;NodePath,DefaultAllocator&gt; &amp;List&lt;NodePath,DefaultAllocator&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/list.h" line="394"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;EditorPlugins::creator&apos;" verbose="Unused private function: &apos;EditorPlugins::creator&apos;">
            <location file="tools/editor/editor_plugin.h" line="119"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;begin_key&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;begin_key&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="scene/gui/text_edit.h" line="98"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;end_key&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;end_key&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="scene/gui/text_edit.h" line="98"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;color&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;color&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="scene/gui/text_edit.h" line="98"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;TreeItem::_get_range_config&apos; can be const." verbose="The member function &apos;TreeItem::_get_range_config&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="scene/gui/tree.h" line="141"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;ConnectDialog::get_make_callback&apos; can be const." verbose="The member function &apos;ConnectDialog::get_make_callback&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="tools/editor/connections_dialog.h" line="79"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;EditorNode::has_main_screen&apos; can be static." verbose="The member function &apos;EditorNode::has_main_screen&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="tools/editor/editor_node.h" line="429"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,TreeItem*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,TreeItem*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,TreeItem*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,TreeItem*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,TreeItem*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,TreeItem*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Vector&lt;CustomType&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,Vector&lt;CustomType&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Vector&lt;CustomType&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,Vector&lt;CustomType&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Vector&lt;CustomType&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,Vector&lt;CustomType&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Node*,Object*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;Node*,Object*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Node*,Object*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;Node*,Object*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Node*,Object*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;Node*,Object*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,ColorRegionInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;int,ColorRegionInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,ColorRegionInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;int,ColorRegionInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,ColorRegionInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;int,ColorRegionInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Map&lt;StringName,String,Comparator&lt;K&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;SelectedKey,KeyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;SelectedKey,KeyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;SelectedKey,KeyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;SelectedKey,KeyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;SelectedKey,KeyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;SelectedKey,KeyInfo,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,FileAction,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,FileAction,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,FileAction,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,FileAction,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,FileAction,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,FileAction,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Ref&lt;EditorExportPlatform&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Ref&lt;EditorExportPlatform&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Ref&lt;EditorExportPlatform&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Ref&lt;EditorExportPlatform&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,Ref&lt;EditorExportPlatform&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,Ref&lt;EditorExportPlatform&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,ImageGroup,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,ImageGroup,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,ImageGroup,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,ImageGroup,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,ImageGroup,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,ImageGroup,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,PropertyAnim,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,PropertyAnim,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,PropertyAnim,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,PropertyAnim,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,PropertyAnim,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,PropertyAnim,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;TrackNodeCacheKey,TrackNodeCache,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;TrackNodeCacheKey,TrackNodeCache,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;TrackNodeCacheKey,TrackNodeCache,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;TrackNodeCacheKey,TrackNodeCache,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;TrackNodeCacheKey,TrackNodeCache,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;TrackNodeCacheKey,TrackNodeCache,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Ref&lt;Animation&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;Ref&lt;Animation&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Ref&lt;Animation&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;Ref&lt;Animation&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;Ref&lt;Animation&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;Ref&lt;Animation&gt;,int,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,AnimationData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,AnimationData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,AnimationData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,AnimationData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,AnimationData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,AnimationData,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;BlendKey,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;BlendKey,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;BlendKey,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;BlendKey,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;BlendKey,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;BlendKey,float,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,MenuButton*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,MenuButton*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,MenuButton*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,MenuButton*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,MenuButton*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,MenuButton*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,FileAccess*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;int,FileAccess*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,FileAccess*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;int,FileAccess*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;int,FileAccess*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;int,FileAccess*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Item,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,Item,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Item,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,Item,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Item,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,Item,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Task,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,Task,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Task,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,Task,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Task,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,Task,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,Ref&lt;Texture&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;String,Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;String,Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;String,Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;String,Set&lt;String,Comparator&lt;T&gt;,DefaultAllocator&gt;,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;TrackKey,Track,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;TrackKey,Track,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;TrackKey,Track,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;TrackKey,Track,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;TrackKey,Track,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;TrackKey,Track,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,NodeBase*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;StringName,NodeBase*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,NodeBase*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;StringName,NodeBase*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;StringName,NodeBase*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;StringName,NodeBase*,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ObjectID,uint64_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Map&lt;ObjectID,uint64_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="158"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ObjectID,uint64_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Map&lt;ObjectID,uint64_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="163"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Map&lt;ObjectID,uint64_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Map&lt;ObjectID,uint64_t,Comparator&lt;K&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/map.h" line="180"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Range*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Range*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Range*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Range*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Range*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Range*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Thread*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Thread*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Thread*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Thread*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Thread*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Thread*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;FileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;FileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;FileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;FileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;FileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;FileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;EditorFileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;EditorFileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;EditorFileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;EditorFileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;EditorFileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;EditorFileDialog*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Camera*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be const." verbose="The member function &apos;Set&lt;Camera*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_set_color&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="150"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Camera*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be const." verbose="The member function &apos;Set&lt;Camera*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_left&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="155"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Set&lt;Camera*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be const." verbose="The member function &apos;Set&lt;Camera*,Comparator&lt;T&gt;,DefaultAllocator&gt;::_rotate_right&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/set.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;CharType,Character,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;CharType,Character,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;CharType,Character,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;CharType,Character,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;NodePath,bool,HashMapHahserDefault,3,8&gt;::size&apos; can be static." verbose="The member function &apos;HashMap&lt;NodePath,bool,HashMapHahserDefault,3,8&gt;::size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="555"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;HashMap&lt;NodePath,bool,HashMapHahserDefault,3,8&gt;::empty&apos; can be static." verbose="The member function &apos;HashMap&lt;NodePath,bool,HashMapHahserDefault,3,8&gt;::empty&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/hash_map.h" line="560"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;CharType&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;CharType&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;CharType&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;CharType&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;CharType&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;CharType&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;KerningPairKey&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;KerningPairKey&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Item&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Item&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Item&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Item&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Item&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Item&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Button&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Button&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Button&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Button&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Button&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Button&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Cell&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Cell&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Cell&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Cell&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Cell&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Cell&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ColumnInfo&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;ColumnInfo&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ColumnInfo&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;ColumnInfo&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ColumnInfo&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;ColumnInfo&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditorFileSystemDirectory*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;EditorFileSystemDirectory*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditorFileSystemDirectory*&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;EditorFileSystemDirectory*&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditorFileSystemDirectory*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;EditorFileSystemDirectory*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Source&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Source&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;FileInfo&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;FileInfo&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;FileInfo&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;FileInfo&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;FileInfo&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;FileInfo&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;DirItem*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;DirItem*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;DirItem*&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;DirItem*&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;DirItem*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;DirItem*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;SceneItem*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;SceneItem*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;SceneItem*&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;SceneItem*&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;SceneItem*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;SceneItem*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Obj&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Obj&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Obj&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Obj&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Obj&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Obj&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;History&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;History&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;History&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;History&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;History&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;History&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditorPlugin*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;EditorPlugin*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditorPlugin*&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;EditorPlugin*&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditorPlugin*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;EditorPlugin*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditorHistory::History&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;EditorHistory::History&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditorHistory::History&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;EditorHistory::History&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditorHistory::History&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;EditorHistory::History&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditedScene&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;EditedScene&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditedScene&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;EditedScene&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;EditedScene&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;EditedScene&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ColorRegion&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;ColorRegion&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ColorRegion&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;ColorRegion&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;ColorRegion&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;ColorRegion&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Line&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Line&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Line&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Line&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Line&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Line&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;MethodInfo&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;MethodInfo&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;MethodInfo&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;MethodInfo&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;MethodInfo&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;MethodInfo&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TKey&lt;TransformKey&gt;&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;TKey&lt;TransformKey&gt;&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TKey&lt;TransformKey&gt;&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;TKey&lt;TransformKey&gt;&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TKey&lt;TransformKey&gt;&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;TKey&lt;TransformKey&gt;&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TKey&lt;Variant&gt;&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;TKey&lt;Variant&gt;&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TKey&lt;Variant&gt;&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;TKey&lt;Variant&gt;&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;MethodKey&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;MethodKey&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;MethodKey&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;MethodKey&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;MethodKey&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;MethodKey&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Track*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Track*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Track*&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Track*&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Track*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Track*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;K&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;K&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;K&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;K&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;K&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;K&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TKey&lt;T&gt;&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;TKey&lt;T&gt;&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TKey&lt;T&gt;&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;TKey&lt;T&gt;&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Path&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Path&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Path&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Path&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Path&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Path&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TempData&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;TempData&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TempData&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;TempData&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TempData&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;TempData&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Ref&lt;EditorExportPlugin&gt;&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Ref&lt;EditorExportPlugin&gt;&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Ref&lt;EditorExportPlugin&gt;&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Ref&lt;EditorExportPlugin&gt;&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Ref&lt;EditorImportPlugin&gt;&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Ref&lt;EditorImportPlugin&gt;&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Ref&lt;EditorImportPlugin&gt;&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Ref&lt;EditorImportPlugin&gt;&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TreeItem*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;TreeItem*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TreeItem*&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;TreeItem*&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TreeItem*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;TreeItem*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TrackNodeCache*&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;TrackNodeCache*&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TrackNodeCache*&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;TrackNodeCache*&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;TrackNodeCache*&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;TrackNodeCache*&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Tab&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Tab&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Tab&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Tab&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Tab&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Tab&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Ref&lt;EditorResourcePreviewGenerator&gt;&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Ref&lt;EditorResourcePreviewGenerator&gt;&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Ref&lt;EditorResourcePreviewGenerator&gt;&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Ref&lt;EditorResourcePreviewGenerator&gt;&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Input&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;Input&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Input&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;Input&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;Input&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;Input&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;InputData&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;InputData&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;InputData&gt;::_unref&apos; can be static." verbose="The member function &apos;Vector&lt;InputData&gt;::_unref&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="77"/>
            <location file="core/vector.h" line="172"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;InputData&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;InputData&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Rect2,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Rect2,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Rect2,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Rect2,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;PropertyData,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;PropertyData,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;PropertyData,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;PropertyData,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;TextOperation,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;TextOperation,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;TextOperation,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;TextOperation,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Item*,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Item*,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Item*,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Item*,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;InsertData,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;InsertData,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;InsertData,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;InsertData,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;Blend,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;Blend,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;Blend,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;Blend,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;QueueItem,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;QueueItem,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;QueueItem,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;QueueItem,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;TrackRef,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;TrackRef,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;TrackRef,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;TrackRef,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;AnimationTreePlayer::Connection,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;AnimationTreePlayer::Connection,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;AnimationTreePlayer::Connection,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;AnimationTreePlayer::Connection,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;CharType,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;CharType,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;CharType,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;CharType,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;List&lt;NodePath,DefaultAllocator&gt;::swap&apos; can be const." verbose="The member function &apos;List&lt;NodePath,DefaultAllocator&gt;::swap&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="core/list.h" line="365"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;List&lt;NodePath,DefaultAllocator&gt;::sort&apos; can be static." verbose="The member function &apos;List&lt;NodePath,DefaultAllocator&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/list.h" line="548"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;CharType,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;CharType,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Item,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Item,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Button,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Button,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Cell,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Cell,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;ColumnInfo,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;ColumnInfo,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;EditorFileSystemDirectory*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;EditorFileSystemDirectory*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;FileInfo,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;FileInfo,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;DirItem*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;DirItem*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;SceneItem*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;SceneItem*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Obj,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Obj,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;History,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;History,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;EditorPlugin*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;EditorPlugin*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;EditorHistory::History,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;EditorHistory::History,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;EditedScene,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;EditedScene,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;ColorRegion,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;ColorRegion,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Line,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Line,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;MethodInfo,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;MethodInfo,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;TKey&lt;TransformKey&gt;,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;TKey&lt;TransformKey&gt;,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;TKey&lt;Variant&gt;,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;TKey&lt;Variant&gt;,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;MethodKey,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;MethodKey,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Track*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Track*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;K,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;K,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;TKey&lt;T&gt;,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;TKey&lt;T&gt;,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Path,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Path,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;TempData,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;TempData,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Ref&lt;EditorExportPlugin&gt;,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Ref&lt;EditorExportPlugin&gt;,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Ref&lt;EditorImportPlugin&gt;,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Ref&lt;EditorImportPlugin&gt;,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;TreeItem*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;TreeItem*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;TrackNodeCache*,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;TrackNodeCache*,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Tab,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Tab,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Ref&lt;EditorResourcePreviewGenerator&gt;,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Ref&lt;EditorResourcePreviewGenerator&gt;,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;Input,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;Input,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;InputData,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;InputData,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;p_custom_args&apos; should be passed by reference." verbose="Parameter &apos;p_custom_args&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.">
            <location file="tools/editor/editor_run.h" line="50"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: signed_nibble" verbose="Unused variable: signed_nibble">
            <location file="tools/editor/plugins/sample_editor_plugin.cpp" line="154"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ofs&apos; is assigned a value that is never used." verbose="Variable &apos;ofs&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/sample_editor_plugin.cpp" line="290"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ste&apos; is assigned a value that is never used." verbose="Variable &apos;ste&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/script_editor_plugin.cpp" line="524"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderTextEditor::type&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderTextEditor::type&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/shader_editor_plugin.cpp" line="164"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;newx&apos; can be reduced." verbose="The scope of the variable &apos;newx&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/plugins/shader_graph_editor_plugin.cpp" line="426"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;newy&apos; can be reduced." verbose="The scope of the variable &apos;newy&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/plugins/shader_graph_editor_plugin.cpp" line="426"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;w&apos; is assigned a value that is never used." verbose="Variable &apos;w&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/shader_graph_editor_plugin.cpp" line="186"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;GraphColorRampEdit::grabbed_at&apos; is not initialized in the constructor." verbose="Member variable &apos;GraphColorRampEdit::grabbed_at&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/shader_graph_editor_plugin.cpp" line="301"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ShaderGraphView::edited_id&apos; is not initialized in the constructor." verbose="Member variable &apos;ShaderGraphView::edited_id&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/shader_graph_editor_plugin.cpp" line="2194"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: next.height" verbose="Uninitialized struct member: next.height">
            <location file="tools/editor/plugins/shader_graph_editor_plugin.cpp" line="202"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;snap&apos; can be reduced." verbose="The scope of the variable &apos;snap&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/plugins/spatial_editor_plugin.cpp" line="1268"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;min_d&apos; is assigned a value that is never used." verbose="Variable &apos;min_d&apos; is assigned a value that is never used.">
            <location file="tools/editor/plugins/spatial_editor_plugin.cpp" line="264"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;StyleBoxEditorPlugin::editor&apos; is not initialized in the constructor." verbose="Member variable &apos;StyleBoxEditorPlugin::editor&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/style_box_editor_plugin.cpp" line="99"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ThemeEditorPlugin::editor&apos; is not initialized in the constructor." verbose="Member variable &apos;ThemeEditorPlugin::editor&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/theme_editor_plugin.cpp" line="844"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TileSetEditor::menu&apos; is not initialized in the constructor." verbose="Member variable &apos;TileSetEditor::menu&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/tile_set_editor_plugin.cpp" line="211"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TileSetEditor::to_erase&apos; is not initialized in the constructor." verbose="Member variable &apos;TileSetEditor::to_erase&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/tile_set_editor_plugin.cpp" line="211"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TileSetEditor::option&apos; is not initialized in the constructor." verbose="Member variable &apos;TileSetEditor::option&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/tile_set_editor_plugin.cpp" line="211"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TileSetEditorPlugin::editor&apos; is not initialized in the constructor." verbose="Member variable &apos;TileSetEditorPlugin::editor&apos; is not initialized in the constructor.">
            <location file="tools/editor/plugins/tile_set_editor_plugin.cpp" line="255"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;updates&apos; is assigned a value that is never used." verbose="Variable &apos;updates&apos; is assigned a value that is never used.">
            <location file="tools/editor/progress_dialog.cpp" line="129"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: t.vb" verbose="Uninitialized struct member: t.vb">
            <location file="tools/editor/progress_dialog.cpp" line="56"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: t.state" verbose="Uninitialized struct member: t.state">
            <location file="tools/editor/progress_dialog.cpp" line="56"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: no_updates" verbose="Uninitialized variable: no_updates">
            <location file="tools/editor/progress_dialog.cpp" line="124"/>
        </error>
        <error id="uninitStructMember" severity="error" msg="Uninitialized struct member: t.hb" verbose="Uninitialized struct member: t.hb">
            <location file="tools/editor/progress_dialog.cpp" line="189"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;margin&apos; is assigned a value that is never used." verbose="Variable &apos;margin&apos; is assigned a value that is never used.">
            <location file="tools/editor/project_manager.cpp" line="815"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;button_margin&apos; is assigned a value that is never used." verbose="Variable &apos;button_margin&apos; is assigned a value that is never used.">
            <location file="tools/editor/project_manager.cpp" line="816"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ProjectItem::last_modified&apos; is not initialized in the constructor." verbose="Member variable &apos;ProjectItem::last_modified&apos; is not initialized in the constructor." inconclusive="true">
            <location file="tools/editor/project_manager.cpp" line="342"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;ProjectItem::favorite&apos; is not initialized in the constructor." verbose="Member variable &apos;ProjectItem::favorite&apos; is not initialized in the constructor." inconclusive="true">
            <location file="tools/editor/project_manager.cpp" line="342"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;do_all&apos; is assigned a value that is never used." verbose="Variable &apos;do_all&apos; is assigned a value that is never used.">
            <location file="tools/editor/project_export.cpp" line="395"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: swap" verbose="Uninitialized variable: swap">
            <location file="tools/editor/project_settings.cpp" line="798"/>
        </error>
        <error id="duplicateBranch" severity="style" msg="Found duplicate branches for &apos;if&apos; and &apos;else&apos;." verbose="Finding the same code in an &apos;if&apos; and related &apos;else&apos; branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." inconclusive="true">
            <location file="tools/editor/property_editor.cpp" line="1782"/>
            <location file="tools/editor/property_editor.cpp" line="1785"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;notnil&apos; can be reduced." verbose="The scope of the variable &apos;notnil&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/property_editor.cpp" line="2716"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;notnil&apos; is assigned a value that is never used." verbose="Variable &apos;notnil&apos; is assigned a value that is never used.">
            <location file="tools/editor/property_editor.cpp" line="2739"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bottom_node_pos_next&apos; is assigned a value that is never used." verbose="Variable &apos;bottom_node_pos_next&apos; is assigned a value that is never used.">
            <location file="tools/editor/scene_tree_dock.cpp" line="302"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;has_items&apos; can be reduced." verbose="The scope of the variable &apos;has_items&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/editor/scenes_dock.cpp" line="63"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;has_items&apos; is assigned a value that is never used." verbose="Variable &apos;has_items&apos; is assigned a value that is never used.">
            <location file="tools/editor/scenes_dock.cpp" line="68"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/script_editor_debugger.cpp" line="928"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/editor/script_editor_debugger.cpp" line="936"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;step&apos; is assigned a value that is never used." verbose="Variable &apos;step&apos; is assigned a value that is never used.">
            <location file="tools/editor/spatial_editor_gizmos.cpp" line="2405"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;step&apos; is assigned a value that is never used." verbose="Variable &apos;step&apos; is assigned a value that is never used.">
            <location file="tools/editor/spatial_editor_gizmos.cpp" line="2522"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;cs&apos; is assigned a value that is never used." verbose="Variable &apos;cs&apos; is assigned a value that is never used.">
            <location file="tools/editor/spatial_editor_gizmos.cpp" line="2590"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;step&apos; is assigned a value that is never used." verbose="Variable &apos;step&apos; is assigned a value that is never used.">
            <location file="tools/editor/spatial_editor_gizmos.cpp" line="2786"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: globals" verbose="Possible null pointer dereference: globals">
            <location file="tools/freetype/freetype/src/autofit/afglobal.c" line="186"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/autofit/afglobal.c" line="199"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SpatialGizmoTool::base&apos; is not initialized in the constructor." verbose="Member variable &apos;SpatialGizmoTool::base&apos; is not initialized in the constructor.">
            <location file="tools/editor/spatial_editor_gizmos.cpp" line="679"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SpatialGizmoTool::spatial_node&apos; is not initialized in the constructor." verbose="Member variable &apos;SpatialGizmoTool::spatial_node&apos; is not initialized in the constructor.">
            <location file="tools/editor/spatial_editor_gizmos.cpp" line="679"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/autofit/afhints.c" line="541"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/basepic.c" line="53"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;swap&apos; can be reduced." verbose="The scope of the variable &apos;swap&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/base/ftoutln.c" line="579"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;Fail&apos; is not used." verbose="Label &apos;Fail&apos; is not used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="4641"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/base/ftgloadr.c" line="74"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftgloadr.c" line="107"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftgloadr.c" line="132"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/base/ftgloadr.c" line="168"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftgloadr.c" line="169"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="227"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="294"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="325"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="326"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="376"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="457"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="3209"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="3225"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: error" verbose="Unused variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="3226"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="3937"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="4171"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="4599"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftstream.c" line="220"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftstream.c" line="327"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftgloadr.c" line="82"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftgloadr.c" line="180"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="209"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="335"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1185"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="2441"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="3925"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="4612"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/base/ftrfork.c" line="507"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftrfork.c" line="515"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/base/ftrfork.c" line="543"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftrfork.c" line="551"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftrfork.c" line="521"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftrfork.c" line="557"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftrfork.c" line="709"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftrfork.c" line="714"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;error&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;error&apos; is reassigned a value before the old one has been used.">
            <location file="tools/freetype/freetype/src/base/ftpic.c" line="37"/>
            <location file="tools/freetype/freetype/src/base/ftpic.c" line="32"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;error&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;error&apos; is reassigned a value before the old one has been used.">
            <location file="tools/freetype/freetype/src/base/ftmac.c" line="970"/>
            <location file="tools/freetype/freetype/src/base/ftmac.c" line="966"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: lwfn_file_name" verbose="Uninitialized variable: lwfn_file_name">
            <location file="tools/freetype/freetype/src/base/ftmac.c" line="551"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: lwfn_file_name" verbose="Uninitialized variable: lwfn_file_name">
            <location file="tools/freetype/freetype/src/base/ftmac.c" line="859"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: params" verbose="Possible null pointer dereference: params">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1173"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: params" verbose="Possible null pointer dereference: params">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1175"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1308"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1368"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1434"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1780"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1891"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1351"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1449"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1454"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1456"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1465"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;saved_a&apos; can be reduced." verbose="The scope of the variable &apos;saved_a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/base/md5.c" line="96"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;saved_b&apos; can be reduced." verbose="The scope of the variable &apos;saved_b&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/base/md5.c" line="96"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;saved_c&apos; can be reduced." verbose="The scope of the variable &apos;saved_c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/base/md5.c" line="96"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;saved_d&apos; can be reduced." verbose="The scope of the variable &apos;saved_d&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/base/md5.c" line="96"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;md5_free&apos; can be reduced." verbose="The scope of the variable &apos;md5_free&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/base/md5.c" line="213"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftbitmap.c" line="47"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/base/ftbitmap.c" line="105"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftbitmap.c" line="446"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftbitmap.c" line="749"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_LONG64;FT_MULFIX_ASSEMBLER&apos; since the value of &apos;FT_MULFIX_ASSEMBLER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_LONG64;FT_MULFIX_ASSEMBLER&apos; since the value of &apos;FT_MULFIX_ASSEMBLER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/base/ftcalc.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_MULFIX_ASSEMBLER&apos; since the value of &apos;FT_MULFIX_ASSEMBLER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_MULFIX_ASSEMBLER&apos; since the value of &apos;FT_MULFIX_ASSEMBLER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/base/ftcalc.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;clazz&apos; can be reduced." verbose="The scope of the variable &apos;clazz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/base/ftglyph.c" line="427"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;clazz&apos; can be reduced." verbose="The scope of the variable &apos;clazz&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/base/ftglyph.c" line="459"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftglyph.c" line="285"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/base/ftglyph.c" line="286"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftglyph.c" line="617"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftglyph.c" line="301"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftgxval.c" line="84"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftgxval.c" line="135"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;Exit&apos; is not used." verbose="Label &apos;Exit&apos; is not used.">
            <location file="tools/freetype/freetype/src/base/ftinit.c" line="182"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftinit.c" line="165"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: clazz" verbose="Unused variable: clazz">
            <location file="tools/freetype/freetype/src/base/ftinit.c" line="160"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftinit.c" line="171"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftinit.c" line="183"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;default_filter&apos; is assigned a value that is never used." verbose="Variable &apos;default_filter&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftlcdfil.c" line="292"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftotval.c" line="85"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftsnames.c" line="63"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftsnames.c" line="64"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftstroke.c" line="636"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/base/ftstroke.c" line="792"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/base/ftstroke.c" line="862"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_LONG64;FT_MULFIX_ASSEMBLER&apos; since the value of &apos;FT_MULFIX_ASSEMBLER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_LONG64;FT_MULFIX_ASSEMBLER&apos; since the value of &apos;FT_MULFIX_ASSEMBLER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/base/ftbase.c" line="1"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/base/ftstroke.c" line="812"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;free&apos; can be reduced." verbose="The scope of the variable &apos;free&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/base/md5.c" line="213"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/bdf/bdfdrivr.c" line="203"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/bdf/bdfdrivr.c" line="321"/>
        </error>
        <error id="arrayIndexThenCheck" severity="style" msg="Array index &apos;start&apos; is used before limits check." verbose="Defensive programming: The variable &apos;start&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits.">
            <location file="tools/freetype/freetype/src/bdf/bdflib.c" line="774"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/base/ftbase.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_MULFIX_ASSEMBLER&apos; since the value of &apos;FT_MULFIX_ASSEMBLER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_MULFIX_ASSEMBLER&apos; since the value of &apos;FT_MULFIX_ASSEMBLER&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/base/ftbase.c" line="1"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cache/ftcmru.c" line="315"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cache/ftcmanag.c" line="421"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cache/ftccache.c" line="134"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: error" verbose="Unused variable: error">
            <location file="tools/freetype/freetype/src/cache/ftccache.c" line="135"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cache/ftccache.c" line="188"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: error" verbose="Unused variable: error">
            <location file="tools/freetype/freetype/src/cache/ftccache.c" line="189"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cache/ftccache.c" line="337"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/cache/ftccache.c" line="338"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cache/ftccache.c" line="393"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cache/ftccmap.c" line="103"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/cache/ftccmap.c" line="118"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cache/ftccmap.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cache/ftcimage.c" line="34"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cache/ftcimage.c" line="62"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/cache/ftcsbits.c" line="47"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cache/ftcsbits.c" line="71"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/cache/ftcmanag.c" line="405"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/cache/ftccache.c" line="346"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/cache/ftccmap.c" line="136"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/cache/ftcimage.c" line="89"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/cache/ftcsbits.c" line="60"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/cache/ftccmap.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/cache/ftcache.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/base/ftobjs.c" line="1"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;arrstack!=0&apos; is redundant or there is possible null pointer dereference: arrstack." verbose="Either the condition &apos;arrstack!=0&apos; is redundant or there is possible null pointer dereference: arrstack.">
            <location file="tools/freetype/freetype/src/cff/cf2arrst.c" line="81"/>
            <location file="tools/freetype/freetype/src/cff/cf2arrst.c" line="78"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cf2arrst.c" line="78"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;unitsPerEm&apos; is assigned a value that is never used." verbose="Variable &apos;unitsPerEm&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cf2blues.c" line="93"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;error&apos; is assigned a value that is never used." verbose="Variable &apos;error&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cf2ft.c" line="274"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;error&apos; is assigned a value that is never used." verbose="Variable &apos;error&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cf2stack.c" line="56"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cf2stack.c" line="78"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cffcmap.c" line="165"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/cff/cffload.c" line="205"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cffload.c" line="206"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cffload.c" line="306"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cffload.c" line="573"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cffobjs.c" line="1033"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/cff/cffload.c" line="220"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/cff/cffload.c" line="293"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced." verbose="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/cff/cffobjs.c" line="614"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/cff/cffobjs.c" line="1"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cffparse.c" line="786"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/cff/cffparse.c" line="799"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cffparse.c" line="800"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/cff/cffparse.c" line="817"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cff/cffpic.c" line="65"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;matrix&apos; can be reduced." verbose="The scope of the variable &apos;matrix&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/cid/cidload.c" line="153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;offset&apos; can be reduced." verbose="The scope of the variable &apos;offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/cid/cidload.c" line="154"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cid/cidobjs.c" line="207"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/cid/cidparse.c" line="216"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/cid/cidparse.c" line="81"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;func==0&apos; is redundant or there is possible null pointer dereference: func." verbose="Either the condition &apos;func==0&apos; is redundant or there is possible null pointer dereference: func.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvcommn.c" line="792"/>
            <location file="tools/freetype/freetype/src/gxvalid/gxvcommn.c" line="795"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;maxState&apos; is assigned a value that is never used." verbose="Variable &apos;maxState&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvcommn.c" line="1291"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;classTable_length&apos; is assigned a value that is never used." verbose="Variable &apos;classTable_length&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvcommn.c" line="1625"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;maxState&apos; is assigned a value that is never used." verbose="Variable &apos;maxState&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvcommn.c" line="1644"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;verb&apos; is assigned a value that is never used." verbose="Variable &apos;verb&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmort0.c" line="91"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;p&apos; is assigned a value that is never used." verbose="Variable &apos;p&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmorx2.c" line="320"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvcommn.c" line="696"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvcommn.c" line="1732"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvjust.c" line="295"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvjust.c" line="299"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvjust.c" line="302"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvjust.c" line="326"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvjust.c" line="516"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvjust.c" line="522"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvkern.c" line="497"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvkern.c" line="672"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvtrak.c" line="133"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvtrak.c" line="179"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmort.c" line="127"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmort.c" line="133"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmort.c" line="140"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmort.c" line="143"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmort.c" line="206"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmort0.c" line="121"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmort5.c" line="116"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmort5.c" line="119"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmort5.c" line="122"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmorx.c" line="102"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvmorx2.c" line="252"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used." verbose="Variable &apos;FT_TRACE4&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/gxvalid/gxvprop.c" line="155"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: MinCoord_p" verbose="Unused variable: MinCoord_p">
            <location file="tools/freetype/freetype/src/otvalid/otvbase.c" line="129"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: MaxCoord_p" verbose="Unused variable: MaxCoord_p">
            <location file="tools/freetype/freetype/src/otvalid/otvbase.c" line="130"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: BaseValues_p" verbose="Unused variable: BaseValues_p">
            <location file="tools/freetype/freetype/src/otvalid/otvbase.c" line="184"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: DefaultMinMax_p" verbose="Unused variable: DefaultMinMax_p">
            <location file="tools/freetype/freetype/src/otvalid/otvbase.c" line="185"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: BaseTagList_p" verbose="Unused variable: BaseTagList_p">
            <location file="tools/freetype/freetype/src/otvalid/otvbase.c" line="258"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: HorizAxis_p" verbose="Unused variable: HorizAxis_p">
            <location file="tools/freetype/freetype/src/otvalid/otvbase.c" line="288"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: VertAxis_p" verbose="Unused variable: VertAxis_p">
            <location file="tools/freetype/freetype/src/otvalid/otvbase.c" line="289"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: GlyphClassDef_p" verbose="Unused variable: GlyphClassDef_p">
            <location file="tools/freetype/freetype/src/otvalid/otvgdef.c" line="159"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: AttachListOffset_p" verbose="Unused variable: AttachListOffset_p">
            <location file="tools/freetype/freetype/src/otvalid/otvgdef.c" line="160"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: LigCaretListOffset_p" verbose="Unused variable: LigCaretListOffset_p">
            <location file="tools/freetype/freetype/src/otvalid/otvgdef.c" line="161"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: MarkAttachClassDef_p" verbose="Unused variable: MarkAttachClassDef_p">
            <location file="tools/freetype/freetype/src/otvalid/otvgdef.c" line="162"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: anchor_offset_p" verbose="Unused variable: anchor_offset_p">
            <location file="tools/freetype/freetype/src/otvalid/otvgpos.c" line="81"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: device_p" verbose="Unused variable: device_p">
            <location file="tools/freetype/freetype/src/otvalid/otvgpos.c" line="214"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: XDeviceTable_p" verbose="Unused variable: XDeviceTable_p">
            <location file="tools/freetype/freetype/src/otvalid/otvgpos.c" line="276"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: YDeviceTable_p" verbose="Unused variable: YDeviceTable_p">
            <location file="tools/freetype/freetype/src/otvalid/otvgpos.c" line="277"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: EntryAnchor_p" verbose="Unused variable: EntryAnchor_p">
            <location file="tools/freetype/freetype/src/otvalid/otvgpos.c" line="598"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ExitAnchor_p" verbose="Unused variable: ExitAnchor_p">
            <location file="tools/freetype/freetype/src/otvalid/otvgpos.c" line="599"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ShrinkageEnableGSUB_p" verbose="Unused variable: ShrinkageEnableGSUB_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="49"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ShrinkageDisableGSUB_p" verbose="Unused variable: ShrinkageDisableGSUB_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="50"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ShrinkageEnableGPOS_p" verbose="Unused variable: ShrinkageEnableGPOS_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="51"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ShrinkageDisableGPOS_p" verbose="Unused variable: ShrinkageDisableGPOS_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="52"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ExtensionEnableGSUB_p" verbose="Unused variable: ExtensionEnableGSUB_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="53"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ExtensionDisableGSUB_p" verbose="Unused variable: ExtensionDisableGSUB_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="54"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ExtensionEnableGPOS_p" verbose="Unused variable: ExtensionEnableGPOS_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="55"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ExtensionDisableGPOS_p" verbose="Unused variable: ExtensionDisableGPOS_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="56"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ShrinkageJstfMax_p" verbose="Unused variable: ShrinkageJstfMax_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="57"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ExtensionJstfMax_p" verbose="Unused variable: ExtensionJstfMax_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="58"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ExtGlyph_p" verbose="Unused variable: ExtGlyph_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="155"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: DefJstfLangSys_p" verbose="Unused variable: DefJstfLangSys_p">
            <location file="tools/freetype/freetype/src/otvalid/otvjstf.c" line="156"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: DeviceTableOffset_p" verbose="Unused variable: DeviceTableOffset_p">
            <location file="tools/freetype/freetype/src/otvalid/otvmath.c" line="53"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: Coverage_p" verbose="Unused variable: Coverage_p">
            <location file="tools/freetype/freetype/src/otvalid/otvmath.c" line="93"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: DeviceTableOffset_p" verbose="Unused variable: DeviceTableOffset_p">
            <location file="tools/freetype/freetype/src/otvalid/otvmath.c" line="94"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: DeviceTableOffset_p" verbose="Unused variable: DeviceTableOffset_p">
            <location file="tools/freetype/freetype/src/otvalid/otvmath.c" line="141"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: Coverage_p" verbose="Unused variable: Coverage_p">
            <location file="tools/freetype/freetype/src/otvalid/otvmath.c" line="184"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: MKRecordOffset_p" verbose="Unused variable: MKRecordOffset_p">
            <location file="tools/freetype/freetype/src/otvalid/otvmath.c" line="185"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: DeviceTableOffset_p" verbose="Unused variable: DeviceTableOffset_p">
            <location file="tools/freetype/freetype/src/otvalid/otvmath.c" line="281"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: GlyphAssembly_p" verbose="Unused variable: GlyphAssembly_p">
            <location file="tools/freetype/freetype/src/otvalid/otvmath.c" line="322"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: VCoverage_p" verbose="Unused variable: VCoverage_p">
            <location file="tools/freetype/freetype/src/otvalid/otvmath.c" line="361"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: HCoverage_p" verbose="Unused variable: HCoverage_p">
            <location file="tools/freetype/freetype/src/otvalid/otvmath.c" line="362"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: Offset_p" verbose="Unused variable: Offset_p">
            <location file="tools/freetype/freetype/src/otvalid/otvmath.c" line="363"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/otvalid/otvmod.c" line="219"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/otvalid/otvmod.c" line="230"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;error&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;error&apos; is reassigned a value before the old one has been used.">
            <location file="tools/freetype/freetype/src/pcf/pcfread.c" line="1104"/>
            <location file="tools/freetype/freetype/src/pcf/pcfread.c" line="1099"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;error&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;error&apos; is reassigned a value before the old one has been used.">
            <location file="tools/freetype/freetype/src/pcf/pcfdrivr.c" line="276"/>
            <location file="tools/freetype/freetype/src/pcf/pcfdrivr.c" line="267"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/pcf/pcfutil.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/pcf/pcfutil.c" line="88"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prop&apos; can be reduced." verbose="The scope of the variable &apos;prop&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/pcf/pcfdrivr.c" line="222"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/pcf/pcfread.c" line="990"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/pcf/pcfdrivr.c" line="215"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;gchar&apos; can be reduced." verbose="The scope of the variable &apos;gchar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/pfr/pfrcmap.c" line="73"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/pfr/pfrload.c" line="156"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/pfr/pfrgload.c" line="55"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/pfr/pfrobjs.c" line="52"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;Too_Short&apos; is not used." verbose="Label &apos;Too_Short&apos; is not used.">
            <location file="tools/freetype/freetype/src/pfr/pfrgload.c" line="548"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;Too_Short&apos; is not used." verbose="Label &apos;Too_Short&apos; is not used.">
            <location file="tools/freetype/freetype/src/pfr/pfrgload.c" line="711"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/pfr/pfrload.c" line="168"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/pfr/pfrload.c" line="216"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;Too_Short&apos; is not used." verbose="Label &apos;Too_Short&apos; is not used.">
            <location file="tools/freetype/freetype/src/pfr/pfrload.c" line="92"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;Too_Short&apos; is not used." verbose="Label &apos;Too_Short&apos; is not used.">
            <location file="tools/freetype/freetype/src/pfr/pfrload.c" line="330"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;Too_Short&apos; is not used." verbose="Label &apos;Too_Short&apos; is not used.">
            <location file="tools/freetype/freetype/src/pfr/pfrload.c" line="429"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;Too_Short&apos; is not used." verbose="Label &apos;Too_Short&apos; is not used.">
            <location file="tools/freetype/freetype/src/pfr/pfrload.c" line="508"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;Too_Short&apos; is not used." verbose="Label &apos;Too_Short&apos; is not used.">
            <location file="tools/freetype/freetype/src/pfr/pfrload.c" line="604"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;Too_Short&apos; is not used." verbose="Label &apos;Too_Short&apos; is not used.">
            <location file="tools/freetype/freetype/src/pfr/pfrload.c" line="934"/>
        </error>
        <error id="unusedLabel" severity="style" msg="Label &apos;Too_Short&apos; is not used." verbose="Label &apos;Too_Short&apos; is not used.">
            <location file="tools/freetype/freetype/src/pfr/pfrsbit.c" line="473"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/psaux/afmparse.c" line="403"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: error" verbose="Unused variable: error">
            <location file="tools/freetype/freetype/src/psaux/afmparse.c" line="404"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/psaux/afmparse.c" line="534"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/psaux/afmparse.c" line="558"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/psaux/afmparse.c" line="538"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/psaux/afmparse.c" line="605"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/psaux/afmparse.c" line="703"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/psaux/psobjs.c" line="119"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/psaux/psobjs.c" line="121"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/psaux/psobjs.c" line="242"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/psaux/psobjs.c" line="266"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/psaux/t1cmap.c" line="295"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/psaux/psobjs.c" line="91"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/psaux/psobjs.c" line="128"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;flags2&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;flags2&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="tools/freetype/freetype/src/pshinter/pshalgo.c" line="1796"/>
            <location file="tools/freetype/freetype/src/pshinter/pshalgo.c" line="1795"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;flags2&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;flags2&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="tools/freetype/freetype/src/pshinter/pshalgo.c" line="1818"/>
            <location file="tools/freetype/freetype/src/pshinter/pshalgo.c" line="1817"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/pshinter/pshalgo.c" line="1887"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: error" verbose="Unused variable: error">
            <location file="tools/freetype/freetype/src/pshinter/pshalgo.c" line="1914"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/pshinter/pshalgo.c" line="241"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/pshinter/pshalgo.c" line="2209"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;dim&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;dim&apos; is reassigned a value before the old one has been used.">
            <location file="tools/freetype/freetype/src/pshinter/pshglob.c" line="763"/>
            <location file="tools/freetype/freetype/src/pshinter/pshglob.c" line="760"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/pshinter/pshglob.c" line="626"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/pshinter/pshglob.c" line="650"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/pshinter/pshglob.c" line="749"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/pshinter/pshpic.c" line="37"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/pshinter/pshpic.c" line="54"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/psnames/psmodule.c" line="372"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/psnames/psmodule.c" line="393"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/psnames/pspic.c" line="45"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Alignment_::l&apos; is never used." verbose="struct or union member &apos;Alignment_::l&apos; is never used.">
            <location file="tools/freetype/freetype/src/raster/ftraster.c" line="321"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Alignment_::p&apos; is never used." verbose="struct or union member &apos;Alignment_::p&apos; is never used.">
            <location file="tools/freetype/freetype/src/raster/ftraster.c" line="322"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct or union member &apos;Alignment_::f&apos; is never used." verbose="struct or union member &apos;Alignment_::f&apos; is never used.">
            <location file="tools/freetype/freetype/src/raster/ftraster.c" line="323"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/raster/ftraster.c" line="3485"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/raster/ftraster.c" line="3505"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;.">
            <location file="tools/freetype/freetype/src/raster/ftraster.c" line="2210"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/raster/ftraster.c" line="3498"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;flags&apos; is reassigned a value before the old one has been used if variable is no semaphore variable." verbose="Variable &apos;flags&apos; is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code." inconclusive="true">
            <location file="tools/freetype/freetype/src/raster/ftraster.c" line="758"/>
            <location file="tools/freetype/freetype/src/raster/ftraster.c" line="752"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/raster/rastpic.c" line="37"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/raster/rastpic.c" line="59"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: error" verbose="Unused variable: error">
            <location file="tools/freetype/freetype/src/sfnt/pngshim.c" line="155"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;mask&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;mask&apos; is reassigned a value before the old one has been used.">
            <location file="tools/freetype/freetype/src/sfnt/ttkern.c" line="192"/>
            <location file="tools/freetype/freetype/src/sfnt/ttkern.c" line="186"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;next&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;next&apos; is reassigned a value before the old one has been used.">
            <location file="tools/freetype/freetype/src/sfnt/ttkern.c" line="209"/>
            <location file="tools/freetype/freetype/src/sfnt/ttkern.c" line="199"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/ttload.c" line="872"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/ttkern.c" line="169"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: error" verbose="Unused variable: error">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="91"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="356"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="357"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="1083"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="1114"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="1124"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/sfnt/ttload.c" line="148"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/sfnt/ttload.c" line="512"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="379"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="402"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="417"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="420"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="435"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/sfnt/sfobjs.c" line="440"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/sfntpic.c" line="70"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/ttcmap.c" line="3379"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;recs&apos; is assigned a value that is never used." verbose="Variable &apos;recs&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/ttcmap.c" line="3409"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/sfnt/ttcmap.c" line="3393"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/ttcmap.c" line="3394"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/sfnt/ttcmap.c" line="3406"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/ttsbit.c" line="116"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/ttbdf.c" line="48"/>
        </error>
        <error id="autoVariables" severity="error" msg="Address of local auto-variable assigned to a function parameter." verbose="Function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. The address is invalid after the function ends and it might &apos;leak&apos; from the function through the parameter." inconclusive="true">
            <location file="tools/freetype/freetype/src/sfnt/ttsbit.c" line="912"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/sfnt/ttpost.c" line="417"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/sfnt/ttcmap.c" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ids&apos; can be reduced." verbose="The scope of the variable &apos;ids&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/sfnt/ttcmap.c" line="325"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;error&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;error&apos; is reassigned a value before the old one has been used.">
            <location file="tools/freetype/freetype/src/sfnt/ttsbit.c" line="59"/>
            <location file="tools/freetype/freetype/src/sfnt/ttsbit.c" line="48"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/sfnt/sfnt.c" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;FT_MAX_CHARMAP_CACHEABLE&apos; since the value of &apos;FT_MAX_CHARMAP_CACHEABLE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="tools/freetype/freetype/src/cff/cff.c" line="1"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/smooth/ftgrays.c" line="2053"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/smooth/ftgrays.c" line="2071"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/smooth/ftgrays.c" line="2064"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;worker&apos; is assigned a value that is never used." verbose="Variable &apos;worker&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/smooth/ftgrays.c" line="1956"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/smooth/ftspic.c" line="37"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/smooth/ftspic.c" line="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p&apos; can be reduced." verbose="The scope of the variable &apos;p&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/truetype/ttpload.c" line="178"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;p_limit&apos; can be reduced." verbose="The scope of the variable &apos;p_limit&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/truetype/ttpload.c" line="179"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttpload.c" line="253"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttpload.c" line="562"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/truetype/ttgload.c" line="286"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttgload.c" line="309"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: error" verbose="Unused variable: error">
            <location file="tools/freetype/freetype/src/truetype/ttobjs.c" line="191"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttobjs.c" line="683"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttobjs.c" line="684"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/truetype/ttgload.c" line="297"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttpic.c" line="47"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttgload.c" line="891"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttgxvar.c" line="219"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttgload.c" line="1204"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/truetype/ttobjs.c" line="121"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttobjs.c" line="920"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="415"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="531"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/truetype/ttobjs.c" line="141"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="538"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1849"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1866"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1888"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1899"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1933"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1974"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2018"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2060"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2104"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2148"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2463"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2490"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2634"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="4325"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="4428"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="4767"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="7274"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;__dummy&apos; is assigned a value that is never used." verbose="Variable &apos;__dummy&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="7785"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1849"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1866"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1888"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1899"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1933"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="1974"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2018"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2060"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2104"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2148"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2463"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2490"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="2634"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="4325"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="4428"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="4767"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="5655"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="5864"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="6765"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="6961"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="7274"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: __dummy" verbose="Uninitialized variable: __dummy">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="7785"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;args&apos; is assigned a value that is never used." verbose="Variable &apos;args&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/truetype/ttinterp.c" line="4136"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;error&apos; is assigned a value that is never used." verbose="Variable &apos;error&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/type1/t1gload.c" line="197"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;char_name&apos; can be reduced." verbose="The scope of the variable &apos;char_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/freetype/freetype/src/type1/t1load.c" line="2212"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/type1/t1load.c" line="515"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/type1/t1load.c" line="1181"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/type1/t1load.c" line="1206"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/type1/t1objs.c" line="211"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/type1/t1parse.c" line="246"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;error&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;error&apos; is reassigned a value before the old one has been used.">
            <location file="tools/freetype/freetype/src/type42/t42objs.c" line="513"/>
            <location file="tools/freetype/freetype/src/type42/t42objs.c" line="510"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/type42/t42objs.c" line="420"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/type42/t42parse.c" line="228"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;error&apos; is not assigned a value." verbose="Variable &apos;error&apos; is not assigned a value.">
            <location file="tools/freetype/freetype/src/type42/t42parse.c" line="320"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: error" verbose="Uninitialized variable: error">
            <location file="tools/freetype/freetype/src/type42/t42parse.c" line="345"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/winfonts/winfnt.c" line="191"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;stream&apos; is assigned a value that is never used." verbose="Variable &apos;stream&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/winfonts/winfnt.c" line="192"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;memory&apos; is assigned a value that is never used." verbose="Variable &apos;memory&apos; is assigned a value that is never used.">
            <location file="tools/freetype/freetype/src/winfonts/winfnt.c" line="677"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="tools/pck/pck_packer.h" line="7"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PCKPacker::_type_name&apos; is not assigned a value in &apos;PCKPacker::operator=&apos;." verbose="Member variable &apos;PCKPacker::_type_name&apos; is not assigned a value in &apos;PCKPacker::operator=&apos;.">
            <location file="tools/pck/pck_packer.h" line="7"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PCKPacker::file&apos; is not assigned a value in &apos;PCKPacker::operator=&apos;." verbose="Member variable &apos;PCKPacker::file&apos; is not assigned a value in &apos;PCKPacker::operator=&apos;.">
            <location file="tools/pck/pck_packer.h" line="7"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PCKPacker::alignment&apos; is not assigned a value in &apos;PCKPacker::operator=&apos;." verbose="Member variable &apos;PCKPacker::alignment&apos; is not assigned a value in &apos;PCKPacker::operator=&apos;.">
            <location file="tools/pck/pck_packer.h" line="7"/>
        </error>
        <error id="operatorEqVarError" severity="warning" msg="Member variable &apos;PCKPacker::files&apos; is not assigned a value in &apos;PCKPacker::operator=&apos;." verbose="Member variable &apos;PCKPacker::files&apos; is not assigned a value in &apos;PCKPacker::operator=&apos;.">
            <location file="tools/pck/pck_packer.h" line="7"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;PCKPacker::alignment&apos; is not initialized in the constructor." verbose="Member variable &apos;PCKPacker::alignment&apos; is not initialized in the constructor.">
            <location file="tools/pck/pck_packer.cpp" line="153"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;Vector&lt;File&gt;::operator=&apos; should return &apos;Vector&lt;File&gt; &amp;&apos;." verbose="The Vector&lt;File&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;Vector&lt;File&gt; &amp;Vector&lt;File&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="core/vector.h" line="163"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PCKPacker::*&apos; can be static." verbose="The member function &apos;PCKPacker::*&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="tools/pck/pck_packer.h" line="7"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;File&gt;::_get_alloc_size&apos; can be static." verbose="The member function &apos;Vector&lt;File&gt;::_get_alloc_size&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="72"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;Vector&lt;File&gt;::sort&apos; can be static." verbose="The member function &apos;Vector&lt;File&gt;::sort&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/vector.h" line="147"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;SortArray&lt;File,C&gt;::bitlog&apos; can be static." verbose="The member function &apos;SortArray&lt;File,C&gt;::bitlog&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="core/sort.h" line="75"/>
        </error>
    </errors>
</results>
